
irq_test.elf:     file format elf32-littlenios2
irq_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x000051c8 memsz 0x00005478 flags rwx
    LOAD off    0x00007000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000038f0  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  02003aa4  02003aa4  00004aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001704  02003ae4  02003ae4  00004ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b0  020051e8  020051e8  000061e8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000590  00000000  00000000  00007028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000a38  00000000  00000000  000075b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b732  00000000  00000000  00007ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002973  00000000  00000000  00013722  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006f82  00000000  00000000  00016095  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b94  00000000  00000000  0001d018  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c99  00000000  00000000  0001dbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001376  00000000  00000000  0001e845  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0001fbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000070  00000000  00000000  0001fc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00021a93  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00021a96  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021a9b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021a9c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00021a9d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00021aa1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00021aa5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00021aa9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00021ab2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00021abb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00021ac4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000016  00000000  00000000  00021aca  2**0
                  CONTENTS, READONLY
 29 .jdi          00004627  00000000  00000000  00021ae0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00039a5b  00000000  00000000  00026107  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
02003aa4 l    d  .rodata	00000000 .rodata
02003ae4 l    d  .rwdata	00000000 .rwdata
020051e8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02003ae4 l     O .rwdata	000000c8 epcs_flash
02003bac l     O .rwdata	00001060 jtag_uart
02000700 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
020007c4 l     F .text	00000288 alt_epcs_flash_query
0200078c l     F .text	00000038 alt_flash_device_register
02000a4c l     F .text	00000108 alt_epcs_flash_memcmp
02000ed4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02001324 l     F .text	00000228 altera_avalon_jtag_uart_irq
0200154c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
02001d20 l     F .text	00000038 epcs_await_wip_released
02001d58 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
02002638 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02002698 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02002778 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02002970 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02002aac l     F .text	000000dc alt_file_locked
02002d10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
02004db4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02003740 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
020038f4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
02003a40 l     F .text	00000040 alt_sim_halt
02000dd4 g     F .text	00000090 alt_epcs_flash_get_info
020005e0 g     F .text	0000006c alt_main
02005208 g     O .bss	00000100 alt_irq
020051e8 g     O .bss	00000001 key_flag
04001000 g       *ABS*	00000000 __alt_mem_epcs_flash
00000000  w      *UND*	00000000 __errno
02001c28 g     F .text	000000f8 epcs_sector_erase
04001000 g     F .entry	00000000 __reset
02005204 g     O .bss	00000004 errno
020051f4 g     O .bss	00000004 alt_argv
0200d1b4 g       *ABS*	00000000 _gp
0200064c g     F .text	00000030 usleep
02004c34 g     O .rwdata	00000180 alt_fd_list
02001f2c g     F .text	00000064 epcs_write_status_register
020031cc g     F .text	00000094 alt_find_dev
020034f8 g     F .text	000000a0 memcpy
02002a34 g     F .text	00000078 alt_io_redirect
02000230 g     F .text	00000054 init_button_pio
02003aa4 g       *ABS*	00000000 __DTOR_END__
02000f68 g     F .text	0000011c alt_epcs_flash_write_block
02001764 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02003a30 g     F .text	00000008 __udivsi3
020051c8 g     O .rwdata	00000004 alt_max_fd
02000e64 g     F .text	00000070 alt_epcs_flash_erase_block
020051e4 g     O .rwdata	00000004 _global_impure_ptr
02002244 g     F .text	00000058 epcs_exit_4_bytes_mode
02005498 g       *ABS*	00000000 __bss_end
020004e8 g     F .text	000000f8 alt_iic_isr_register
02002e68 g     F .text	0000010c alt_tick
020004a0 g     F .text	00000048 alt_ic_irq_enabled
02002dd0 g     F .text	00000098 alt_alarm_stop
020051ec g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
02004c0c g     O .rwdata	00000028 alt_dev_null
020051c0 g     O .rwdata	00000008 alt_dev_list
02003a38 g     F .text	00000008 __umodsi3
02002100 g     F .text	0000006c epcs_read_electronic_signature
02005498 g       *ABS*	00000000 end
02001264 g     F .text	000000c0 altera_avalon_jtag_uart_init
02003aa0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02001988 g     F .text	00000240 altera_avalon_jtag_uart_write
02003744 g     F .text	000001b0 __call_exitprocs
020001b4 g     F .text	00000048 _start
020051fc g     O .bss	00000004 _alt_tick_rate
02002f94 g     F .text	00000238 alt_avalon_spi_command
02005200 g     O .bss	00000004 _alt_nticks
020006b0 g     F .text	00000050 alt_sys_init
0200360c g     F .text	00000134 __register_exitproc
020001fc g     F .text	00000034 ISR_handle_button
020015fc g     F .text	00000074 altera_avalon_jtag_uart_close
02001bc8 g     F .text	00000060 epcs_read_status_register
0200111c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02003380 g     F .text	000000b8 alt_get_fd
020023f0 g     F .text	0000014c alt_busy_sleep
0200216c g     F .text	00000080 epcs_read_device_id
02003484 g     F .text	00000074 memcmp
020011cc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02005498 g       *ABS*	00000000 __alt_stack_base
02001214 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02003260 g     F .text	00000120 alt_find_file
020026c4 g     F .text	000000b4 alt_dev_llist_insert
020051d0 g     O .rwdata	00000008 alt_flash_dev_list
020051e8 g       *ABS*	00000000 __bss_start
02000284 g     F .text	00000090 main
020051f8 g     O .bss	00000004 alt_envp
02001174 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02005308 g     O .bss	00000190 _atexit0
020051cc g     O .rwdata	00000004 alt_errno
02003970 g     F .text	00000060 __divsi3
02003aa4 g       *ABS*	00000000 __CTOR_END__
02000b54 g     F .text	00000280 alt_epcs_flash_write
02003aa4 g       *ABS*	00000000 __DTOR_LIST__
0200067c g     F .text	00000034 alt_irq_init
02002d70 g     F .text	00000060 alt_release_fd
02003438 g     F .text	00000014 atexit
020051e0 g     O .rwdata	00000004 _impure_ptr
020051f0 g     O .bss	00000004 alt_argc
0200283c g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
020051b8 g     O .rwdata	00000008 alt_fs_list
02001d90 g     F .text	0000014c epcs_read_buffer
02000738 g     F .text	00000054 alt_epcs_flash_init
02000314 g     F .text	00000050 alt_ic_isr_register
020051e8 g       *ABS*	00000000 _edata
02005498 g       *ABS*	00000000 _end
020028a0 g     F .text	0000007c alt_flash_open_dev
02001670 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02000400 g     F .text	000000a0 alt_ic_irq_disable
020021ec g     F .text	00000058 epcs_enter_4_bytes_mode
02002f74 g     F .text	00000020 altera_nios2_qsys_irq_init
0200344c g     F .text	00000038 exit
0200291c g     F .text	00000054 alt_flash_close_dev
020039d0 g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02000000 g       *ABS*	00000000 __alt_mem_sdram
02003a80 g     F .text	00000020 _exit
0200229c g     F .text	00000154 alt_alarm_start
02003598 g     F .text	00000074 strlen
02001edc g     F .text	00000050 epcs_write_enable
02002b88 g     F .text	00000188 open
020051b4 g     O .rwdata	00000004 alt_priority_mask
02000364 g     F .text	0000009c alt_ic_irq_enable
02001084 g     F .text	00000098 alt_epcs_flash_read
020051d8 g     O .rwdata	00000008 alt_alarm_list
020027d8 g     F .text	00000064 _do_ctors
0200253c g     F .text	000000fc close
00000000  w      *UND*	00000000 free
02001f90 g     F .text	00000170 epcs_write_buffer



Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08034 	movhi	r3,512
 2000134:	18d48204 	addi	r3,r3,21000
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08034 	movhi	r3,512
 200014c:	18d48204 	addi	r3,r3,21000
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 20001c0:	00bffd16 	blt	zero,r2,20001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c4:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001cc:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001d0:	d6b46d14 	ori	gp,gp,53684
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d4:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001d8:	10947a14 	ori	r2,r2,20968

    movhi r3, %hi(__bss_end)
 20001dc:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001e0:	18d52614 	ori	r3,r3,21656

    beq r2, r3, 1f
 20001e4:	10c00326 	beq	r2,r3,20001f4 <_start+0x40>

0:
    stw zero, (r2)
 20001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f0:	10fffd36 	bltu	r2,r3,20001e8 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f4:	20005e00 	call	20005e0 <alt_main>

020001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001f8:	003fff06 	br	20001f8 <alt_after_alt_main>

020001fc <ISR_handle_button>:
#include <unistd.h>

alt_u8 key_flag = 0;

void ISR_handle_button( void* context )
{
 20001fc:	defffe04 	addi	sp,sp,-8
 2000200:	df000115 	stw	fp,4(sp)
 2000204:	df000104 	addi	fp,sp,4
 2000208:	e13fff15 	stw	r4,-4(fp)
	key_flag = ~key_flag;
 200020c:	d0a00d03 	ldbu	r2,-32716(gp)
 2000210:	0084303a 	nor	r2,zero,r2
 2000214:	d0a00d05 	stb	r2,-32716(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( PIO_KEY_BASE, 0x0 ); // clear the edge capture interrupt
 2000218:	00800304 	movi	r2,12
 200021c:	10000035 	stwio	zero,0(r2)

}
 2000220:	e037883a 	mov	sp,fp
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00104 	addi	sp,sp,4
 200022c:	f800283a 	ret

02000230 <init_button_pio>:

void init_button_pio( void )
 {
 2000230:	defffd04 	addi	sp,sp,-12
 2000234:	dfc00215 	stw	ra,8(sp)
 2000238:	df000115 	stw	fp,4(sp)
 200023c:	df000104 	addi	fp,sp,4
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK( PIO_KEY_BASE, 0x1 );  //enable pio_key interrupt
 2000240:	00800204 	movi	r2,8
 2000244:	00c00044 	movi	r3,1
 2000248:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( PIO_KEY_BASE, 0x0 );  //clear pio_key edge capture register
 200024c:	00800304 	movi	r2,12
 2000250:	10000035 	stwio	zero,0(r2)
	alt_ic_isr_register( PIO_KEY_IRQ_INTERRUPT_CONTROLLER_ID, PIO_KEY_IRQ, ISR_handle_button, NULL, 0x0 );
 2000254:	d8000015 	stw	zero,0(sp)
 2000258:	0009883a 	mov	r4,zero
 200025c:	01400084 	movi	r5,2
 2000260:	01808034 	movhi	r6,512
 2000264:	31807f04 	addi	r6,r6,508
 2000268:	000f883a 	mov	r7,zero
 200026c:	20003140 	call	2000314 <alt_ic_isr_register>
}
 2000270:	e037883a 	mov	sp,fp
 2000274:	dfc00117 	ldw	ra,4(sp)
 2000278:	df000017 	ldw	fp,0(sp)
 200027c:	dec00204 	addi	sp,sp,8
 2000280:	f800283a 	ret

02000284 <main>:


 int main()
 {
 2000284:	defffd04 	addi	sp,sp,-12
 2000288:	dfc00215 	stw	ra,8(sp)
 200028c:	df000115 	stw	fp,4(sp)
 2000290:	df000104 	addi	fp,sp,4
	int i;

    init_button_pio();
 2000294:	20002300 	call	2000230 <init_button_pio>

    for( i=0; i<4; i++ )
 2000298:	e03fff15 	stw	zero,-4(fp)
 200029c:	00000c06 	br	20002d0 <main+0x4c>
   {
	   IOWR_ALTERA_AVALON_PIO_DATA( PIO_LED_BASE, 1<<i );
 20002a0:	00c00044 	movi	r3,1
 20002a4:	e0bfff17 	ldw	r2,-4(fp)
 20002a8:	1886983a 	sll	r3,r3,r2
 20002ac:	00810034 	movhi	r2,1024
 20002b0:	10880004 	addi	r2,r2,8192
 20002b4:	10c00035 	stwio	r3,0(r2)
       usleep( 500000 );                  //each one 0.5s delay
 20002b8:	01000234 	movhi	r4,8
 20002bc:	21284804 	addi	r4,r4,-24288
 20002c0:	200064c0 	call	200064c <usleep>
 {
	int i;

    init_button_pio();

    for( i=0; i<4; i++ )
 20002c4:	e0bfff17 	ldw	r2,-4(fp)
 20002c8:	10800044 	addi	r2,r2,1
 20002cc:	e0bfff15 	stw	r2,-4(fp)
 20002d0:	e0bfff17 	ldw	r2,-4(fp)
 20002d4:	10800110 	cmplti	r2,r2,4
 20002d8:	103ff11e 	bne	r2,zero,20002a0 <main+0x1c>
 20002dc:	00000006 	br	20002e0 <main+0x5c>
       usleep( 500000 );                  //each one 0.5s delay
    }

    while(1)
    {
	   if( key_flag )
 20002e0:	d0a00d03 	ldbu	r2,-32716(gp)
 20002e4:	10803fcc 	andi	r2,r2,255
 20002e8:	1005003a 	cmpeq	r2,r2,zero
 20002ec:	1000051e 	bne	r2,zero,2000304 <main+0x80>
	    {
	      	  IOWR_ALTERA_AVALON_PIO_DATA( PIO_LED_BASE, 1);
 20002f0:	00c10034 	movhi	r3,1024
 20002f4:	18c80004 	addi	r3,r3,8192
 20002f8:	00800044 	movi	r2,1
 20002fc:	18800035 	stwio	r2,0(r3)
 2000300:	003ff706 	br	20002e0 <main+0x5c>
        }
       else
        {
           	  IOWR_ALTERA_AVALON_PIO_DATA( PIO_LED_BASE, 0);
 2000304:	00810034 	movhi	r2,1024
 2000308:	10880004 	addi	r2,r2,8192
 200030c:	10000035 	stwio	zero,0(r2)
        }
     }
 2000310:	003ff306 	br	20002e0 <main+0x5c>

02000314 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2000314:	defff904 	addi	sp,sp,-28
 2000318:	dfc00615 	stw	ra,24(sp)
 200031c:	df000515 	stw	fp,20(sp)
 2000320:	df000504 	addi	fp,sp,20
 2000324:	e13ffc15 	stw	r4,-16(fp)
 2000328:	e17ffd15 	stw	r5,-12(fp)
 200032c:	e1bffe15 	stw	r6,-8(fp)
 2000330:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2000334:	e0800217 	ldw	r2,8(fp)
 2000338:	d8800015 	stw	r2,0(sp)
 200033c:	e13ffc17 	ldw	r4,-16(fp)
 2000340:	e17ffd17 	ldw	r5,-12(fp)
 2000344:	e1bffe17 	ldw	r6,-8(fp)
 2000348:	e1ffff17 	ldw	r7,-4(fp)
 200034c:	20004e80 	call	20004e8 <alt_iic_isr_register>
}  
 2000350:	e037883a 	mov	sp,fp
 2000354:	dfc00117 	ldw	ra,4(sp)
 2000358:	df000017 	ldw	fp,0(sp)
 200035c:	dec00204 	addi	sp,sp,8
 2000360:	f800283a 	ret

02000364 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2000364:	defff904 	addi	sp,sp,-28
 2000368:	df000615 	stw	fp,24(sp)
 200036c:	df000604 	addi	fp,sp,24
 2000370:	e13ffe15 	stw	r4,-8(fp)
 2000374:	e17fff15 	stw	r5,-4(fp)
 2000378:	e0bfff17 	ldw	r2,-4(fp)
 200037c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000380:	0005303a 	rdctl	r2,status
 2000384:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000388:	e0fffb17 	ldw	r3,-20(fp)
 200038c:	00bfff84 	movi	r2,-2
 2000390:	1884703a 	and	r2,r3,r2
 2000394:	1001703a 	wrctl	status,r2
  
  return context;
 2000398:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200039c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 20003a0:	e0fffc17 	ldw	r3,-16(fp)
 20003a4:	00800044 	movi	r2,1
 20003a8:	10c4983a 	sll	r2,r2,r3
 20003ac:	1007883a 	mov	r3,r2
 20003b0:	00808034 	movhi	r2,512
 20003b4:	10947b04 	addi	r2,r2,20972
 20003b8:	10800017 	ldw	r2,0(r2)
 20003bc:	1886b03a 	or	r3,r3,r2
 20003c0:	00808034 	movhi	r2,512
 20003c4:	10947b04 	addi	r2,r2,20972
 20003c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20003cc:	00808034 	movhi	r2,512
 20003d0:	10947b04 	addi	r2,r2,20972
 20003d4:	10800017 	ldw	r2,0(r2)
 20003d8:	100170fa 	wrctl	ienable,r2
 20003dc:	e0bffd17 	ldw	r2,-12(fp)
 20003e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20003e4:	e0bffa17 	ldw	r2,-24(fp)
 20003e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20003ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 20003f0:	e037883a 	mov	sp,fp
 20003f4:	df000017 	ldw	fp,0(sp)
 20003f8:	dec00104 	addi	sp,sp,4
 20003fc:	f800283a 	ret

02000400 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2000400:	defff904 	addi	sp,sp,-28
 2000404:	df000615 	stw	fp,24(sp)
 2000408:	df000604 	addi	fp,sp,24
 200040c:	e13ffe15 	stw	r4,-8(fp)
 2000410:	e17fff15 	stw	r5,-4(fp)
 2000414:	e0bfff17 	ldw	r2,-4(fp)
 2000418:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200041c:	0005303a 	rdctl	r2,status
 2000420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000424:	e0fffb17 	ldw	r3,-20(fp)
 2000428:	00bfff84 	movi	r2,-2
 200042c:	1884703a 	and	r2,r3,r2
 2000430:	1001703a 	wrctl	status,r2
  
  return context;
 2000434:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2000438:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 200043c:	e0fffc17 	ldw	r3,-16(fp)
 2000440:	00800044 	movi	r2,1
 2000444:	10c4983a 	sll	r2,r2,r3
 2000448:	0084303a 	nor	r2,zero,r2
 200044c:	1007883a 	mov	r3,r2
 2000450:	00808034 	movhi	r2,512
 2000454:	10947b04 	addi	r2,r2,20972
 2000458:	10800017 	ldw	r2,0(r2)
 200045c:	1886703a 	and	r3,r3,r2
 2000460:	00808034 	movhi	r2,512
 2000464:	10947b04 	addi	r2,r2,20972
 2000468:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200046c:	00808034 	movhi	r2,512
 2000470:	10947b04 	addi	r2,r2,20972
 2000474:	10800017 	ldw	r2,0(r2)
 2000478:	100170fa 	wrctl	ienable,r2
 200047c:	e0bffd17 	ldw	r2,-12(fp)
 2000480:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000484:	e0bffa17 	ldw	r2,-24(fp)
 2000488:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200048c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2000490:	e037883a 	mov	sp,fp
 2000494:	df000017 	ldw	fp,0(sp)
 2000498:	dec00104 	addi	sp,sp,4
 200049c:	f800283a 	ret

020004a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 20004a0:	defffc04 	addi	sp,sp,-16
 20004a4:	df000315 	stw	fp,12(sp)
 20004a8:	df000304 	addi	fp,sp,12
 20004ac:	e13ffe15 	stw	r4,-8(fp)
 20004b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20004b4:	000530fa 	rdctl	r2,ienable
 20004b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20004bc:	e0ffff17 	ldw	r3,-4(fp)
 20004c0:	00800044 	movi	r2,1
 20004c4:	10c4983a 	sll	r2,r2,r3
 20004c8:	1007883a 	mov	r3,r2
 20004cc:	e0bffd17 	ldw	r2,-12(fp)
 20004d0:	1884703a 	and	r2,r3,r2
 20004d4:	1004c03a 	cmpne	r2,r2,zero
}
 20004d8:	e037883a 	mov	sp,fp
 20004dc:	df000017 	ldw	fp,0(sp)
 20004e0:	dec00104 	addi	sp,sp,4
 20004e4:	f800283a 	ret

020004e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20004e8:	defff404 	addi	sp,sp,-48
 20004ec:	dfc00b15 	stw	ra,44(sp)
 20004f0:	df000a15 	stw	fp,40(sp)
 20004f4:	df000a04 	addi	fp,sp,40
 20004f8:	e13ffb15 	stw	r4,-20(fp)
 20004fc:	e17ffc15 	stw	r5,-16(fp)
 2000500:	e1bffd15 	stw	r6,-12(fp)
 2000504:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2000508:	00bffa84 	movi	r2,-22
 200050c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2000510:	e0bffc17 	ldw	r2,-16(fp)
 2000514:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2000518:	e0bff917 	ldw	r2,-28(fp)
 200051c:	10800808 	cmpgei	r2,r2,32
 2000520:	1000291e 	bne	r2,zero,20005c8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000524:	0005303a 	rdctl	r2,status
 2000528:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200052c:	e0fff717 	ldw	r3,-36(fp)
 2000530:	00bfff84 	movi	r2,-2
 2000534:	1884703a 	and	r2,r3,r2
 2000538:	1001703a 	wrctl	status,r2
  
  return context;
 200053c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2000540:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 2000544:	e0bff917 	ldw	r2,-28(fp)
 2000548:	00c08034 	movhi	r3,512
 200054c:	18d48204 	addi	r3,r3,21000
 2000550:	100490fa 	slli	r2,r2,3
 2000554:	10c7883a 	add	r3,r2,r3
 2000558:	e0bffd17 	ldw	r2,-12(fp)
 200055c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2000560:	e0bff917 	ldw	r2,-28(fp)
 2000564:	00c08034 	movhi	r3,512
 2000568:	18d48204 	addi	r3,r3,21000
 200056c:	100490fa 	slli	r2,r2,3
 2000570:	10c5883a 	add	r2,r2,r3
 2000574:	10c00104 	addi	r3,r2,4
 2000578:	e0bffe17 	ldw	r2,-8(fp)
 200057c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2000580:	e0bffd17 	ldw	r2,-12(fp)
 2000584:	1005003a 	cmpeq	r2,r2,zero
 2000588:	1000051e 	bne	r2,zero,20005a0 <alt_iic_isr_register+0xb8>
 200058c:	e17ff917 	ldw	r5,-28(fp)
 2000590:	e13ffb17 	ldw	r4,-20(fp)
 2000594:	20003640 	call	2000364 <alt_ic_irq_enable>
 2000598:	e0bfff15 	stw	r2,-4(fp)
 200059c:	00000406 	br	20005b0 <alt_iic_isr_register+0xc8>
 20005a0:	e17ff917 	ldw	r5,-28(fp)
 20005a4:	e13ffb17 	ldw	r4,-20(fp)
 20005a8:	20004000 	call	2000400 <alt_ic_irq_disable>
 20005ac:	e0bfff15 	stw	r2,-4(fp)
 20005b0:	e0bfff17 	ldw	r2,-4(fp)
 20005b4:	e0bffa15 	stw	r2,-24(fp)
 20005b8:	e0bff817 	ldw	r2,-32(fp)
 20005bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20005c0:	e0bff617 	ldw	r2,-40(fp)
 20005c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20005c8:	e0bffa17 	ldw	r2,-24(fp)
}
 20005cc:	e037883a 	mov	sp,fp
 20005d0:	dfc00117 	ldw	ra,4(sp)
 20005d4:	df000017 	ldw	fp,0(sp)
 20005d8:	dec00204 	addi	sp,sp,8
 20005dc:	f800283a 	ret

020005e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20005e0:	defffd04 	addi	sp,sp,-12
 20005e4:	dfc00215 	stw	ra,8(sp)
 20005e8:	df000115 	stw	fp,4(sp)
 20005ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20005f0:	0009883a 	mov	r4,zero
 20005f4:	200067c0 	call	200067c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20005f8:	20006b00 	call	20006b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20005fc:	01008034 	movhi	r4,512
 2000600:	210ea904 	addi	r4,r4,15012
 2000604:	01408034 	movhi	r5,512
 2000608:	294ea904 	addi	r5,r5,15012
 200060c:	01808034 	movhi	r6,512
 2000610:	318ea904 	addi	r6,r6,15012
 2000614:	2002a340 	call	2002a34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2000618:	20027d80 	call	20027d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200061c:	01008034 	movhi	r4,512
 2000620:	210a0f04 	addi	r4,r4,10300
 2000624:	20034380 	call	2003438 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2000628:	d1200f17 	ldw	r4,-32708(gp)
 200062c:	d1601017 	ldw	r5,-32704(gp)
 2000630:	d1a01117 	ldw	r6,-32700(gp)
 2000634:	20002840 	call	2000284 <main>
 2000638:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200063c:	01000044 	movi	r4,1
 2000640:	200253c0 	call	200253c <close>
  exit (result);
 2000644:	e13fff17 	ldw	r4,-4(fp)
 2000648:	200344c0 	call	200344c <exit>

0200064c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200064c:	defffd04 	addi	sp,sp,-12
 2000650:	dfc00215 	stw	ra,8(sp)
 2000654:	df000115 	stw	fp,4(sp)
 2000658:	df000104 	addi	fp,sp,4
 200065c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2000660:	e13fff17 	ldw	r4,-4(fp)
 2000664:	20023f00 	call	20023f0 <alt_busy_sleep>
}
 2000668:	e037883a 	mov	sp,fp
 200066c:	dfc00117 	ldw	ra,4(sp)
 2000670:	df000017 	ldw	fp,0(sp)
 2000674:	dec00204 	addi	sp,sp,8
 2000678:	f800283a 	ret

0200067c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200067c:	defffd04 	addi	sp,sp,-12
 2000680:	dfc00215 	stw	ra,8(sp)
 2000684:	df000115 	stw	fp,4(sp)
 2000688:	df000104 	addi	fp,sp,4
 200068c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 2000690:	2002f740 	call	2002f74 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2000694:	00800044 	movi	r2,1
 2000698:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200069c:	e037883a 	mov	sp,fp
 20006a0:	dfc00117 	ldw	ra,4(sp)
 20006a4:	df000017 	ldw	fp,0(sp)
 20006a8:	dec00204 	addi	sp,sp,8
 20006ac:	f800283a 	ret

020006b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20006b0:	defffe04 	addi	sp,sp,-8
 20006b4:	dfc00115 	stw	ra,4(sp)
 20006b8:	df000015 	stw	fp,0(sp)
 20006bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
 20006c0:	01008034 	movhi	r4,512
 20006c4:	210eb904 	addi	r4,r4,15076
 20006c8:	20007380 	call	2000738 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 20006cc:	01008034 	movhi	r4,512
 20006d0:	210ef504 	addi	r4,r4,15316
 20006d4:	000b883a 	mov	r5,zero
 20006d8:	000d883a 	mov	r6,zero
 20006dc:	20012640 	call	2001264 <altera_avalon_jtag_uart_init>
 20006e0:	01008034 	movhi	r4,512
 20006e4:	210eeb04 	addi	r4,r4,15276
 20006e8:	20007000 	call	2000700 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 20006ec:	e037883a 	mov	sp,fp
 20006f0:	dfc00117 	ldw	ra,4(sp)
 20006f4:	df000017 	ldw	fp,0(sp)
 20006f8:	dec00204 	addi	sp,sp,8
 20006fc:	f800283a 	ret

02000700 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2000700:	defffd04 	addi	sp,sp,-12
 2000704:	dfc00215 	stw	ra,8(sp)
 2000708:	df000115 	stw	fp,4(sp)
 200070c:	df000104 	addi	fp,sp,4
 2000710:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2000714:	e13fff17 	ldw	r4,-4(fp)
 2000718:	01408034 	movhi	r5,512
 200071c:	29547004 	addi	r5,r5,20928
 2000720:	20026c40 	call	20026c4 <alt_dev_llist_insert>
}
 2000724:	e037883a 	mov	sp,fp
 2000728:	dfc00117 	ldw	ra,4(sp)
 200072c:	df000017 	ldw	fp,0(sp)
 2000730:	dec00204 	addi	sp,sp,8
 2000734:	f800283a 	ret

02000738 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2000738:	defffc04 	addi	sp,sp,-16
 200073c:	dfc00315 	stw	ra,12(sp)
 2000740:	df000215 	stw	fp,8(sp)
 2000744:	df000204 	addi	fp,sp,8
 2000748:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200074c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2000750:	e13fff17 	ldw	r4,-4(fp)
 2000754:	20007c40 	call	20007c4 <alt_epcs_flash_query>
 2000758:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 200075c:	e0bffe17 	ldw	r2,-8(fp)
 2000760:	1004c03a 	cmpne	r2,r2,zero
 2000764:	1000031e 	bne	r2,zero,2000774 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2000768:	e13fff17 	ldw	r4,-4(fp)
 200076c:	200078c0 	call	200078c <alt_flash_device_register>
 2000770:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2000774:	e0bffe17 	ldw	r2,-8(fp)
}
 2000778:	e037883a 	mov	sp,fp
 200077c:	dfc00117 	ldw	ra,4(sp)
 2000780:	df000017 	ldw	fp,0(sp)
 2000784:	dec00204 	addi	sp,sp,8
 2000788:	f800283a 	ret

0200078c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 200078c:	defffd04 	addi	sp,sp,-12
 2000790:	dfc00215 	stw	ra,8(sp)
 2000794:	df000115 	stw	fp,4(sp)
 2000798:	df000104 	addi	fp,sp,4
 200079c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 20007a0:	e13fff17 	ldw	r4,-4(fp)
 20007a4:	01408034 	movhi	r5,512
 20007a8:	29547404 	addi	r5,r5,20944
 20007ac:	20026c40 	call	20026c4 <alt_dev_llist_insert>
}
 20007b0:	e037883a 	mov	sp,fp
 20007b4:	dfc00117 	ldw	ra,4(sp)
 20007b8:	df000017 	ldw	fp,0(sp)
 20007bc:	dec00204 	addi	sp,sp,8
 20007c0:	f800283a 	ret

020007c4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 20007c4:	defffc04 	addi	sp,sp,-16
 20007c8:	dfc00315 	stw	ra,12(sp)
 20007cc:	df000215 	stw	fp,8(sp)
 20007d0:	df000204 	addi	fp,sp,8
 20007d4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20007d8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 20007dc:	e0bfff17 	ldw	r2,-4(fp)
 20007e0:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 20007e4:	e0bfff17 	ldw	r2,-4(fp)
 20007e8:	11002d17 	ldw	r4,180(r2)
 20007ec:	20021000 	call	2002100 <epcs_read_electronic_signature>
 20007f0:	10c03fcc 	andi	r3,r2,255
 20007f4:	e0bfff17 	ldw	r2,-4(fp)
 20007f8:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 20007fc:	e0bfff17 	ldw	r2,-4(fp)
 2000800:	10802f17 	ldw	r2,188(r2)
 2000804:	10800598 	cmpnei	r2,r2,22
 2000808:	10000a1e 	bne	r2,zero,2000834 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 200080c:	e0ffff17 	ldw	r3,-4(fp)
 2000810:	00802034 	movhi	r2,128
 2000814:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 2000818:	e0ffff17 	ldw	r3,-4(fp)
 200081c:	00802004 	movi	r2,128
 2000820:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2000824:	e0ffff17 	ldw	r3,-4(fp)
 2000828:	00800074 	movhi	r2,1
 200082c:	18801015 	stw	r2,64(r3)
 2000830:	00007306 	br	2000a00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2000834:	e0bfff17 	ldw	r2,-4(fp)
 2000838:	10802f17 	ldw	r2,188(r2)
 200083c:	10800518 	cmpnei	r2,r2,20
 2000840:	10000a1e 	bne	r2,zero,200086c <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2000844:	e0ffff17 	ldw	r3,-4(fp)
 2000848:	00800834 	movhi	r2,32
 200084c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 2000850:	e0ffff17 	ldw	r3,-4(fp)
 2000854:	00800804 	movi	r2,32
 2000858:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200085c:	e0ffff17 	ldw	r3,-4(fp)
 2000860:	00800074 	movhi	r2,1
 2000864:	18801015 	stw	r2,64(r3)
 2000868:	00006506 	br	2000a00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 200086c:	e0bfff17 	ldw	r2,-4(fp)
 2000870:	10802f17 	ldw	r2,188(r2)
 2000874:	108004d8 	cmpnei	r2,r2,19
 2000878:	10000a1e 	bne	r2,zero,20008a4 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 200087c:	e0ffff17 	ldw	r3,-4(fp)
 2000880:	00800434 	movhi	r2,16
 2000884:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 2000888:	e0ffff17 	ldw	r3,-4(fp)
 200088c:	00800404 	movi	r2,16
 2000890:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2000894:	e0ffff17 	ldw	r3,-4(fp)
 2000898:	00800074 	movhi	r2,1
 200089c:	18801015 	stw	r2,64(r3)
 20008a0:	00005706 	br	2000a00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20008a4:	e0bfff17 	ldw	r2,-4(fp)
 20008a8:	10802f17 	ldw	r2,188(r2)
 20008ac:	10800498 	cmpnei	r2,r2,18
 20008b0:	10000a1e 	bne	r2,zero,20008dc <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 20008b4:	e0ffff17 	ldw	r3,-4(fp)
 20008b8:	00800234 	movhi	r2,8
 20008bc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 20008c0:	e0ffff17 	ldw	r3,-4(fp)
 20008c4:	00800204 	movi	r2,8
 20008c8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 20008cc:	e0ffff17 	ldw	r3,-4(fp)
 20008d0:	00800074 	movhi	r2,1
 20008d4:	18801015 	stw	r2,64(r3)
 20008d8:	00004906 	br	2000a00 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 20008dc:	e0bfff17 	ldw	r2,-4(fp)
 20008e0:	10802f17 	ldw	r2,188(r2)
 20008e4:	10800418 	cmpnei	r2,r2,16
 20008e8:	10000a1e 	bne	r2,zero,2000914 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 20008ec:	e0ffff17 	ldw	r3,-4(fp)
 20008f0:	008000b4 	movhi	r2,2
 20008f4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 20008f8:	e0ffff17 	ldw	r3,-4(fp)
 20008fc:	00800104 	movi	r2,4
 2000900:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 2000904:	e0ffff17 	ldw	r3,-4(fp)
 2000908:	00a00014 	movui	r2,32768
 200090c:	18801015 	stw	r2,64(r3)
 2000910:	00003b06 	br	2000a00 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2000914:	e0bfff17 	ldw	r2,-4(fp)
 2000918:	11002d17 	ldw	r4,180(r2)
 200091c:	200216c0 	call	200216c <epcs_read_device_id>
 2000920:	1007883a 	mov	r3,r2
 2000924:	e0bfff17 	ldw	r2,-4(fp)
 2000928:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 200092c:	e0bfff17 	ldw	r2,-4(fp)
 2000930:	10c02f17 	ldw	r3,188(r2)
 2000934:	00804034 	movhi	r2,256
 2000938:	10bfffc4 	addi	r2,r2,-1
 200093c:	1886703a 	and	r3,r3,r2
 2000940:	00800874 	movhi	r2,33
 2000944:	10ae8604 	addi	r2,r2,-17896
 2000948:	18800a1e 	bne	r3,r2,2000974 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200094c:	e0ffff17 	ldw	r3,-4(fp)
 2000950:	00804034 	movhi	r2,256
 2000954:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2000958:	e0ffff17 	ldw	r3,-4(fp)
 200095c:	00804004 	movi	r2,256
 2000960:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2000964:	e0ffff17 	ldw	r3,-4(fp)
 2000968:	00800074 	movhi	r2,1
 200096c:	18801015 	stw	r2,64(r3)
 2000970:	00002306 	br	2000a00 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2000974:	e0bfff17 	ldw	r2,-4(fp)
 2000978:	10802f17 	ldw	r2,188(r2)
 200097c:	10803fcc 	andi	r2,r2,255
 2000980:	10800618 	cmpnei	r2,r2,24
 2000984:	10000a1e 	bne	r2,zero,20009b0 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2000988:	e0ffff17 	ldw	r3,-4(fp)
 200098c:	00804034 	movhi	r2,256
 2000990:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 2000994:	e0ffff17 	ldw	r3,-4(fp)
 2000998:	00801004 	movi	r2,64
 200099c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 20009a0:	e0ffff17 	ldw	r3,-4(fp)
 20009a4:	00800134 	movhi	r2,4
 20009a8:	18801015 	stw	r2,64(r3)
 20009ac:	00001406 	br	2000a00 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 20009b0:	e0bfff17 	ldw	r2,-4(fp)
 20009b4:	10802f17 	ldw	r2,188(r2)
 20009b8:	10803fcc 	andi	r2,r2,255
 20009bc:	10800658 	cmpnei	r2,r2,25
 20009c0:	10000d1e 	bne	r2,zero,20009f8 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 20009c4:	e0ffff17 	ldw	r3,-4(fp)
 20009c8:	00808034 	movhi	r2,512
 20009cc:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 20009d0:	e0ffff17 	ldw	r3,-4(fp)
 20009d4:	00808004 	movi	r2,512
 20009d8:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20009dc:	e0ffff17 	ldw	r3,-4(fp)
 20009e0:	00800074 	movhi	r2,1
 20009e4:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 20009e8:	e0ffff17 	ldw	r3,-4(fp)
 20009ec:	00800044 	movi	r2,1
 20009f0:	18803115 	stw	r2,196(r3)
 20009f4:	00000206 	br	2000a00 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 20009f8:	00bffb44 	movi	r2,-19
 20009fc:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2000a00:	e0bfff17 	ldw	r2,-4(fp)
 2000a04:	10800e17 	ldw	r2,56(r2)
 2000a08:	1007883a 	mov	r3,r2
 2000a0c:	e0bfff17 	ldw	r2,-4(fp)
 2000a10:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 2000a14:	e0ffff17 	ldw	r3,-4(fp)
 2000a18:	00800044 	movi	r2,1
 2000a1c:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 2000a20:	e0bfff17 	ldw	r2,-4(fp)
 2000a24:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2000a28:	e0ffff17 	ldw	r3,-4(fp)
 2000a2c:	00804004 	movi	r2,256
 2000a30:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2000a34:	e0bffe17 	ldw	r2,-8(fp)
}
 2000a38:	e037883a 	mov	sp,fp
 2000a3c:	dfc00117 	ldw	ra,4(sp)
 2000a40:	df000017 	ldw	fp,0(sp)
 2000a44:	dec00204 	addi	sp,sp,8
 2000a48:	f800283a 	ret

02000a4c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2000a4c:	deffeb04 	addi	sp,sp,-84
 2000a50:	dfc01415 	stw	ra,80(sp)
 2000a54:	df001315 	stw	fp,76(sp)
 2000a58:	df001304 	addi	fp,sp,76
 2000a5c:	e13ff915 	stw	r4,-28(fp)
 2000a60:	e17ffa15 	stw	r5,-24(fp)
 2000a64:	e1bffb15 	stw	r6,-20(fp)
 2000a68:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2000a6c:	00800804 	movi	r2,32
 2000a70:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 2000a74:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 2000a78:	00002c06 	br	2000b2c <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2000a7c:	e0bff017 	ldw	r2,-64(fp)
 2000a80:	e0bfff15 	stw	r2,-4(fp)
 2000a84:	e0fffc17 	ldw	r3,-16(fp)
 2000a88:	e0fffe15 	stw	r3,-8(fp)
 2000a8c:	e0bfff17 	ldw	r2,-4(fp)
 2000a90:	e0fffe17 	ldw	r3,-8(fp)
 2000a94:	10c0022e 	bgeu	r2,r3,2000aa0 <alt_epcs_flash_memcmp+0x54>
 2000a98:	e0bfff17 	ldw	r2,-4(fp)
 2000a9c:	e0bffe15 	stw	r2,-8(fp)
 2000aa0:	e0fffe17 	ldw	r3,-8(fp)
 2000aa4:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2000aa8:	e0fffb17 	ldw	r3,-20(fp)
 2000aac:	e0bfef17 	ldw	r2,-68(fp)
 2000ab0:	188b883a 	add	r5,r3,r2
 2000ab4:	e1bff104 	addi	r6,fp,-60
 2000ab8:	e13ff917 	ldw	r4,-28(fp)
 2000abc:	e1ffee17 	ldw	r7,-72(fp)
 2000ac0:	20010840 	call	2001084 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2000ac4:	1004403a 	cmpge	r2,r2,zero
 2000ac8:	1000031e 	bne	r2,zero,2000ad8 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2000acc:	00bfffc4 	movi	r2,-1
 2000ad0:	e0bffd15 	stw	r2,-12(fp)
 2000ad4:	00001906 	br	2000b3c <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2000ad8:	e0fffa17 	ldw	r3,-24(fp)
 2000adc:	e0bfef17 	ldw	r2,-68(fp)
 2000ae0:	1889883a 	add	r4,r3,r2
 2000ae4:	e1bfee17 	ldw	r6,-72(fp)
 2000ae8:	e17ff104 	addi	r5,fp,-60
 2000aec:	20034840 	call	2003484 <memcmp>
 2000af0:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 2000af4:	e0bfed17 	ldw	r2,-76(fp)
 2000af8:	1005003a 	cmpeq	r2,r2,zero
 2000afc:	1000031e 	bne	r2,zero,2000b0c <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 2000b00:	e0ffed17 	ldw	r3,-76(fp)
 2000b04:	e0fffd15 	stw	r3,-12(fp)
 2000b08:	00000c06 	br	2000b3c <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 2000b0c:	e0ffee17 	ldw	r3,-72(fp)
 2000b10:	e0bffc17 	ldw	r2,-16(fp)
 2000b14:	10c5c83a 	sub	r2,r2,r3
 2000b18:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 2000b1c:	e0ffef17 	ldw	r3,-68(fp)
 2000b20:	e0bfee17 	ldw	r2,-72(fp)
 2000b24:	1885883a 	add	r2,r3,r2
 2000b28:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2000b2c:	e0bffc17 	ldw	r2,-16(fp)
 2000b30:	1004c03a 	cmpne	r2,r2,zero
 2000b34:	103fd11e 	bne	r2,zero,2000a7c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2000b38:	e03ffd15 	stw	zero,-12(fp)
 2000b3c:	e0bffd17 	ldw	r2,-12(fp)
}
 2000b40:	e037883a 	mov	sp,fp
 2000b44:	dfc00117 	ldw	ra,4(sp)
 2000b48:	df000017 	ldw	fp,0(sp)
 2000b4c:	dec00204 	addi	sp,sp,8
 2000b50:	f800283a 	ret

02000b54 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2000b54:	defff204 	addi	sp,sp,-56
 2000b58:	dfc00d15 	stw	ra,52(sp)
 2000b5c:	df000c15 	stw	fp,48(sp)
 2000b60:	df000c04 	addi	fp,sp,48
 2000b64:	e13ffa15 	stw	r4,-24(fp)
 2000b68:	e17ffb15 	stw	r5,-20(fp)
 2000b6c:	e1bffc15 	stw	r6,-16(fp)
 2000b70:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 2000b74:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2000b78:	e03ff815 	stw	zero,-32(fp)
 2000b7c:	00008b06 	br	2000dac <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2000b80:	e0bff817 	ldw	r2,-32(fp)
 2000b84:	e0fffa17 	ldw	r3,-24(fp)
 2000b88:	1004913a 	slli	r2,r2,4
 2000b8c:	10c5883a 	add	r2,r2,r3
 2000b90:	10800d04 	addi	r2,r2,52
 2000b94:	10c00017 	ldw	r3,0(r2)
 2000b98:	e0bffb17 	ldw	r2,-20(fp)
 2000b9c:	10c08016 	blt	r2,r3,2000da0 <alt_epcs_flash_write+0x24c>
 2000ba0:	e0bff817 	ldw	r2,-32(fp)
 2000ba4:	e0fffa17 	ldw	r3,-24(fp)
 2000ba8:	1004913a 	slli	r2,r2,4
 2000bac:	10c5883a 	add	r2,r2,r3
 2000bb0:	10800d04 	addi	r2,r2,52
 2000bb4:	11000017 	ldw	r4,0(r2)
 2000bb8:	e0bff817 	ldw	r2,-32(fp)
 2000bbc:	e0fffa17 	ldw	r3,-24(fp)
 2000bc0:	1004913a 	slli	r2,r2,4
 2000bc4:	10c5883a 	add	r2,r2,r3
 2000bc8:	10800e04 	addi	r2,r2,56
 2000bcc:	10800017 	ldw	r2,0(r2)
 2000bd0:	2087883a 	add	r3,r4,r2
 2000bd4:	e0bffb17 	ldw	r2,-20(fp)
 2000bd8:	10c0710e 	bge	r2,r3,2000da0 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2000bdc:	e0bff817 	ldw	r2,-32(fp)
 2000be0:	e0fffa17 	ldw	r3,-24(fp)
 2000be4:	1004913a 	slli	r2,r2,4
 2000be8:	10c5883a 	add	r2,r2,r3
 2000bec:	10800d04 	addi	r2,r2,52
 2000bf0:	10800017 	ldw	r2,0(r2)
 2000bf4:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2000bf8:	e03ff715 	stw	zero,-36(fp)
 2000bfc:	00006006 	br	2000d80 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 2000c00:	e0fffb17 	ldw	r3,-20(fp)
 2000c04:	e0bff517 	ldw	r2,-44(fp)
 2000c08:	18805116 	blt	r3,r2,2000d50 <alt_epcs_flash_write+0x1fc>
 2000c0c:	e0bff817 	ldw	r2,-32(fp)
 2000c10:	e0fffa17 	ldw	r3,-24(fp)
 2000c14:	1004913a 	slli	r2,r2,4
 2000c18:	10c5883a 	add	r2,r2,r3
 2000c1c:	10801004 	addi	r2,r2,64
 2000c20:	10c00017 	ldw	r3,0(r2)
 2000c24:	e0bff517 	ldw	r2,-44(fp)
 2000c28:	1887883a 	add	r3,r3,r2
 2000c2c:	e0bffb17 	ldw	r2,-20(fp)
 2000c30:	10c0470e 	bge	r2,r3,2000d50 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2000c34:	e0bff817 	ldw	r2,-32(fp)
 2000c38:	e0fffa17 	ldw	r3,-24(fp)
 2000c3c:	1004913a 	slli	r2,r2,4
 2000c40:	10c5883a 	add	r2,r2,r3
 2000c44:	10801004 	addi	r2,r2,64
 2000c48:	10c00017 	ldw	r3,0(r2)
 2000c4c:	e0bff517 	ldw	r2,-44(fp)
 2000c50:	1887883a 	add	r3,r3,r2
 2000c54:	e0bffb17 	ldw	r2,-20(fp)
 2000c58:	1885c83a 	sub	r2,r3,r2
 2000c5c:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2000c60:	e0bff617 	ldw	r2,-40(fp)
 2000c64:	e0bfff15 	stw	r2,-4(fp)
 2000c68:	e0fffd17 	ldw	r3,-12(fp)
 2000c6c:	e0fffe15 	stw	r3,-8(fp)
 2000c70:	e0bfff17 	ldw	r2,-4(fp)
 2000c74:	e0fffe17 	ldw	r3,-8(fp)
 2000c78:	10c0020e 	bge	r2,r3,2000c84 <alt_epcs_flash_write+0x130>
 2000c7c:	e0bfff17 	ldw	r2,-4(fp)
 2000c80:	e0bffe15 	stw	r2,-8(fp)
 2000c84:	e0fffe17 	ldw	r3,-8(fp)
 2000c88:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2000c8c:	e1fff617 	ldw	r7,-40(fp)
 2000c90:	e13ffa17 	ldw	r4,-24(fp)
 2000c94:	e17ffc17 	ldw	r5,-16(fp)
 2000c98:	e1bffb17 	ldw	r6,-20(fp)
 2000c9c:	2000a4c0 	call	2000a4c <alt_epcs_flash_memcmp>
 2000ca0:	1005003a 	cmpeq	r2,r2,zero
 2000ca4:	1000131e 	bne	r2,zero,2000cf4 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2000ca8:	e0bffa17 	ldw	r2,-24(fp)
 2000cac:	10800817 	ldw	r2,32(r2)
 2000cb0:	e13ffa17 	ldw	r4,-24(fp)
 2000cb4:	e17ff517 	ldw	r5,-44(fp)
 2000cb8:	103ee83a 	callr	r2
 2000cbc:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 2000cc0:	e0bff917 	ldw	r2,-28(fp)
 2000cc4:	1004c03a 	cmpne	r2,r2,zero
 2000cc8:	10000a1e 	bne	r2,zero,2000cf4 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 2000ccc:	e0bffa17 	ldw	r2,-24(fp)
 2000cd0:	10c00917 	ldw	r3,36(r2)
 2000cd4:	e0bff617 	ldw	r2,-40(fp)
 2000cd8:	d8800015 	stw	r2,0(sp)
 2000cdc:	e13ffa17 	ldw	r4,-24(fp)
 2000ce0:	e17ff517 	ldw	r5,-44(fp)
 2000ce4:	e1bffb17 	ldw	r6,-20(fp)
 2000ce8:	e1fffc17 	ldw	r7,-16(fp)
 2000cec:	183ee83a 	callr	r3
 2000cf0:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2000cf4:	e0fffd17 	ldw	r3,-12(fp)
 2000cf8:	e0bff617 	ldw	r2,-40(fp)
 2000cfc:	18802f26 	beq	r3,r2,2000dbc <alt_epcs_flash_write+0x268>
 2000d00:	e0bff917 	ldw	r2,-28(fp)
 2000d04:	1004c03a 	cmpne	r2,r2,zero
 2000d08:	10002c1e 	bne	r2,zero,2000dbc <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 2000d0c:	e0fffd17 	ldw	r3,-12(fp)
 2000d10:	e0bff617 	ldw	r2,-40(fp)
 2000d14:	1885c83a 	sub	r2,r3,r2
 2000d18:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2000d1c:	e0bff817 	ldw	r2,-32(fp)
 2000d20:	e0fffa17 	ldw	r3,-24(fp)
 2000d24:	1004913a 	slli	r2,r2,4
 2000d28:	10c5883a 	add	r2,r2,r3
 2000d2c:	10801004 	addi	r2,r2,64
 2000d30:	10c00017 	ldw	r3,0(r2)
 2000d34:	e0bff517 	ldw	r2,-44(fp)
 2000d38:	1885883a 	add	r2,r3,r2
 2000d3c:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2000d40:	e0fffc17 	ldw	r3,-16(fp)
 2000d44:	e0bff617 	ldw	r2,-40(fp)
 2000d48:	1885883a 	add	r2,r3,r2
 2000d4c:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2000d50:	e0bff817 	ldw	r2,-32(fp)
 2000d54:	e0fffa17 	ldw	r3,-24(fp)
 2000d58:	1004913a 	slli	r2,r2,4
 2000d5c:	10c5883a 	add	r2,r2,r3
 2000d60:	10801004 	addi	r2,r2,64
 2000d64:	10c00017 	ldw	r3,0(r2)
 2000d68:	e0bff517 	ldw	r2,-44(fp)
 2000d6c:	10c5883a 	add	r2,r2,r3
 2000d70:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2000d74:	e0bff717 	ldw	r2,-36(fp)
 2000d78:	10800044 	addi	r2,r2,1
 2000d7c:	e0bff715 	stw	r2,-36(fp)
 2000d80:	e0bff817 	ldw	r2,-32(fp)
 2000d84:	e0fffa17 	ldw	r3,-24(fp)
 2000d88:	1004913a 	slli	r2,r2,4
 2000d8c:	10c5883a 	add	r2,r2,r3
 2000d90:	10800f04 	addi	r2,r2,60
 2000d94:	10c00017 	ldw	r3,0(r2)
 2000d98:	e0bff717 	ldw	r2,-36(fp)
 2000d9c:	10ff9816 	blt	r2,r3,2000c00 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2000da0:	e0bff817 	ldw	r2,-32(fp)
 2000da4:	10800044 	addi	r2,r2,1
 2000da8:	e0bff815 	stw	r2,-32(fp)
 2000dac:	e0bffa17 	ldw	r2,-24(fp)
 2000db0:	10c00c17 	ldw	r3,48(r2)
 2000db4:	e0bff817 	ldw	r2,-32(fp)
 2000db8:	10ff7116 	blt	r2,r3,2000b80 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2000dbc:	e0bff917 	ldw	r2,-28(fp)
}
 2000dc0:	e037883a 	mov	sp,fp
 2000dc4:	dfc00117 	ldw	ra,4(sp)
 2000dc8:	df000017 	ldw	fp,0(sp)
 2000dcc:	dec00204 	addi	sp,sp,8
 2000dd0:	f800283a 	ret

02000dd4 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2000dd4:	defffa04 	addi	sp,sp,-24
 2000dd8:	df000515 	stw	fp,20(sp)
 2000ddc:	df000504 	addi	fp,sp,20
 2000de0:	e13ffd15 	stw	r4,-12(fp)
 2000de4:	e17ffe15 	stw	r5,-8(fp)
 2000de8:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2000dec:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2000df0:	e0bffd17 	ldw	r2,-12(fp)
 2000df4:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 2000df8:	e0bffb17 	ldw	r2,-20(fp)
 2000dfc:	10c00c17 	ldw	r3,48(r2)
 2000e00:	e0bfff17 	ldw	r2,-4(fp)
 2000e04:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2000e08:	e0bffb17 	ldw	r2,-20(fp)
 2000e0c:	10800c17 	ldw	r2,48(r2)
 2000e10:	1004c03a 	cmpne	r2,r2,zero
 2000e14:	1000031e 	bne	r2,zero,2000e24 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 2000e18:	00bffec4 	movi	r2,-5
 2000e1c:	e0bffc15 	stw	r2,-16(fp)
 2000e20:	00000b06 	br	2000e50 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2000e24:	e0bffb17 	ldw	r2,-20(fp)
 2000e28:	10800c17 	ldw	r2,48(r2)
 2000e2c:	10800250 	cmplti	r2,r2,9
 2000e30:	1000031e 	bne	r2,zero,2000e40 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 2000e34:	00bffd04 	movi	r2,-12
 2000e38:	e0bffc15 	stw	r2,-16(fp)
 2000e3c:	00000406 	br	2000e50 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 2000e40:	e0bffb17 	ldw	r2,-20(fp)
 2000e44:	10c00d04 	addi	r3,r2,52
 2000e48:	e0bffe17 	ldw	r2,-8(fp)
 2000e4c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2000e50:	e0bffc17 	ldw	r2,-16(fp)
}
 2000e54:	e037883a 	mov	sp,fp
 2000e58:	df000017 	ldw	fp,0(sp)
 2000e5c:	dec00104 	addi	sp,sp,4
 2000e60:	f800283a 	ret

02000e64 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2000e64:	defffa04 	addi	sp,sp,-24
 2000e68:	dfc00515 	stw	ra,20(sp)
 2000e6c:	df000415 	stw	fp,16(sp)
 2000e70:	df000404 	addi	fp,sp,16
 2000e74:	e13ffe15 	stw	r4,-8(fp)
 2000e78:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2000e7c:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000e80:	e0bffe17 	ldw	r2,-8(fp)
 2000e84:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2000e88:	e13ffe17 	ldw	r4,-8(fp)
 2000e8c:	e17fff17 	ldw	r5,-4(fp)
 2000e90:	2000ed40 	call	2000ed4 <alt_epcs_test_address>
 2000e94:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 2000e98:	e0bffd17 	ldw	r2,-12(fp)
 2000e9c:	1004803a 	cmplt	r2,r2,zero
 2000ea0:	1000061e 	bne	r2,zero,2000ebc <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2000ea4:	e0bffc17 	ldw	r2,-16(fp)
 2000ea8:	11002d17 	ldw	r4,180(r2)
 2000eac:	e17fff17 	ldw	r5,-4(fp)
 2000eb0:	e0bffc17 	ldw	r2,-16(fp)
 2000eb4:	11803117 	ldw	r6,196(r2)
 2000eb8:	2001c280 	call	2001c28 <epcs_sector_erase>
  }
  return ret_code;
 2000ebc:	e0bffd17 	ldw	r2,-12(fp)
}
 2000ec0:	e037883a 	mov	sp,fp
 2000ec4:	dfc00117 	ldw	ra,4(sp)
 2000ec8:	df000017 	ldw	fp,0(sp)
 2000ecc:	dec00204 	addi	sp,sp,8
 2000ed0:	f800283a 	ret

02000ed4 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2000ed4:	defff904 	addi	sp,sp,-28
 2000ed8:	df000615 	stw	fp,24(sp)
 2000edc:	df000604 	addi	fp,sp,24
 2000ee0:	e13ffe15 	stw	r4,-8(fp)
 2000ee4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2000ee8:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000eec:	e0bffe17 	ldw	r2,-8(fp)
 2000ef0:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2000ef4:	e0bffc17 	ldw	r2,-16(fp)
 2000ef8:	10800c17 	ldw	r2,48(r2)
 2000efc:	10bfffc4 	addi	r2,r2,-1
 2000f00:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2000f04:	e0bffb17 	ldw	r2,-20(fp)
 2000f08:	e0fffc17 	ldw	r3,-16(fp)
 2000f0c:	1004913a 	slli	r2,r2,4
 2000f10:	10c5883a 	add	r2,r2,r3
 2000f14:	10800d04 	addi	r2,r2,52
 2000f18:	11000017 	ldw	r4,0(r2)
 2000f1c:	e0bffb17 	ldw	r2,-20(fp)
 2000f20:	e0fffc17 	ldw	r3,-16(fp)
 2000f24:	1004913a 	slli	r2,r2,4
 2000f28:	10c5883a 	add	r2,r2,r3
 2000f2c:	10800e04 	addi	r2,r2,56
 2000f30:	10800017 	ldw	r2,0(r2)
 2000f34:	2085883a 	add	r2,r4,r2
 2000f38:	10bfffc4 	addi	r2,r2,-1
 2000f3c:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 2000f40:	e0ffff17 	ldw	r3,-4(fp)
 2000f44:	e0bffa17 	ldw	r2,-24(fp)
 2000f48:	10c0022e 	bgeu	r2,r3,2000f54 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2000f4c:	00bffec4 	movi	r2,-5
 2000f50:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 2000f54:	e0bffd17 	ldw	r2,-12(fp)
}
 2000f58:	e037883a 	mov	sp,fp
 2000f5c:	df000017 	ldw	fp,0(sp)
 2000f60:	dec00104 	addi	sp,sp,4
 2000f64:	f800283a 	ret

02000f68 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2000f68:	defff204 	addi	sp,sp,-56
 2000f6c:	dfc00d15 	stw	ra,52(sp)
 2000f70:	df000c15 	stw	fp,48(sp)
 2000f74:	df000c04 	addi	fp,sp,48
 2000f78:	e13ffa15 	stw	r4,-24(fp)
 2000f7c:	e17ffb15 	stw	r5,-20(fp)
 2000f80:	e1bffc15 	stw	r6,-16(fp)
 2000f84:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000f88:	e0bffa17 	ldw	r2,-24(fp)
 2000f8c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2000f90:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2000f94:	e13ffa17 	ldw	r4,-24(fp)
 2000f98:	e17ffc17 	ldw	r5,-16(fp)
 2000f9c:	2000ed40 	call	2000ed4 <alt_epcs_test_address>
 2000fa0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2000fa4:	e0bff917 	ldw	r2,-28(fp)
 2000fa8:	1004803a 	cmplt	r2,r2,zero
 2000fac:	10002f1e 	bne	r2,zero,200106c <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2000fb0:	00002b06 	br	2001060 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2000fb4:	e0bff817 	ldw	r2,-32(fp)
 2000fb8:	10c03017 	ldw	r3,192(r2)
 2000fbc:	e0bffc17 	ldw	r2,-16(fp)
 2000fc0:	1887883a 	add	r3,r3,r2
 2000fc4:	e0bff817 	ldw	r2,-32(fp)
 2000fc8:	10803017 	ldw	r2,192(r2)
 2000fcc:	0085c83a 	sub	r2,zero,r2
 2000fd0:	1884703a 	and	r2,r3,r2
 2000fd4:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2000fd8:	e0fff517 	ldw	r3,-44(fp)
 2000fdc:	e0bffc17 	ldw	r2,-16(fp)
 2000fe0:	1885c83a 	sub	r2,r3,r2
 2000fe4:	e0c00217 	ldw	r3,8(fp)
 2000fe8:	e0ffff15 	stw	r3,-4(fp)
 2000fec:	e0bffe15 	stw	r2,-8(fp)
 2000ff0:	e0bfff17 	ldw	r2,-4(fp)
 2000ff4:	e0fffe17 	ldw	r3,-8(fp)
 2000ff8:	10c0020e 	bge	r2,r3,2001004 <alt_epcs_flash_write_block+0x9c>
 2000ffc:	e0bfff17 	ldw	r2,-4(fp)
 2001000:	e0bffe15 	stw	r2,-8(fp)
 2001004:	e0fffe17 	ldw	r3,-8(fp)
 2001008:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200100c:	e0bff817 	ldw	r2,-32(fp)
 2001010:	11002d17 	ldw	r4,180(r2)
 2001014:	e0fffd17 	ldw	r3,-12(fp)
 2001018:	e0bff717 	ldw	r2,-36(fp)
 200101c:	188d883a 	add	r6,r3,r2
 2001020:	e0bff817 	ldw	r2,-32(fp)
 2001024:	10803117 	ldw	r2,196(r2)
 2001028:	d8800015 	stw	r2,0(sp)
 200102c:	e17ffc17 	ldw	r5,-16(fp)
 2001030:	e1fff617 	ldw	r7,-40(fp)
 2001034:	2001f900 	call	2001f90 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2001038:	e0c00217 	ldw	r3,8(fp)
 200103c:	e0bff617 	ldw	r2,-40(fp)
 2001040:	1885c83a 	sub	r2,r3,r2
 2001044:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2001048:	e0fff717 	ldw	r3,-36(fp)
 200104c:	e0bff617 	ldw	r2,-40(fp)
 2001050:	1885883a 	add	r2,r3,r2
 2001054:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2001058:	e0bff517 	ldw	r2,-44(fp)
 200105c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2001060:	e0800217 	ldw	r2,8(fp)
 2001064:	1004c03a 	cmpne	r2,r2,zero
 2001068:	103fd21e 	bne	r2,zero,2000fb4 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 200106c:	e0bff917 	ldw	r2,-28(fp)
}
 2001070:	e037883a 	mov	sp,fp
 2001074:	dfc00117 	ldw	ra,4(sp)
 2001078:	df000017 	ldw	fp,0(sp)
 200107c:	dec00204 	addi	sp,sp,8
 2001080:	f800283a 	ret

02001084 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2001084:	defff704 	addi	sp,sp,-36
 2001088:	dfc00815 	stw	ra,32(sp)
 200108c:	df000715 	stw	fp,28(sp)
 2001090:	df000704 	addi	fp,sp,28
 2001094:	e13ffc15 	stw	r4,-16(fp)
 2001098:	e17ffd15 	stw	r5,-12(fp)
 200109c:	e1bffe15 	stw	r6,-8(fp)
 20010a0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 20010a4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20010a8:	e0bffc17 	ldw	r2,-16(fp)
 20010ac:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 20010b0:	e13ffc17 	ldw	r4,-16(fp)
 20010b4:	e17ffd17 	ldw	r5,-12(fp)
 20010b8:	2000ed40 	call	2000ed4 <alt_epcs_test_address>
 20010bc:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 20010c0:	e0bffb17 	ldw	r2,-20(fp)
 20010c4:	1004803a 	cmplt	r2,r2,zero
 20010c8:	10000e1e 	bne	r2,zero,2001104 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 20010cc:	e0bffa17 	ldw	r2,-24(fp)
 20010d0:	11002d17 	ldw	r4,180(r2)
 20010d4:	e1bffe17 	ldw	r6,-8(fp)
 20010d8:	e0bffa17 	ldw	r2,-24(fp)
 20010dc:	10803117 	ldw	r2,196(r2)
 20010e0:	d8800015 	stw	r2,0(sp)
 20010e4:	e17ffd17 	ldw	r5,-12(fp)
 20010e8:	e1ffff17 	ldw	r7,-4(fp)
 20010ec:	2001d900 	call	2001d90 <epcs_read_buffer>
 20010f0:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 20010f4:	e0fffb17 	ldw	r3,-20(fp)
 20010f8:	e0bfff17 	ldw	r2,-4(fp)
 20010fc:	1880011e 	bne	r3,r2,2001104 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2001100:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 2001104:	e0bffb17 	ldw	r2,-20(fp)
}
 2001108:	e037883a 	mov	sp,fp
 200110c:	dfc00117 	ldw	ra,4(sp)
 2001110:	df000017 	ldw	fp,0(sp)
 2001114:	dec00204 	addi	sp,sp,8
 2001118:	f800283a 	ret

0200111c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200111c:	defffa04 	addi	sp,sp,-24
 2001120:	dfc00515 	stw	ra,20(sp)
 2001124:	df000415 	stw	fp,16(sp)
 2001128:	df000404 	addi	fp,sp,16
 200112c:	e13ffd15 	stw	r4,-12(fp)
 2001130:	e17ffe15 	stw	r5,-8(fp)
 2001134:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2001138:	e0bffd17 	ldw	r2,-12(fp)
 200113c:	10800017 	ldw	r2,0(r2)
 2001140:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2001144:	e0bffc17 	ldw	r2,-16(fp)
 2001148:	11000a04 	addi	r4,r2,40
 200114c:	e0bffd17 	ldw	r2,-12(fp)
 2001150:	11c00217 	ldw	r7,8(r2)
 2001154:	e17ffe17 	ldw	r5,-8(fp)
 2001158:	e1bfff17 	ldw	r6,-4(fp)
 200115c:	20017640 	call	2001764 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2001160:	e037883a 	mov	sp,fp
 2001164:	dfc00117 	ldw	ra,4(sp)
 2001168:	df000017 	ldw	fp,0(sp)
 200116c:	dec00204 	addi	sp,sp,8
 2001170:	f800283a 	ret

02001174 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2001174:	defffa04 	addi	sp,sp,-24
 2001178:	dfc00515 	stw	ra,20(sp)
 200117c:	df000415 	stw	fp,16(sp)
 2001180:	df000404 	addi	fp,sp,16
 2001184:	e13ffd15 	stw	r4,-12(fp)
 2001188:	e17ffe15 	stw	r5,-8(fp)
 200118c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2001190:	e0bffd17 	ldw	r2,-12(fp)
 2001194:	10800017 	ldw	r2,0(r2)
 2001198:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200119c:	e0bffc17 	ldw	r2,-16(fp)
 20011a0:	11000a04 	addi	r4,r2,40
 20011a4:	e0bffd17 	ldw	r2,-12(fp)
 20011a8:	11c00217 	ldw	r7,8(r2)
 20011ac:	e17ffe17 	ldw	r5,-8(fp)
 20011b0:	e1bfff17 	ldw	r6,-4(fp)
 20011b4:	20019880 	call	2001988 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20011b8:	e037883a 	mov	sp,fp
 20011bc:	dfc00117 	ldw	ra,4(sp)
 20011c0:	df000017 	ldw	fp,0(sp)
 20011c4:	dec00204 	addi	sp,sp,8
 20011c8:	f800283a 	ret

020011cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20011cc:	defffc04 	addi	sp,sp,-16
 20011d0:	dfc00315 	stw	ra,12(sp)
 20011d4:	df000215 	stw	fp,8(sp)
 20011d8:	df000204 	addi	fp,sp,8
 20011dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20011e0:	e0bfff17 	ldw	r2,-4(fp)
 20011e4:	10800017 	ldw	r2,0(r2)
 20011e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20011ec:	e0bffe17 	ldw	r2,-8(fp)
 20011f0:	11000a04 	addi	r4,r2,40
 20011f4:	e0bfff17 	ldw	r2,-4(fp)
 20011f8:	11400217 	ldw	r5,8(r2)
 20011fc:	20015fc0 	call	20015fc <altera_avalon_jtag_uart_close>
}
 2001200:	e037883a 	mov	sp,fp
 2001204:	dfc00117 	ldw	ra,4(sp)
 2001208:	df000017 	ldw	fp,0(sp)
 200120c:	dec00204 	addi	sp,sp,8
 2001210:	f800283a 	ret

02001214 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2001214:	defffa04 	addi	sp,sp,-24
 2001218:	dfc00515 	stw	ra,20(sp)
 200121c:	df000415 	stw	fp,16(sp)
 2001220:	df000404 	addi	fp,sp,16
 2001224:	e13ffd15 	stw	r4,-12(fp)
 2001228:	e17ffe15 	stw	r5,-8(fp)
 200122c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2001230:	e0bffd17 	ldw	r2,-12(fp)
 2001234:	10800017 	ldw	r2,0(r2)
 2001238:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200123c:	e0bffc17 	ldw	r2,-16(fp)
 2001240:	11000a04 	addi	r4,r2,40
 2001244:	e17ffe17 	ldw	r5,-8(fp)
 2001248:	e1bfff17 	ldw	r6,-4(fp)
 200124c:	20016700 	call	2001670 <altera_avalon_jtag_uart_ioctl>
}
 2001250:	e037883a 	mov	sp,fp
 2001254:	dfc00117 	ldw	ra,4(sp)
 2001258:	df000017 	ldw	fp,0(sp)
 200125c:	dec00204 	addi	sp,sp,8
 2001260:	f800283a 	ret

02001264 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2001264:	defffa04 	addi	sp,sp,-24
 2001268:	dfc00515 	stw	ra,20(sp)
 200126c:	df000415 	stw	fp,16(sp)
 2001270:	df000404 	addi	fp,sp,16
 2001274:	e13ffd15 	stw	r4,-12(fp)
 2001278:	e17ffe15 	stw	r5,-8(fp)
 200127c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2001280:	e0fffd17 	ldw	r3,-12(fp)
 2001284:	00800044 	movi	r2,1
 2001288:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200128c:	e0bffd17 	ldw	r2,-12(fp)
 2001290:	10800017 	ldw	r2,0(r2)
 2001294:	11000104 	addi	r4,r2,4
 2001298:	e0bffd17 	ldw	r2,-12(fp)
 200129c:	10800817 	ldw	r2,32(r2)
 20012a0:	1007883a 	mov	r3,r2
 20012a4:	2005883a 	mov	r2,r4
 20012a8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20012ac:	e13ffe17 	ldw	r4,-8(fp)
 20012b0:	e17fff17 	ldw	r5,-4(fp)
 20012b4:	d8000015 	stw	zero,0(sp)
 20012b8:	01808034 	movhi	r6,512
 20012bc:	3184c904 	addi	r6,r6,4900
 20012c0:	e1fffd17 	ldw	r7,-12(fp)
 20012c4:	20003140 	call	2000314 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20012c8:	e0bffd17 	ldw	r2,-12(fp)
 20012cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 20012d0:	e0bffd17 	ldw	r2,-12(fp)
 20012d4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20012d8:	00808034 	movhi	r2,512
 20012dc:	10947f04 	addi	r2,r2,20988
 20012e0:	10800017 	ldw	r2,0(r2)
 20012e4:	100b883a 	mov	r5,r2
 20012e8:	01808034 	movhi	r6,512
 20012ec:	31855304 	addi	r6,r6,5452
 20012f0:	e1fffd17 	ldw	r7,-12(fp)
 20012f4:	200229c0 	call	200229c <alt_alarm_start>
 20012f8:	1004403a 	cmpge	r2,r2,zero
 20012fc:	1000041e 	bne	r2,zero,2001310 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2001300:	e0fffd17 	ldw	r3,-12(fp)
 2001304:	00a00034 	movhi	r2,32768
 2001308:	10bfffc4 	addi	r2,r2,-1
 200130c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2001310:	e037883a 	mov	sp,fp
 2001314:	dfc00117 	ldw	ra,4(sp)
 2001318:	df000017 	ldw	fp,0(sp)
 200131c:	dec00204 	addi	sp,sp,8
 2001320:	f800283a 	ret

02001324 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2001324:	defff804 	addi	sp,sp,-32
 2001328:	df000715 	stw	fp,28(sp)
 200132c:	df000704 	addi	fp,sp,28
 2001330:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2001334:	e0bfff17 	ldw	r2,-4(fp)
 2001338:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 200133c:	e0bffe17 	ldw	r2,-8(fp)
 2001340:	10800017 	ldw	r2,0(r2)
 2001344:	e0bffd15 	stw	r2,-12(fp)
 2001348:	00000006 	br	200134c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200134c:	e0bffd17 	ldw	r2,-12(fp)
 2001350:	10800104 	addi	r2,r2,4
 2001354:	10800037 	ldwio	r2,0(r2)
 2001358:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200135c:	e0bffc17 	ldw	r2,-16(fp)
 2001360:	1080c00c 	andi	r2,r2,768
 2001364:	1005003a 	cmpeq	r2,r2,zero
 2001368:	1000741e 	bne	r2,zero,200153c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200136c:	e0bffc17 	ldw	r2,-16(fp)
 2001370:	1080400c 	andi	r2,r2,256
 2001374:	1005003a 	cmpeq	r2,r2,zero
 2001378:	1000351e 	bne	r2,zero,2001450 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200137c:	00800074 	movhi	r2,1
 2001380:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001384:	e0bffe17 	ldw	r2,-8(fp)
 2001388:	10800a17 	ldw	r2,40(r2)
 200138c:	10800044 	addi	r2,r2,1
 2001390:	1081ffcc 	andi	r2,r2,2047
 2001394:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2001398:	e0bffe17 	ldw	r2,-8(fp)
 200139c:	10c00b17 	ldw	r3,44(r2)
 20013a0:	e0bffa17 	ldw	r2,-24(fp)
 20013a4:	18801626 	beq	r3,r2,2001400 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20013a8:	e0bffd17 	ldw	r2,-12(fp)
 20013ac:	10800037 	ldwio	r2,0(r2)
 20013b0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 20013b4:	e0bffb17 	ldw	r2,-20(fp)
 20013b8:	10a0000c 	andi	r2,r2,32768
 20013bc:	1005003a 	cmpeq	r2,r2,zero
 20013c0:	10000f1e 	bne	r2,zero,2001400 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20013c4:	e0bffe17 	ldw	r2,-8(fp)
 20013c8:	10c00a17 	ldw	r3,40(r2)
 20013cc:	e0bffb17 	ldw	r2,-20(fp)
 20013d0:	1009883a 	mov	r4,r2
 20013d4:	e0bffe17 	ldw	r2,-8(fp)
 20013d8:	1885883a 	add	r2,r3,r2
 20013dc:	10800e04 	addi	r2,r2,56
 20013e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20013e4:	e0bffe17 	ldw	r2,-8(fp)
 20013e8:	10800a17 	ldw	r2,40(r2)
 20013ec:	10800044 	addi	r2,r2,1
 20013f0:	10c1ffcc 	andi	r3,r2,2047
 20013f4:	e0bffe17 	ldw	r2,-8(fp)
 20013f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 20013fc:	003fe106 	br	2001384 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2001400:	e0bffb17 	ldw	r2,-20(fp)
 2001404:	10bfffec 	andhi	r2,r2,65535
 2001408:	1005003a 	cmpeq	r2,r2,zero
 200140c:	1000101e 	bne	r2,zero,2001450 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2001410:	e0bffe17 	ldw	r2,-8(fp)
 2001414:	10c00817 	ldw	r3,32(r2)
 2001418:	00bfff84 	movi	r2,-2
 200141c:	1886703a 	and	r3,r3,r2
 2001420:	e0bffe17 	ldw	r2,-8(fp)
 2001424:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2001428:	e0bffd17 	ldw	r2,-12(fp)
 200142c:	11000104 	addi	r4,r2,4
 2001430:	e0bffe17 	ldw	r2,-8(fp)
 2001434:	10800817 	ldw	r2,32(r2)
 2001438:	1007883a 	mov	r3,r2
 200143c:	2005883a 	mov	r2,r4
 2001440:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2001444:	e0bffd17 	ldw	r2,-12(fp)
 2001448:	10800104 	addi	r2,r2,4
 200144c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2001450:	e0bffc17 	ldw	r2,-16(fp)
 2001454:	1080800c 	andi	r2,r2,512
 2001458:	1005003a 	cmpeq	r2,r2,zero
 200145c:	103fbb1e 	bne	r2,zero,200134c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2001460:	e0bffc17 	ldw	r2,-16(fp)
 2001464:	10bfffec 	andhi	r2,r2,65535
 2001468:	1004d43a 	srli	r2,r2,16
 200146c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2001470:	00001506 	br	20014c8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2001474:	e13ffd17 	ldw	r4,-12(fp)
 2001478:	e0bffe17 	ldw	r2,-8(fp)
 200147c:	10c00d17 	ldw	r3,52(r2)
 2001480:	e0bffe17 	ldw	r2,-8(fp)
 2001484:	1885883a 	add	r2,r3,r2
 2001488:	10820e04 	addi	r2,r2,2104
 200148c:	10800003 	ldbu	r2,0(r2)
 2001490:	10c03fcc 	andi	r3,r2,255
 2001494:	18c0201c 	xori	r3,r3,128
 2001498:	18ffe004 	addi	r3,r3,-128
 200149c:	2005883a 	mov	r2,r4
 20014a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20014a4:	e0bffe17 	ldw	r2,-8(fp)
 20014a8:	10800d17 	ldw	r2,52(r2)
 20014ac:	10800044 	addi	r2,r2,1
 20014b0:	10c1ffcc 	andi	r3,r2,2047
 20014b4:	e0bffe17 	ldw	r2,-8(fp)
 20014b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 20014bc:	e0bff917 	ldw	r2,-28(fp)
 20014c0:	10bfffc4 	addi	r2,r2,-1
 20014c4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 20014c8:	e0bff917 	ldw	r2,-28(fp)
 20014cc:	1005003a 	cmpeq	r2,r2,zero
 20014d0:	1000051e 	bne	r2,zero,20014e8 <altera_avalon_jtag_uart_irq+0x1c4>
 20014d4:	e0bffe17 	ldw	r2,-8(fp)
 20014d8:	10c00d17 	ldw	r3,52(r2)
 20014dc:	e0bffe17 	ldw	r2,-8(fp)
 20014e0:	10800c17 	ldw	r2,48(r2)
 20014e4:	18bfe31e 	bne	r3,r2,2001474 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 20014e8:	e0bff917 	ldw	r2,-28(fp)
 20014ec:	1005003a 	cmpeq	r2,r2,zero
 20014f0:	103f961e 	bne	r2,zero,200134c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20014f4:	e0bffe17 	ldw	r2,-8(fp)
 20014f8:	10c00817 	ldw	r3,32(r2)
 20014fc:	00bfff44 	movi	r2,-3
 2001500:	1886703a 	and	r3,r3,r2
 2001504:	e0bffe17 	ldw	r2,-8(fp)
 2001508:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200150c:	e0bffe17 	ldw	r2,-8(fp)
 2001510:	10800017 	ldw	r2,0(r2)
 2001514:	11000104 	addi	r4,r2,4
 2001518:	e0bffe17 	ldw	r2,-8(fp)
 200151c:	10800817 	ldw	r2,32(r2)
 2001520:	1007883a 	mov	r3,r2
 2001524:	2005883a 	mov	r2,r4
 2001528:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200152c:	e0bffd17 	ldw	r2,-12(fp)
 2001530:	10800104 	addi	r2,r2,4
 2001534:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2001538:	003f8406 	br	200134c <altera_avalon_jtag_uart_irq+0x28>
}
 200153c:	e037883a 	mov	sp,fp
 2001540:	df000017 	ldw	fp,0(sp)
 2001544:	dec00104 	addi	sp,sp,4
 2001548:	f800283a 	ret

0200154c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200154c:	defffc04 	addi	sp,sp,-16
 2001550:	df000315 	stw	fp,12(sp)
 2001554:	df000304 	addi	fp,sp,12
 2001558:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200155c:	e0bfff17 	ldw	r2,-4(fp)
 2001560:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2001564:	e0bffe17 	ldw	r2,-8(fp)
 2001568:	10800017 	ldw	r2,0(r2)
 200156c:	10800104 	addi	r2,r2,4
 2001570:	10800037 	ldwio	r2,0(r2)
 2001574:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2001578:	e0bffd17 	ldw	r2,-12(fp)
 200157c:	1081000c 	andi	r2,r2,1024
 2001580:	1005003a 	cmpeq	r2,r2,zero
 2001584:	10000c1e 	bne	r2,zero,20015b8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2001588:	e0bffe17 	ldw	r2,-8(fp)
 200158c:	10800017 	ldw	r2,0(r2)
 2001590:	11000104 	addi	r4,r2,4
 2001594:	e0bffe17 	ldw	r2,-8(fp)
 2001598:	10800817 	ldw	r2,32(r2)
 200159c:	10810014 	ori	r2,r2,1024
 20015a0:	1007883a 	mov	r3,r2
 20015a4:	2005883a 	mov	r2,r4
 20015a8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 20015ac:	e0bffe17 	ldw	r2,-8(fp)
 20015b0:	10000915 	stw	zero,36(r2)
 20015b4:	00000a06 	br	20015e0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 20015b8:	e0bffe17 	ldw	r2,-8(fp)
 20015bc:	10c00917 	ldw	r3,36(r2)
 20015c0:	00a00034 	movhi	r2,32768
 20015c4:	10bfff04 	addi	r2,r2,-4
 20015c8:	10c00536 	bltu	r2,r3,20015e0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 20015cc:	e0bffe17 	ldw	r2,-8(fp)
 20015d0:	10800917 	ldw	r2,36(r2)
 20015d4:	10c00044 	addi	r3,r2,1
 20015d8:	e0bffe17 	ldw	r2,-8(fp)
 20015dc:	10c00915 	stw	r3,36(r2)
 20015e0:	00808034 	movhi	r2,512
 20015e4:	10947f04 	addi	r2,r2,20988
 20015e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 20015ec:	e037883a 	mov	sp,fp
 20015f0:	df000017 	ldw	fp,0(sp)
 20015f4:	dec00104 	addi	sp,sp,4
 20015f8:	f800283a 	ret

020015fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 20015fc:	defffc04 	addi	sp,sp,-16
 2001600:	df000315 	stw	fp,12(sp)
 2001604:	df000304 	addi	fp,sp,12
 2001608:	e13ffd15 	stw	r4,-12(fp)
 200160c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2001610:	00000706 	br	2001630 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2001614:	e0bffe17 	ldw	r2,-8(fp)
 2001618:	1090000c 	andi	r2,r2,16384
 200161c:	1005003a 	cmpeq	r2,r2,zero
 2001620:	1000031e 	bne	r2,zero,2001630 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2001624:	00bffd44 	movi	r2,-11
 2001628:	e0bfff15 	stw	r2,-4(fp)
 200162c:	00000b06 	br	200165c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2001630:	e0bffd17 	ldw	r2,-12(fp)
 2001634:	10c00d17 	ldw	r3,52(r2)
 2001638:	e0bffd17 	ldw	r2,-12(fp)
 200163c:	10800c17 	ldw	r2,48(r2)
 2001640:	18800526 	beq	r3,r2,2001658 <altera_avalon_jtag_uart_close+0x5c>
 2001644:	e0bffd17 	ldw	r2,-12(fp)
 2001648:	10c00917 	ldw	r3,36(r2)
 200164c:	e0bffd17 	ldw	r2,-12(fp)
 2001650:	10800117 	ldw	r2,4(r2)
 2001654:	18bfef36 	bltu	r3,r2,2001614 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2001658:	e03fff15 	stw	zero,-4(fp)
 200165c:	e0bfff17 	ldw	r2,-4(fp)
}
 2001660:	e037883a 	mov	sp,fp
 2001664:	df000017 	ldw	fp,0(sp)
 2001668:	dec00104 	addi	sp,sp,4
 200166c:	f800283a 	ret

02001670 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2001670:	defff804 	addi	sp,sp,-32
 2001674:	df000715 	stw	fp,28(sp)
 2001678:	df000704 	addi	fp,sp,28
 200167c:	e13ffb15 	stw	r4,-20(fp)
 2001680:	e17ffc15 	stw	r5,-16(fp)
 2001684:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2001688:	00bff9c4 	movi	r2,-25
 200168c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2001690:	e0bffc17 	ldw	r2,-16(fp)
 2001694:	e0bfff15 	stw	r2,-4(fp)
 2001698:	e0ffff17 	ldw	r3,-4(fp)
 200169c:	189a8060 	cmpeqi	r2,r3,27137
 20016a0:	1000041e 	bne	r2,zero,20016b4 <altera_avalon_jtag_uart_ioctl+0x44>
 20016a4:	e0ffff17 	ldw	r3,-4(fp)
 20016a8:	189a80a0 	cmpeqi	r2,r3,27138
 20016ac:	10001b1e 	bne	r2,zero,200171c <altera_avalon_jtag_uart_ioctl+0xac>
 20016b0:	00002706 	br	2001750 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20016b4:	e0bffb17 	ldw	r2,-20(fp)
 20016b8:	10c00117 	ldw	r3,4(r2)
 20016bc:	00a00034 	movhi	r2,32768
 20016c0:	10bfffc4 	addi	r2,r2,-1
 20016c4:	18802226 	beq	r3,r2,2001750 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 20016c8:	e0bffd17 	ldw	r2,-12(fp)
 20016cc:	10800017 	ldw	r2,0(r2)
 20016d0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 20016d4:	e0bff917 	ldw	r2,-28(fp)
 20016d8:	10800090 	cmplti	r2,r2,2
 20016dc:	1000071e 	bne	r2,zero,20016fc <altera_avalon_jtag_uart_ioctl+0x8c>
 20016e0:	e0fff917 	ldw	r3,-28(fp)
 20016e4:	00a00034 	movhi	r2,32768
 20016e8:	10bfffc4 	addi	r2,r2,-1
 20016ec:	18800326 	beq	r3,r2,20016fc <altera_avalon_jtag_uart_ioctl+0x8c>
 20016f0:	e0bff917 	ldw	r2,-28(fp)
 20016f4:	e0bffe15 	stw	r2,-8(fp)
 20016f8:	00000306 	br	2001708 <altera_avalon_jtag_uart_ioctl+0x98>
 20016fc:	00e00034 	movhi	r3,32768
 2001700:	18ffff84 	addi	r3,r3,-2
 2001704:	e0fffe15 	stw	r3,-8(fp)
 2001708:	e0bffb17 	ldw	r2,-20(fp)
 200170c:	e0fffe17 	ldw	r3,-8(fp)
 2001710:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2001714:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2001718:	00000d06 	br	2001750 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200171c:	e0bffb17 	ldw	r2,-20(fp)
 2001720:	10c00117 	ldw	r3,4(r2)
 2001724:	00a00034 	movhi	r2,32768
 2001728:	10bfffc4 	addi	r2,r2,-1
 200172c:	18800826 	beq	r3,r2,2001750 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2001730:	e13ffd17 	ldw	r4,-12(fp)
 2001734:	e0bffb17 	ldw	r2,-20(fp)
 2001738:	10c00917 	ldw	r3,36(r2)
 200173c:	e0bffb17 	ldw	r2,-20(fp)
 2001740:	10800117 	ldw	r2,4(r2)
 2001744:	1885803a 	cmpltu	r2,r3,r2
 2001748:	20800015 	stw	r2,0(r4)
      rc = 0;
 200174c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2001750:	e0bffa17 	ldw	r2,-24(fp)
}
 2001754:	e037883a 	mov	sp,fp
 2001758:	df000017 	ldw	fp,0(sp)
 200175c:	dec00104 	addi	sp,sp,4
 2001760:	f800283a 	ret

02001764 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2001764:	defff204 	addi	sp,sp,-56
 2001768:	dfc00d15 	stw	ra,52(sp)
 200176c:	df000c15 	stw	fp,48(sp)
 2001770:	df000c04 	addi	fp,sp,48
 2001774:	e13ffb15 	stw	r4,-20(fp)
 2001778:	e17ffc15 	stw	r5,-16(fp)
 200177c:	e1bffd15 	stw	r6,-12(fp)
 2001780:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2001784:	e0bffc17 	ldw	r2,-16(fp)
 2001788:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200178c:	00004806 	br	20018b0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2001790:	e0bffb17 	ldw	r2,-20(fp)
 2001794:	10800a17 	ldw	r2,40(r2)
 2001798:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200179c:	e0bffb17 	ldw	r2,-20(fp)
 20017a0:	10800b17 	ldw	r2,44(r2)
 20017a4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 20017a8:	e0fff717 	ldw	r3,-36(fp)
 20017ac:	e0bff617 	ldw	r2,-40(fp)
 20017b0:	18800536 	bltu	r3,r2,20017c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20017b4:	e0bff717 	ldw	r2,-36(fp)
 20017b8:	e0fff617 	ldw	r3,-40(fp)
 20017bc:	10c5c83a 	sub	r2,r2,r3
 20017c0:	e0bff815 	stw	r2,-32(fp)
 20017c4:	00000406 	br	20017d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20017c8:	00820004 	movi	r2,2048
 20017cc:	e0fff617 	ldw	r3,-40(fp)
 20017d0:	10c5c83a 	sub	r2,r2,r3
 20017d4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 20017d8:	e0bff817 	ldw	r2,-32(fp)
 20017dc:	1005003a 	cmpeq	r2,r2,zero
 20017e0:	10001f1e 	bne	r2,zero,2001860 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 20017e4:	e0fffd17 	ldw	r3,-12(fp)
 20017e8:	e0bff817 	ldw	r2,-32(fp)
 20017ec:	1880022e 	bgeu	r3,r2,20017f8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 20017f0:	e0bffd17 	ldw	r2,-12(fp)
 20017f4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 20017f8:	e0bffb17 	ldw	r2,-20(fp)
 20017fc:	10c00e04 	addi	r3,r2,56
 2001800:	e0bff617 	ldw	r2,-40(fp)
 2001804:	1887883a 	add	r3,r3,r2
 2001808:	e0bffa17 	ldw	r2,-24(fp)
 200180c:	1009883a 	mov	r4,r2
 2001810:	180b883a 	mov	r5,r3
 2001814:	e1bff817 	ldw	r6,-32(fp)
 2001818:	20034f80 	call	20034f8 <memcpy>
      ptr   += n;
 200181c:	e0fff817 	ldw	r3,-32(fp)
 2001820:	e0bffa17 	ldw	r2,-24(fp)
 2001824:	10c5883a 	add	r2,r2,r3
 2001828:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 200182c:	e0fffd17 	ldw	r3,-12(fp)
 2001830:	e0bff817 	ldw	r2,-32(fp)
 2001834:	1885c83a 	sub	r2,r3,r2
 2001838:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200183c:	e0fff617 	ldw	r3,-40(fp)
 2001840:	e0bff817 	ldw	r2,-32(fp)
 2001844:	1885883a 	add	r2,r3,r2
 2001848:	10c1ffcc 	andi	r3,r2,2047
 200184c:	e0bffb17 	ldw	r2,-20(fp)
 2001850:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2001854:	e0bffd17 	ldw	r2,-12(fp)
 2001858:	10800048 	cmpgei	r2,r2,1
 200185c:	103fcc1e 	bne	r2,zero,2001790 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2001860:	e0fffa17 	ldw	r3,-24(fp)
 2001864:	e0bffc17 	ldw	r2,-16(fp)
 2001868:	1880141e 	bne	r3,r2,20018bc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200186c:	e0bffe17 	ldw	r2,-8(fp)
 2001870:	1090000c 	andi	r2,r2,16384
 2001874:	1004c03a 	cmpne	r2,r2,zero
 2001878:	1000101e 	bne	r2,zero,20018bc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200187c:	e0bffb17 	ldw	r2,-20(fp)
 2001880:	10c00a17 	ldw	r3,40(r2)
 2001884:	e0bff717 	ldw	r2,-36(fp)
 2001888:	1880051e 	bne	r3,r2,20018a0 <altera_avalon_jtag_uart_read+0x13c>
 200188c:	e0bffb17 	ldw	r2,-20(fp)
 2001890:	10c00917 	ldw	r3,36(r2)
 2001894:	e0bffb17 	ldw	r2,-20(fp)
 2001898:	10800117 	ldw	r2,4(r2)
 200189c:	18bff736 	bltu	r3,r2,200187c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20018a0:	e0bffb17 	ldw	r2,-20(fp)
 20018a4:	10c00a17 	ldw	r3,40(r2)
 20018a8:	e0bff717 	ldw	r2,-36(fp)
 20018ac:	18800326 	beq	r3,r2,20018bc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20018b0:	e0bffd17 	ldw	r2,-12(fp)
 20018b4:	10800048 	cmpgei	r2,r2,1
 20018b8:	103fb51e 	bne	r2,zero,2001790 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 20018bc:	e0fffa17 	ldw	r3,-24(fp)
 20018c0:	e0bffc17 	ldw	r2,-16(fp)
 20018c4:	18801926 	beq	r3,r2,200192c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20018c8:	0005303a 	rdctl	r2,status
 20018cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20018d0:	e0fff517 	ldw	r3,-44(fp)
 20018d4:	00bfff84 	movi	r2,-2
 20018d8:	1884703a 	and	r2,r3,r2
 20018dc:	1001703a 	wrctl	status,r2
  
  return context;
 20018e0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 20018e4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20018e8:	e0bffb17 	ldw	r2,-20(fp)
 20018ec:	10800817 	ldw	r2,32(r2)
 20018f0:	10c00054 	ori	r3,r2,1
 20018f4:	e0bffb17 	ldw	r2,-20(fp)
 20018f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20018fc:	e0bffb17 	ldw	r2,-20(fp)
 2001900:	10800017 	ldw	r2,0(r2)
 2001904:	11000104 	addi	r4,r2,4
 2001908:	e0bffb17 	ldw	r2,-20(fp)
 200190c:	10800817 	ldw	r2,32(r2)
 2001910:	1007883a 	mov	r3,r2
 2001914:	2005883a 	mov	r2,r4
 2001918:	10c00035 	stwio	r3,0(r2)
 200191c:	e0bff917 	ldw	r2,-28(fp)
 2001920:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001924:	e0bff417 	ldw	r2,-48(fp)
 2001928:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200192c:	e0fffa17 	ldw	r3,-24(fp)
 2001930:	e0bffc17 	ldw	r2,-16(fp)
 2001934:	18800526 	beq	r3,r2,200194c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2001938:	e0fffa17 	ldw	r3,-24(fp)
 200193c:	e0bffc17 	ldw	r2,-16(fp)
 2001940:	1887c83a 	sub	r3,r3,r2
 2001944:	e0ffff15 	stw	r3,-4(fp)
 2001948:	00000906 	br	2001970 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 200194c:	e0bffe17 	ldw	r2,-8(fp)
 2001950:	1090000c 	andi	r2,r2,16384
 2001954:	1005003a 	cmpeq	r2,r2,zero
 2001958:	1000031e 	bne	r2,zero,2001968 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200195c:	00bffd44 	movi	r2,-11
 2001960:	e0bfff15 	stw	r2,-4(fp)
 2001964:	00000206 	br	2001970 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2001968:	00bffec4 	movi	r2,-5
 200196c:	e0bfff15 	stw	r2,-4(fp)
 2001970:	e0bfff17 	ldw	r2,-4(fp)
}
 2001974:	e037883a 	mov	sp,fp
 2001978:	dfc00117 	ldw	ra,4(sp)
 200197c:	df000017 	ldw	fp,0(sp)
 2001980:	dec00204 	addi	sp,sp,8
 2001984:	f800283a 	ret

02001988 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2001988:	defff204 	addi	sp,sp,-56
 200198c:	dfc00d15 	stw	ra,52(sp)
 2001990:	df000c15 	stw	fp,48(sp)
 2001994:	df000c04 	addi	fp,sp,48
 2001998:	e13ffb15 	stw	r4,-20(fp)
 200199c:	e17ffc15 	stw	r5,-16(fp)
 20019a0:	e1bffd15 	stw	r6,-12(fp)
 20019a4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20019a8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20019ac:	e0bffc17 	ldw	r2,-16(fp)
 20019b0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20019b4:	00003a06 	br	2001aa0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20019b8:	e0bffb17 	ldw	r2,-20(fp)
 20019bc:	10800c17 	ldw	r2,48(r2)
 20019c0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 20019c4:	e0bffb17 	ldw	r2,-20(fp)
 20019c8:	10800d17 	ldw	r2,52(r2)
 20019cc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 20019d0:	e0fffa17 	ldw	r3,-24(fp)
 20019d4:	e0bff917 	ldw	r2,-28(fp)
 20019d8:	1880062e 	bgeu	r3,r2,20019f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 20019dc:	e0fff917 	ldw	r3,-28(fp)
 20019e0:	e0bffa17 	ldw	r2,-24(fp)
 20019e4:	1885c83a 	sub	r2,r3,r2
 20019e8:	10bfffc4 	addi	r2,r2,-1
 20019ec:	e0bff815 	stw	r2,-32(fp)
 20019f0:	00000c06 	br	2001a24 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 20019f4:	e0bff917 	ldw	r2,-28(fp)
 20019f8:	1005003a 	cmpeq	r2,r2,zero
 20019fc:	1000051e 	bne	r2,zero,2001a14 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2001a00:	00820004 	movi	r2,2048
 2001a04:	e0fffa17 	ldw	r3,-24(fp)
 2001a08:	10c5c83a 	sub	r2,r2,r3
 2001a0c:	e0bff815 	stw	r2,-32(fp)
 2001a10:	00000406 	br	2001a24 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2001a14:	0081ffc4 	movi	r2,2047
 2001a18:	e0fffa17 	ldw	r3,-24(fp)
 2001a1c:	10c5c83a 	sub	r2,r2,r3
 2001a20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2001a24:	e0bff817 	ldw	r2,-32(fp)
 2001a28:	1005003a 	cmpeq	r2,r2,zero
 2001a2c:	10001f1e 	bne	r2,zero,2001aac <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2001a30:	e0fffd17 	ldw	r3,-12(fp)
 2001a34:	e0bff817 	ldw	r2,-32(fp)
 2001a38:	1880022e 	bgeu	r3,r2,2001a44 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2001a3c:	e0bffd17 	ldw	r2,-12(fp)
 2001a40:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2001a44:	e0bffb17 	ldw	r2,-20(fp)
 2001a48:	10c20e04 	addi	r3,r2,2104
 2001a4c:	e0bffa17 	ldw	r2,-24(fp)
 2001a50:	1885883a 	add	r2,r3,r2
 2001a54:	e0fffc17 	ldw	r3,-16(fp)
 2001a58:	1009883a 	mov	r4,r2
 2001a5c:	180b883a 	mov	r5,r3
 2001a60:	e1bff817 	ldw	r6,-32(fp)
 2001a64:	20034f80 	call	20034f8 <memcpy>
      ptr   += n;
 2001a68:	e0fff817 	ldw	r3,-32(fp)
 2001a6c:	e0bffc17 	ldw	r2,-16(fp)
 2001a70:	10c5883a 	add	r2,r2,r3
 2001a74:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2001a78:	e0fffd17 	ldw	r3,-12(fp)
 2001a7c:	e0bff817 	ldw	r2,-32(fp)
 2001a80:	1885c83a 	sub	r2,r3,r2
 2001a84:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001a88:	e0fffa17 	ldw	r3,-24(fp)
 2001a8c:	e0bff817 	ldw	r2,-32(fp)
 2001a90:	1885883a 	add	r2,r3,r2
 2001a94:	10c1ffcc 	andi	r3,r2,2047
 2001a98:	e0bffb17 	ldw	r2,-20(fp)
 2001a9c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2001aa0:	e0bffd17 	ldw	r2,-12(fp)
 2001aa4:	10800048 	cmpgei	r2,r2,1
 2001aa8:	103fc31e 	bne	r2,zero,20019b8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001aac:	0005303a 	rdctl	r2,status
 2001ab0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001ab4:	e0fff517 	ldw	r3,-44(fp)
 2001ab8:	00bfff84 	movi	r2,-2
 2001abc:	1884703a 	and	r2,r3,r2
 2001ac0:	1001703a 	wrctl	status,r2
  
  return context;
 2001ac4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2001ac8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2001acc:	e0bffb17 	ldw	r2,-20(fp)
 2001ad0:	10800817 	ldw	r2,32(r2)
 2001ad4:	10c00094 	ori	r3,r2,2
 2001ad8:	e0bffb17 	ldw	r2,-20(fp)
 2001adc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001ae0:	e0bffb17 	ldw	r2,-20(fp)
 2001ae4:	10800017 	ldw	r2,0(r2)
 2001ae8:	11000104 	addi	r4,r2,4
 2001aec:	e0bffb17 	ldw	r2,-20(fp)
 2001af0:	10800817 	ldw	r2,32(r2)
 2001af4:	1007883a 	mov	r3,r2
 2001af8:	2005883a 	mov	r2,r4
 2001afc:	10c00035 	stwio	r3,0(r2)
 2001b00:	e0bff717 	ldw	r2,-36(fp)
 2001b04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001b08:	e0bff417 	ldw	r2,-48(fp)
 2001b0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2001b10:	e0bffd17 	ldw	r2,-12(fp)
 2001b14:	10800050 	cmplti	r2,r2,1
 2001b18:	1000111e 	bne	r2,zero,2001b60 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2001b1c:	e0bffe17 	ldw	r2,-8(fp)
 2001b20:	1090000c 	andi	r2,r2,16384
 2001b24:	1004c03a 	cmpne	r2,r2,zero
 2001b28:	1000101e 	bne	r2,zero,2001b6c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2001b2c:	e0bffb17 	ldw	r2,-20(fp)
 2001b30:	10c00d17 	ldw	r3,52(r2)
 2001b34:	e0bff917 	ldw	r2,-28(fp)
 2001b38:	1880051e 	bne	r3,r2,2001b50 <altera_avalon_jtag_uart_write+0x1c8>
 2001b3c:	e0bffb17 	ldw	r2,-20(fp)
 2001b40:	10c00917 	ldw	r3,36(r2)
 2001b44:	e0bffb17 	ldw	r2,-20(fp)
 2001b48:	10800117 	ldw	r2,4(r2)
 2001b4c:	18bff736 	bltu	r3,r2,2001b2c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2001b50:	e0bffb17 	ldw	r2,-20(fp)
 2001b54:	10c00d17 	ldw	r3,52(r2)
 2001b58:	e0bff917 	ldw	r2,-28(fp)
 2001b5c:	18800326 	beq	r3,r2,2001b6c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 2001b60:	e0bffd17 	ldw	r2,-12(fp)
 2001b64:	10800048 	cmpgei	r2,r2,1
 2001b68:	103fcd1e 	bne	r2,zero,2001aa0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2001b6c:	e0fffc17 	ldw	r3,-16(fp)
 2001b70:	e0bff617 	ldw	r2,-40(fp)
 2001b74:	18800526 	beq	r3,r2,2001b8c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2001b78:	e0fffc17 	ldw	r3,-16(fp)
 2001b7c:	e0bff617 	ldw	r2,-40(fp)
 2001b80:	1887c83a 	sub	r3,r3,r2
 2001b84:	e0ffff15 	stw	r3,-4(fp)
 2001b88:	00000906 	br	2001bb0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2001b8c:	e0bffe17 	ldw	r2,-8(fp)
 2001b90:	1090000c 	andi	r2,r2,16384
 2001b94:	1005003a 	cmpeq	r2,r2,zero
 2001b98:	1000031e 	bne	r2,zero,2001ba8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 2001b9c:	00bffd44 	movi	r2,-11
 2001ba0:	e0bfff15 	stw	r2,-4(fp)
 2001ba4:	00000206 	br	2001bb0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 2001ba8:	00bffec4 	movi	r2,-5
 2001bac:	e0bfff15 	stw	r2,-4(fp)
 2001bb0:	e0bfff17 	ldw	r2,-4(fp)
}
 2001bb4:	e037883a 	mov	sp,fp
 2001bb8:	dfc00117 	ldw	ra,4(sp)
 2001bbc:	df000017 	ldw	fp,0(sp)
 2001bc0:	dec00204 	addi	sp,sp,8
 2001bc4:	f800283a 	ret

02001bc8 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2001bc8:	defff904 	addi	sp,sp,-28
 2001bcc:	dfc00615 	stw	ra,24(sp)
 2001bd0:	df000515 	stw	fp,20(sp)
 2001bd4:	df000504 	addi	fp,sp,20
 2001bd8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2001bdc:	00800144 	movi	r2,5
 2001be0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2001be4:	00800044 	movi	r2,1
 2001be8:	d8800015 	stw	r2,0(sp)
 2001bec:	e0bffe44 	addi	r2,fp,-7
 2001bf0:	d8800115 	stw	r2,4(sp)
 2001bf4:	d8000215 	stw	zero,8(sp)
 2001bf8:	e13fff17 	ldw	r4,-4(fp)
 2001bfc:	000b883a 	mov	r5,zero
 2001c00:	01800044 	movi	r6,1
 2001c04:	e1fffe04 	addi	r7,fp,-8
 2001c08:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2001c0c:	e0bffe43 	ldbu	r2,-7(fp)
 2001c10:	10803fcc 	andi	r2,r2,255
}
 2001c14:	e037883a 	mov	sp,fp
 2001c18:	dfc00117 	ldw	ra,4(sp)
 2001c1c:	df000017 	ldw	fp,0(sp)
 2001c20:	dec00204 	addi	sp,sp,8
 2001c24:	f800283a 	ret

02001c28 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2001c28:	defff604 	addi	sp,sp,-40
 2001c2c:	dfc00915 	stw	ra,36(sp)
 2001c30:	df000815 	stw	fp,32(sp)
 2001c34:	df000804 	addi	fp,sp,32
 2001c38:	e13ffd15 	stw	r4,-12(fp)
 2001c3c:	e17ffe15 	stw	r5,-8(fp)
 2001c40:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2001c44:	e0bfff17 	ldw	r2,-4(fp)
 2001c48:	1005003a 	cmpeq	r2,r2,zero
 2001c4c:	1000121e 	bne	r2,zero,2001c98 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2001c50:	00bff604 	movi	r2,-40
 2001c54:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2001c58:	e0bffe17 	ldw	r2,-8(fp)
 2001c5c:	1004d63a 	srli	r2,r2,24
 2001c60:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2001c64:	e0bffe17 	ldw	r2,-8(fp)
 2001c68:	1004d43a 	srli	r2,r2,16
 2001c6c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2001c70:	e0bffe17 	ldw	r2,-8(fp)
 2001c74:	1004d23a 	srli	r2,r2,8
 2001c78:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2001c7c:	e0bffe17 	ldw	r2,-8(fp)
 2001c80:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2001c84:	00800144 	movi	r2,5
 2001c88:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2001c8c:	e13ffd17 	ldw	r4,-12(fp)
 2001c90:	20021ec0 	call	20021ec <epcs_enter_4_bytes_mode>
 2001c94:	00000c06 	br	2001cc8 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 2001c98:	00bff604 	movi	r2,-40
 2001c9c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2001ca0:	e0bffe17 	ldw	r2,-8(fp)
 2001ca4:	1004d43a 	srli	r2,r2,16
 2001ca8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2001cac:	e0bffe17 	ldw	r2,-8(fp)
 2001cb0:	1004d23a 	srli	r2,r2,8
 2001cb4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2001cb8:	e0bffe17 	ldw	r2,-8(fp)
 2001cbc:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2001cc0:	00800104 	movi	r2,4
 2001cc4:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2001cc8:	e13ffd17 	ldw	r4,-12(fp)
 2001ccc:	2001edc0 	call	2001edc <epcs_write_enable>

  alt_avalon_spi_command(
 2001cd0:	e1bffb03 	ldbu	r6,-20(fp)
 2001cd4:	e1fffb44 	addi	r7,fp,-19
 2001cd8:	d8000015 	stw	zero,0(sp)
 2001cdc:	d8000115 	stw	zero,4(sp)
 2001ce0:	d8000215 	stw	zero,8(sp)
 2001ce4:	e13ffd17 	ldw	r4,-12(fp)
 2001ce8:	000b883a 	mov	r5,zero
 2001cec:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2001cf0:	e13ffd17 	ldw	r4,-12(fp)
 2001cf4:	2001d200 	call	2001d20 <epcs_await_wip_released>

  if(four_bytes_mode)
 2001cf8:	e0bfff17 	ldw	r2,-4(fp)
 2001cfc:	1005003a 	cmpeq	r2,r2,zero
 2001d00:	1000021e 	bne	r2,zero,2001d0c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2001d04:	e13ffd17 	ldw	r4,-12(fp)
 2001d08:	20022440 	call	2002244 <epcs_exit_4_bytes_mode>
  }
}
 2001d0c:	e037883a 	mov	sp,fp
 2001d10:	dfc00117 	ldw	ra,4(sp)
 2001d14:	df000017 	ldw	fp,0(sp)
 2001d18:	dec00204 	addi	sp,sp,8
 2001d1c:	f800283a 	ret

02001d20 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2001d20:	defffd04 	addi	sp,sp,-12
 2001d24:	dfc00215 	stw	ra,8(sp)
 2001d28:	df000115 	stw	fp,4(sp)
 2001d2c:	df000104 	addi	fp,sp,4
 2001d30:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2001d34:	e13fff17 	ldw	r4,-4(fp)
 2001d38:	2001d580 	call	2001d58 <epcs_test_wip>
 2001d3c:	1004c03a 	cmpne	r2,r2,zero
 2001d40:	103ffc1e 	bne	r2,zero,2001d34 <epcs_await_wip_released+0x14>
  {
  }
}
 2001d44:	e037883a 	mov	sp,fp
 2001d48:	dfc00117 	ldw	ra,4(sp)
 2001d4c:	df000017 	ldw	fp,0(sp)
 2001d50:	dec00204 	addi	sp,sp,8
 2001d54:	f800283a 	ret

02001d58 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2001d58:	defffd04 	addi	sp,sp,-12
 2001d5c:	dfc00215 	stw	ra,8(sp)
 2001d60:	df000115 	stw	fp,4(sp)
 2001d64:	df000104 	addi	fp,sp,4
 2001d68:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2001d6c:	e13fff17 	ldw	r4,-4(fp)
 2001d70:	2001bc80 	call	2001bc8 <epcs_read_status_register>
 2001d74:	10803fcc 	andi	r2,r2,255
 2001d78:	1080004c 	andi	r2,r2,1
}
 2001d7c:	e037883a 	mov	sp,fp
 2001d80:	dfc00117 	ldw	ra,4(sp)
 2001d84:	df000017 	ldw	fp,0(sp)
 2001d88:	dec00204 	addi	sp,sp,8
 2001d8c:	f800283a 	ret

02001d90 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2001d90:	defff404 	addi	sp,sp,-48
 2001d94:	dfc00b15 	stw	ra,44(sp)
 2001d98:	df000a15 	stw	fp,40(sp)
 2001d9c:	df000a04 	addi	fp,sp,40
 2001da0:	e13ffc15 	stw	r4,-16(fp)
 2001da4:	e17ffd15 	stw	r5,-12(fp)
 2001da8:	e1bffe15 	stw	r6,-8(fp)
 2001dac:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2001db0:	008000c4 	movi	r2,3
 2001db4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2001db8:	e0800217 	ldw	r2,8(fp)
 2001dbc:	1005003a 	cmpeq	r2,r2,zero
 2001dc0:	10001c1e 	bne	r2,zero,2001e34 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2001dc4:	e0bffd17 	ldw	r2,-12(fp)
 2001dc8:	1005d63a 	srai	r2,r2,24
 2001dcc:	1007883a 	mov	r3,r2
 2001dd0:	00bfffc4 	movi	r2,-1
 2001dd4:	1884703a 	and	r2,r3,r2
 2001dd8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2001ddc:	e0bffd17 	ldw	r2,-12(fp)
 2001de0:	1005d43a 	srai	r2,r2,16
 2001de4:	1007883a 	mov	r3,r2
 2001de8:	00bfffc4 	movi	r2,-1
 2001dec:	1884703a 	and	r2,r3,r2
 2001df0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2001df4:	e0bffd17 	ldw	r2,-12(fp)
 2001df8:	1005d23a 	srai	r2,r2,8
 2001dfc:	1007883a 	mov	r3,r2
 2001e00:	00bfffc4 	movi	r2,-1
 2001e04:	1884703a 	and	r2,r3,r2
 2001e08:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2001e0c:	e0bffd17 	ldw	r2,-12(fp)
 2001e10:	1007883a 	mov	r3,r2
 2001e14:	00bfffc4 	movi	r2,-1
 2001e18:	1884703a 	and	r2,r3,r2
 2001e1c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2001e20:	00800144 	movi	r2,5
 2001e24:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2001e28:	e13ffc17 	ldw	r4,-16(fp)
 2001e2c:	20021ec0 	call	20021ec <epcs_enter_4_bytes_mode>
 2001e30:	00001306 	br	2001e80 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2001e34:	e0bffd17 	ldw	r2,-12(fp)
 2001e38:	1005d43a 	srai	r2,r2,16
 2001e3c:	1007883a 	mov	r3,r2
 2001e40:	00bfffc4 	movi	r2,-1
 2001e44:	1884703a 	and	r2,r3,r2
 2001e48:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2001e4c:	e0bffd17 	ldw	r2,-12(fp)
 2001e50:	1005d23a 	srai	r2,r2,8
 2001e54:	1007883a 	mov	r3,r2
 2001e58:	00bfffc4 	movi	r2,-1
 2001e5c:	1884703a 	and	r2,r3,r2
 2001e60:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2001e64:	e0bffd17 	ldw	r2,-12(fp)
 2001e68:	1007883a 	mov	r3,r2
 2001e6c:	00bfffc4 	movi	r2,-1
 2001e70:	1884703a 	and	r2,r3,r2
 2001e74:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2001e78:	00800104 	movi	r2,4
 2001e7c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2001e80:	e13ffc17 	ldw	r4,-16(fp)
 2001e84:	2001d200 	call	2001d20 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2001e88:	e0bfff17 	ldw	r2,-4(fp)
 2001e8c:	e1fffa04 	addi	r7,fp,-24
 2001e90:	d8800015 	stw	r2,0(sp)
 2001e94:	e0bffe17 	ldw	r2,-8(fp)
 2001e98:	d8800115 	stw	r2,4(sp)
 2001e9c:	d8000215 	stw	zero,8(sp)
 2001ea0:	e13ffc17 	ldw	r4,-16(fp)
 2001ea4:	000b883a 	mov	r5,zero
 2001ea8:	e1bff917 	ldw	r6,-28(fp)
 2001eac:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2001eb0:	e0800217 	ldw	r2,8(fp)
 2001eb4:	1005003a 	cmpeq	r2,r2,zero
 2001eb8:	1000021e 	bne	r2,zero,2001ec4 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 2001ebc:	e13ffc17 	ldw	r4,-16(fp)
 2001ec0:	20022440 	call	2002244 <epcs_exit_4_bytes_mode>
  }

  return length;
 2001ec4:	e0bfff17 	ldw	r2,-4(fp)
}
 2001ec8:	e037883a 	mov	sp,fp
 2001ecc:	dfc00117 	ldw	ra,4(sp)
 2001ed0:	df000017 	ldw	fp,0(sp)
 2001ed4:	dec00204 	addi	sp,sp,8
 2001ed8:	f800283a 	ret

02001edc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2001edc:	defff904 	addi	sp,sp,-28
 2001ee0:	dfc00615 	stw	ra,24(sp)
 2001ee4:	df000515 	stw	fp,20(sp)
 2001ee8:	df000504 	addi	fp,sp,20
 2001eec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2001ef0:	00800184 	movi	r2,6
 2001ef4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2001ef8:	d8000015 	stw	zero,0(sp)
 2001efc:	d8000115 	stw	zero,4(sp)
 2001f00:	d8000215 	stw	zero,8(sp)
 2001f04:	e13fff17 	ldw	r4,-4(fp)
 2001f08:	000b883a 	mov	r5,zero
 2001f0c:	01800044 	movi	r6,1
 2001f10:	e1fffe04 	addi	r7,fp,-8
 2001f14:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2001f18:	e037883a 	mov	sp,fp
 2001f1c:	dfc00117 	ldw	ra,4(sp)
 2001f20:	df000017 	ldw	fp,0(sp)
 2001f24:	dec00204 	addi	sp,sp,8
 2001f28:	f800283a 	ret

02001f2c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2001f2c:	defff804 	addi	sp,sp,-32
 2001f30:	dfc00715 	stw	ra,28(sp)
 2001f34:	df000615 	stw	fp,24(sp)
 2001f38:	df000604 	addi	fp,sp,24
 2001f3c:	e13ffe15 	stw	r4,-8(fp)
 2001f40:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2001f44:	00800044 	movi	r2,1
 2001f48:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2001f4c:	e0bfff03 	ldbu	r2,-4(fp)
 2001f50:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2001f54:	d8000015 	stw	zero,0(sp)
 2001f58:	d8000115 	stw	zero,4(sp)
 2001f5c:	d8000215 	stw	zero,8(sp)
 2001f60:	e13ffe17 	ldw	r4,-8(fp)
 2001f64:	000b883a 	mov	r5,zero
 2001f68:	01800084 	movi	r6,2
 2001f6c:	e1fffd04 	addi	r7,fp,-12
 2001f70:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2001f74:	e13ffe17 	ldw	r4,-8(fp)
 2001f78:	2001d200 	call	2001d20 <epcs_await_wip_released>
}
 2001f7c:	e037883a 	mov	sp,fp
 2001f80:	dfc00117 	ldw	ra,4(sp)
 2001f84:	df000017 	ldw	fp,0(sp)
 2001f88:	dec00204 	addi	sp,sp,8
 2001f8c:	f800283a 	ret

02001f90 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2001f90:	defff404 	addi	sp,sp,-48
 2001f94:	dfc00b15 	stw	ra,44(sp)
 2001f98:	df000a15 	stw	fp,40(sp)
 2001f9c:	df000a04 	addi	fp,sp,40
 2001fa0:	e13ffc15 	stw	r4,-16(fp)
 2001fa4:	e17ffd15 	stw	r5,-12(fp)
 2001fa8:	e1bffe15 	stw	r6,-8(fp)
 2001fac:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2001fb0:	00800084 	movi	r2,2
 2001fb4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2001fb8:	e0800217 	ldw	r2,8(fp)
 2001fbc:	1005003a 	cmpeq	r2,r2,zero
 2001fc0:	10001c1e 	bne	r2,zero,2002034 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2001fc4:	e0bffd17 	ldw	r2,-12(fp)
 2001fc8:	1005d63a 	srai	r2,r2,24
 2001fcc:	1007883a 	mov	r3,r2
 2001fd0:	00bfffc4 	movi	r2,-1
 2001fd4:	1884703a 	and	r2,r3,r2
 2001fd8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2001fdc:	e0bffd17 	ldw	r2,-12(fp)
 2001fe0:	1005d43a 	srai	r2,r2,16
 2001fe4:	1007883a 	mov	r3,r2
 2001fe8:	00bfffc4 	movi	r2,-1
 2001fec:	1884703a 	and	r2,r3,r2
 2001ff0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2001ff4:	e0bffd17 	ldw	r2,-12(fp)
 2001ff8:	1005d23a 	srai	r2,r2,8
 2001ffc:	1007883a 	mov	r3,r2
 2002000:	00bfffc4 	movi	r2,-1
 2002004:	1884703a 	and	r2,r3,r2
 2002008:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 200200c:	e0bffd17 	ldw	r2,-12(fp)
 2002010:	1007883a 	mov	r3,r2
 2002014:	00bfffc4 	movi	r2,-1
 2002018:	1884703a 	and	r2,r3,r2
 200201c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2002020:	00800144 	movi	r2,5
 2002024:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2002028:	e13ffc17 	ldw	r4,-16(fp)
 200202c:	20021ec0 	call	20021ec <epcs_enter_4_bytes_mode>
 2002030:	00001306 	br	2002080 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2002034:	e0bffd17 	ldw	r2,-12(fp)
 2002038:	1005d43a 	srai	r2,r2,16
 200203c:	1007883a 	mov	r3,r2
 2002040:	00bfffc4 	movi	r2,-1
 2002044:	1884703a 	and	r2,r3,r2
 2002048:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 200204c:	e0bffd17 	ldw	r2,-12(fp)
 2002050:	1005d23a 	srai	r2,r2,8
 2002054:	1007883a 	mov	r3,r2
 2002058:	00bfffc4 	movi	r2,-1
 200205c:	1884703a 	and	r2,r3,r2
 2002060:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2002064:	e0bffd17 	ldw	r2,-12(fp)
 2002068:	1007883a 	mov	r3,r2
 200206c:	00bfffc4 	movi	r2,-1
 2002070:	1884703a 	and	r2,r3,r2
 2002074:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2002078:	00800104 	movi	r2,4
 200207c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2002080:	e13ffc17 	ldw	r4,-16(fp)
 2002084:	2001edc0 	call	2001edc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2002088:	e1fffa04 	addi	r7,fp,-24
 200208c:	d8000015 	stw	zero,0(sp)
 2002090:	d8000115 	stw	zero,4(sp)
 2002094:	00800044 	movi	r2,1
 2002098:	d8800215 	stw	r2,8(sp)
 200209c:	e13ffc17 	ldw	r4,-16(fp)
 20020a0:	000b883a 	mov	r5,zero
 20020a4:	e1bff917 	ldw	r6,-28(fp)
 20020a8:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 20020ac:	e1bfff17 	ldw	r6,-4(fp)
 20020b0:	d8000015 	stw	zero,0(sp)
 20020b4:	d8000115 	stw	zero,4(sp)
 20020b8:	d8000215 	stw	zero,8(sp)
 20020bc:	e13ffc17 	ldw	r4,-16(fp)
 20020c0:	000b883a 	mov	r5,zero
 20020c4:	e1fffe17 	ldw	r7,-8(fp)
 20020c8:	2002f940 	call	2002f94 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 20020cc:	e13ffc17 	ldw	r4,-16(fp)
 20020d0:	2001d200 	call	2001d20 <epcs_await_wip_released>

  if(four_bytes_mode)
 20020d4:	e0800217 	ldw	r2,8(fp)
 20020d8:	1005003a 	cmpeq	r2,r2,zero
 20020dc:	1000021e 	bne	r2,zero,20020e8 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 20020e0:	e13ffc17 	ldw	r4,-16(fp)
 20020e4:	20022440 	call	2002244 <epcs_exit_4_bytes_mode>
  }

  return length;
 20020e8:	e0bfff17 	ldw	r2,-4(fp)
}
 20020ec:	e037883a 	mov	sp,fp
 20020f0:	dfc00117 	ldw	ra,4(sp)
 20020f4:	df000017 	ldw	fp,0(sp)
 20020f8:	dec00204 	addi	sp,sp,8
 20020fc:	f800283a 	ret

02002100 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2002100:	defff804 	addi	sp,sp,-32
 2002104:	dfc00715 	stw	ra,28(sp)
 2002108:	df000615 	stw	fp,24(sp)
 200210c:	df000604 	addi	fp,sp,24
 2002110:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2002114:	00bfeac4 	movi	r2,-85
 2002118:	e0bffd05 	stb	r2,-12(fp)
 200211c:	e03ffd45 	stb	zero,-11(fp)
 2002120:	e03ffd85 	stb	zero,-10(fp)
 2002124:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2002128:	00800044 	movi	r2,1
 200212c:	d8800015 	stw	r2,0(sp)
 2002130:	e0bffe04 	addi	r2,fp,-8
 2002134:	d8800115 	stw	r2,4(sp)
 2002138:	d8000215 	stw	zero,8(sp)
 200213c:	e13fff17 	ldw	r4,-4(fp)
 2002140:	000b883a 	mov	r5,zero
 2002144:	01800104 	movi	r6,4
 2002148:	e1fffd04 	addi	r7,fp,-12
 200214c:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2002150:	e0bffe03 	ldbu	r2,-8(fp)
 2002154:	10803fcc 	andi	r2,r2,255
}
 2002158:	e037883a 	mov	sp,fp
 200215c:	dfc00117 	ldw	ra,4(sp)
 2002160:	df000017 	ldw	fp,0(sp)
 2002164:	dec00204 	addi	sp,sp,8
 2002168:	f800283a 	ret

0200216c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 200216c:	defff904 	addi	sp,sp,-28
 2002170:	dfc00615 	stw	ra,24(sp)
 2002174:	df000515 	stw	fp,20(sp)
 2002178:	df000504 	addi	fp,sp,20
 200217c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2002180:	00bfe7c4 	movi	r2,-97
 2002184:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2002188:	008000c4 	movi	r2,3
 200218c:	d8800015 	stw	r2,0(sp)
 2002190:	e0bffe44 	addi	r2,fp,-7
 2002194:	d8800115 	stw	r2,4(sp)
 2002198:	d8000215 	stw	zero,8(sp)
 200219c:	e13fff17 	ldw	r4,-4(fp)
 20021a0:	000b883a 	mov	r5,zero
 20021a4:	01800044 	movi	r6,1
 20021a8:	e1fffe04 	addi	r7,fp,-8
 20021ac:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 20021b0:	e0bffe43 	ldbu	r2,-7(fp)
 20021b4:	10803fcc 	andi	r2,r2,255
 20021b8:	1006943a 	slli	r3,r2,16
 20021bc:	e0bffe83 	ldbu	r2,-6(fp)
 20021c0:	10803fcc 	andi	r2,r2,255
 20021c4:	1004923a 	slli	r2,r2,8
 20021c8:	1886b03a 	or	r3,r3,r2
 20021cc:	e0bffec3 	ldbu	r2,-5(fp)
 20021d0:	10803fcc 	andi	r2,r2,255
 20021d4:	1884b03a 	or	r2,r3,r2
}
 20021d8:	e037883a 	mov	sp,fp
 20021dc:	dfc00117 	ldw	ra,4(sp)
 20021e0:	df000017 	ldw	fp,0(sp)
 20021e4:	dec00204 	addi	sp,sp,8
 20021e8:	f800283a 	ret

020021ec <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 20021ec:	defff904 	addi	sp,sp,-28
 20021f0:	dfc00615 	stw	ra,24(sp)
 20021f4:	df000515 	stw	fp,20(sp)
 20021f8:	df000504 	addi	fp,sp,20
 20021fc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2002200:	00bfedc4 	movi	r2,-73
 2002204:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2002208:	e13fff17 	ldw	r4,-4(fp)
 200220c:	2001edc0 	call	2001edc <epcs_write_enable>

  alt_avalon_spi_command(
 2002210:	d8000015 	stw	zero,0(sp)
 2002214:	d8000115 	stw	zero,4(sp)
 2002218:	d8000215 	stw	zero,8(sp)
 200221c:	e13fff17 	ldw	r4,-4(fp)
 2002220:	000b883a 	mov	r5,zero
 2002224:	01800044 	movi	r6,1
 2002228:	e1fffe04 	addi	r7,fp,-8
 200222c:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2002230:	e037883a 	mov	sp,fp
 2002234:	dfc00117 	ldw	ra,4(sp)
 2002238:	df000017 	ldw	fp,0(sp)
 200223c:	dec00204 	addi	sp,sp,8
 2002240:	f800283a 	ret

02002244 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2002244:	defff904 	addi	sp,sp,-28
 2002248:	dfc00615 	stw	ra,24(sp)
 200224c:	df000515 	stw	fp,20(sp)
 2002250:	df000504 	addi	fp,sp,20
 2002254:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2002258:	00bffa44 	movi	r2,-23
 200225c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2002260:	e13fff17 	ldw	r4,-4(fp)
 2002264:	2001edc0 	call	2001edc <epcs_write_enable>

  alt_avalon_spi_command(
 2002268:	d8000015 	stw	zero,0(sp)
 200226c:	d8000115 	stw	zero,4(sp)
 2002270:	d8000215 	stw	zero,8(sp)
 2002274:	e13fff17 	ldw	r4,-4(fp)
 2002278:	000b883a 	mov	r5,zero
 200227c:	01800044 	movi	r6,1
 2002280:	e1fffe04 	addi	r7,fp,-8
 2002284:	2002f940 	call	2002f94 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2002288:	e037883a 	mov	sp,fp
 200228c:	dfc00117 	ldw	ra,4(sp)
 2002290:	df000017 	ldw	fp,0(sp)
 2002294:	dec00204 	addi	sp,sp,8
 2002298:	f800283a 	ret

0200229c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200229c:	defff404 	addi	sp,sp,-48
 20022a0:	df000b15 	stw	fp,44(sp)
 20022a4:	df000b04 	addi	fp,sp,44
 20022a8:	e13ffb15 	stw	r4,-20(fp)
 20022ac:	e17ffc15 	stw	r5,-16(fp)
 20022b0:	e1bffd15 	stw	r6,-12(fp)
 20022b4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20022b8:	e03ff915 	stw	zero,-28(fp)
 20022bc:	00808034 	movhi	r2,512
 20022c0:	10947f04 	addi	r2,r2,20988
 20022c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 20022c8:	1005003a 	cmpeq	r2,r2,zero
 20022cc:	1000411e 	bne	r2,zero,20023d4 <alt_alarm_start+0x138>
  {
    if (alarm)
 20022d0:	e0bffb17 	ldw	r2,-20(fp)
 20022d4:	1005003a 	cmpeq	r2,r2,zero
 20022d8:	10003b1e 	bne	r2,zero,20023c8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 20022dc:	e0fffb17 	ldw	r3,-20(fp)
 20022e0:	e0bffd17 	ldw	r2,-12(fp)
 20022e4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 20022e8:	e0fffb17 	ldw	r3,-20(fp)
 20022ec:	e0bffe17 	ldw	r2,-8(fp)
 20022f0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20022f4:	0005303a 	rdctl	r2,status
 20022f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20022fc:	e0fff817 	ldw	r3,-32(fp)
 2002300:	00bfff84 	movi	r2,-2
 2002304:	1884703a 	and	r2,r3,r2
 2002308:	1001703a 	wrctl	status,r2
  
  return context;
 200230c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2002310:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2002314:	00808034 	movhi	r2,512
 2002318:	10948004 	addi	r2,r2,20992
 200231c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2002320:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2002324:	e0fffc17 	ldw	r3,-16(fp)
 2002328:	e0bff917 	ldw	r2,-28(fp)
 200232c:	1885883a 	add	r2,r3,r2
 2002330:	10c00044 	addi	r3,r2,1
 2002334:	e0bffb17 	ldw	r2,-20(fp)
 2002338:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200233c:	e0bffb17 	ldw	r2,-20(fp)
 2002340:	10c00217 	ldw	r3,8(r2)
 2002344:	e0bff917 	ldw	r2,-28(fp)
 2002348:	1880042e 	bgeu	r3,r2,200235c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 200234c:	e0fffb17 	ldw	r3,-20(fp)
 2002350:	00800044 	movi	r2,1
 2002354:	18800405 	stb	r2,16(r3)
 2002358:	00000206 	br	2002364 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 200235c:	e0bffb17 	ldw	r2,-20(fp)
 2002360:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2002364:	e0fffb17 	ldw	r3,-20(fp)
 2002368:	00808034 	movhi	r2,512
 200236c:	10947604 	addi	r2,r2,20952
 2002370:	e0bff615 	stw	r2,-40(fp)
 2002374:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2002378:	e0fff717 	ldw	r3,-36(fp)
 200237c:	e0bff617 	ldw	r2,-40(fp)
 2002380:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2002384:	e0bff617 	ldw	r2,-40(fp)
 2002388:	10c00017 	ldw	r3,0(r2)
 200238c:	e0bff717 	ldw	r2,-36(fp)
 2002390:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2002394:	e0bff617 	ldw	r2,-40(fp)
 2002398:	10c00017 	ldw	r3,0(r2)
 200239c:	e0bff717 	ldw	r2,-36(fp)
 20023a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 20023a4:	e0fff617 	ldw	r3,-40(fp)
 20023a8:	e0bff717 	ldw	r2,-36(fp)
 20023ac:	18800015 	stw	r2,0(r3)
 20023b0:	e0bffa17 	ldw	r2,-24(fp)
 20023b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20023b8:	e0bff517 	ldw	r2,-44(fp)
 20023bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20023c0:	e03fff15 	stw	zero,-4(fp)
 20023c4:	00000506 	br	20023dc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 20023c8:	00bffa84 	movi	r2,-22
 20023cc:	e0bfff15 	stw	r2,-4(fp)
 20023d0:	00000206 	br	20023dc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 20023d4:	00bfde84 	movi	r2,-134
 20023d8:	e0bfff15 	stw	r2,-4(fp)
 20023dc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 20023e0:	e037883a 	mov	sp,fp
 20023e4:	df000017 	ldw	fp,0(sp)
 20023e8:	dec00104 	addi	sp,sp,4
 20023ec:	f800283a 	ret

020023f0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 20023f0:	defffa04 	addi	sp,sp,-24
 20023f4:	dfc00515 	stw	ra,20(sp)
 20023f8:	df000415 	stw	fp,16(sp)
 20023fc:	df000404 	addi	fp,sp,16
 2002400:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 2002404:	008000c4 	movi	r2,3
 2002408:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 200240c:	e0fffc17 	ldw	r3,-16(fp)
 2002410:	008003f4 	movhi	r2,15
 2002414:	10909004 	addi	r2,r2,16960
 2002418:	188b383a 	mul	r5,r3,r2
 200241c:	01017db4 	movhi	r4,1526
 2002420:	21384004 	addi	r4,r4,-7936
 2002424:	2003a300 	call	2003a30 <__udivsi3>
 2002428:	100b883a 	mov	r5,r2
 200242c:	01200034 	movhi	r4,32768
 2002430:	213fffc4 	addi	r4,r4,-1
 2002434:	2003a300 	call	2003a30 <__udivsi3>
 2002438:	100b883a 	mov	r5,r2
 200243c:	e13fff17 	ldw	r4,-4(fp)
 2002440:	2003a300 	call	2003a30 <__udivsi3>
 2002444:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2002448:	e0bffd17 	ldw	r2,-12(fp)
 200244c:	1005003a 	cmpeq	r2,r2,zero
 2002450:	1000281e 	bne	r2,zero,20024f4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 2002454:	e03ffe15 	stw	zero,-8(fp)
 2002458:	00001606 	br	20024b4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200245c:	00a00034 	movhi	r2,32768
 2002460:	10bfffc4 	addi	r2,r2,-1
 2002464:	10bfffc4 	addi	r2,r2,-1
 2002468:	103ffe1e 	bne	r2,zero,2002464 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200246c:	e0fffc17 	ldw	r3,-16(fp)
 2002470:	008003f4 	movhi	r2,15
 2002474:	10909004 	addi	r2,r2,16960
 2002478:	188b383a 	mul	r5,r3,r2
 200247c:	01017db4 	movhi	r4,1526
 2002480:	21384004 	addi	r4,r4,-7936
 2002484:	2003a300 	call	2003a30 <__udivsi3>
 2002488:	100b883a 	mov	r5,r2
 200248c:	01200034 	movhi	r4,32768
 2002490:	213fffc4 	addi	r4,r4,-1
 2002494:	2003a300 	call	2003a30 <__udivsi3>
 2002498:	1007883a 	mov	r3,r2
 200249c:	e0bfff17 	ldw	r2,-4(fp)
 20024a0:	10c5c83a 	sub	r2,r2,r3
 20024a4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 20024a8:	e0bffe17 	ldw	r2,-8(fp)
 20024ac:	10800044 	addi	r2,r2,1
 20024b0:	e0bffe15 	stw	r2,-8(fp)
 20024b4:	e0fffe17 	ldw	r3,-8(fp)
 20024b8:	e0bffd17 	ldw	r2,-12(fp)
 20024bc:	18bfe716 	blt	r3,r2,200245c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 20024c0:	e0fffc17 	ldw	r3,-16(fp)
 20024c4:	008003f4 	movhi	r2,15
 20024c8:	10909004 	addi	r2,r2,16960
 20024cc:	188b383a 	mul	r5,r3,r2
 20024d0:	01017db4 	movhi	r4,1526
 20024d4:	21384004 	addi	r4,r4,-7936
 20024d8:	2003a300 	call	2003a30 <__udivsi3>
 20024dc:	1007883a 	mov	r3,r2
 20024e0:	e0bfff17 	ldw	r2,-4(fp)
 20024e4:	1885383a 	mul	r2,r3,r2
 20024e8:	10bfffc4 	addi	r2,r2,-1
 20024ec:	103ffe1e 	bne	r2,zero,20024e8 <alt_busy_sleep+0xf8>
 20024f0:	00000c06 	br	2002524 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 20024f4:	e0fffc17 	ldw	r3,-16(fp)
 20024f8:	008003f4 	movhi	r2,15
 20024fc:	10909004 	addi	r2,r2,16960
 2002500:	188b383a 	mul	r5,r3,r2
 2002504:	01017db4 	movhi	r4,1526
 2002508:	21384004 	addi	r4,r4,-7936
 200250c:	2003a300 	call	2003a30 <__udivsi3>
 2002510:	1007883a 	mov	r3,r2
 2002514:	e0bfff17 	ldw	r2,-4(fp)
 2002518:	1885383a 	mul	r2,r3,r2
 200251c:	10bfffc4 	addi	r2,r2,-1
 2002520:	00bffe16 	blt	zero,r2,200251c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 2002524:	0005883a 	mov	r2,zero
}
 2002528:	e037883a 	mov	sp,fp
 200252c:	dfc00117 	ldw	ra,4(sp)
 2002530:	df000017 	ldw	fp,0(sp)
 2002534:	dec00204 	addi	sp,sp,8
 2002538:	f800283a 	ret

0200253c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200253c:	defff804 	addi	sp,sp,-32
 2002540:	dfc00715 	stw	ra,28(sp)
 2002544:	df000615 	stw	fp,24(sp)
 2002548:	df000604 	addi	fp,sp,24
 200254c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002550:	e0bffc17 	ldw	r2,-16(fp)
 2002554:	1004803a 	cmplt	r2,r2,zero
 2002558:	1000081e 	bne	r2,zero,200257c <close+0x40>
 200255c:	e0bffc17 	ldw	r2,-16(fp)
 2002560:	10800324 	muli	r2,r2,12
 2002564:	1007883a 	mov	r3,r2
 2002568:	00808034 	movhi	r2,512
 200256c:	10930d04 	addi	r2,r2,19508
 2002570:	1887883a 	add	r3,r3,r2
 2002574:	e0ffff15 	stw	r3,-4(fp)
 2002578:	00000106 	br	2002580 <close+0x44>
 200257c:	e03fff15 	stw	zero,-4(fp)
 2002580:	e0bfff17 	ldw	r2,-4(fp)
 2002584:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2002588:	e0bffb17 	ldw	r2,-20(fp)
 200258c:	1005003a 	cmpeq	r2,r2,zero
 2002590:	10001d1e 	bne	r2,zero,2002608 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002594:	e0bffb17 	ldw	r2,-20(fp)
 2002598:	10800017 	ldw	r2,0(r2)
 200259c:	10800417 	ldw	r2,16(r2)
 20025a0:	1005003a 	cmpeq	r2,r2,zero
 20025a4:	1000071e 	bne	r2,zero,20025c4 <close+0x88>
 20025a8:	e0bffb17 	ldw	r2,-20(fp)
 20025ac:	10800017 	ldw	r2,0(r2)
 20025b0:	10800417 	ldw	r2,16(r2)
 20025b4:	e13ffb17 	ldw	r4,-20(fp)
 20025b8:	103ee83a 	callr	r2
 20025bc:	e0bffe15 	stw	r2,-8(fp)
 20025c0:	00000106 	br	20025c8 <close+0x8c>
 20025c4:	e03ffe15 	stw	zero,-8(fp)
 20025c8:	e0bffe17 	ldw	r2,-8(fp)
 20025cc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20025d0:	e13ffc17 	ldw	r4,-16(fp)
 20025d4:	2002d700 	call	2002d70 <alt_release_fd>
    if (rval < 0)
 20025d8:	e0bffa17 	ldw	r2,-24(fp)
 20025dc:	1004403a 	cmpge	r2,r2,zero
 20025e0:	1000071e 	bne	r2,zero,2002600 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 20025e4:	20026380 	call	2002638 <alt_get_errno>
 20025e8:	e0fffa17 	ldw	r3,-24(fp)
 20025ec:	00c7c83a 	sub	r3,zero,r3
 20025f0:	10c00015 	stw	r3,0(r2)
      return -1;
 20025f4:	00bfffc4 	movi	r2,-1
 20025f8:	e0bffd15 	stw	r2,-12(fp)
 20025fc:	00000806 	br	2002620 <close+0xe4>
    }
    return 0;
 2002600:	e03ffd15 	stw	zero,-12(fp)
 2002604:	00000606 	br	2002620 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002608:	20026380 	call	2002638 <alt_get_errno>
 200260c:	1007883a 	mov	r3,r2
 2002610:	00801444 	movi	r2,81
 2002614:	18800015 	stw	r2,0(r3)
    return -1;
 2002618:	00bfffc4 	movi	r2,-1
 200261c:	e0bffd15 	stw	r2,-12(fp)
 2002620:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2002624:	e037883a 	mov	sp,fp
 2002628:	dfc00117 	ldw	ra,4(sp)
 200262c:	df000017 	ldw	fp,0(sp)
 2002630:	dec00204 	addi	sp,sp,8
 2002634:	f800283a 	ret

02002638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002638:	defffd04 	addi	sp,sp,-12
 200263c:	dfc00215 	stw	ra,8(sp)
 2002640:	df000115 	stw	fp,4(sp)
 2002644:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002648:	00808034 	movhi	r2,512
 200264c:	10947304 	addi	r2,r2,20940
 2002650:	10800017 	ldw	r2,0(r2)
 2002654:	1005003a 	cmpeq	r2,r2,zero
 2002658:	1000061e 	bne	r2,zero,2002674 <alt_get_errno+0x3c>
 200265c:	00808034 	movhi	r2,512
 2002660:	10947304 	addi	r2,r2,20940
 2002664:	10800017 	ldw	r2,0(r2)
 2002668:	103ee83a 	callr	r2
 200266c:	e0bfff15 	stw	r2,-4(fp)
 2002670:	00000306 	br	2002680 <alt_get_errno+0x48>
 2002674:	00808034 	movhi	r2,512
 2002678:	10948104 	addi	r2,r2,20996
 200267c:	e0bfff15 	stw	r2,-4(fp)
 2002680:	e0bfff17 	ldw	r2,-4(fp)
}
 2002684:	e037883a 	mov	sp,fp
 2002688:	dfc00117 	ldw	ra,4(sp)
 200268c:	df000017 	ldw	fp,0(sp)
 2002690:	dec00204 	addi	sp,sp,8
 2002694:	f800283a 	ret

02002698 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2002698:	defffc04 	addi	sp,sp,-16
 200269c:	df000315 	stw	fp,12(sp)
 20026a0:	df000304 	addi	fp,sp,12
 20026a4:	e13ffd15 	stw	r4,-12(fp)
 20026a8:	e17ffe15 	stw	r5,-8(fp)
 20026ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
 20026b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20026b4:	e037883a 	mov	sp,fp
 20026b8:	df000017 	ldw	fp,0(sp)
 20026bc:	dec00104 	addi	sp,sp,4
 20026c0:	f800283a 	ret

020026c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20026c4:	defff904 	addi	sp,sp,-28
 20026c8:	dfc00615 	stw	ra,24(sp)
 20026cc:	df000515 	stw	fp,20(sp)
 20026d0:	df000504 	addi	fp,sp,20
 20026d4:	e13ffd15 	stw	r4,-12(fp)
 20026d8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20026dc:	e0bffd17 	ldw	r2,-12(fp)
 20026e0:	1005003a 	cmpeq	r2,r2,zero
 20026e4:	1000041e 	bne	r2,zero,20026f8 <alt_dev_llist_insert+0x34>
 20026e8:	e0bffd17 	ldw	r2,-12(fp)
 20026ec:	10800217 	ldw	r2,8(r2)
 20026f0:	1004c03a 	cmpne	r2,r2,zero
 20026f4:	1000071e 	bne	r2,zero,2002714 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 20026f8:	20027780 	call	2002778 <alt_get_errno>
 20026fc:	1007883a 	mov	r3,r2
 2002700:	00800584 	movi	r2,22
 2002704:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2002708:	00bffa84 	movi	r2,-22
 200270c:	e0bfff15 	stw	r2,-4(fp)
 2002710:	00001306 	br	2002760 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2002714:	e0fffd17 	ldw	r3,-12(fp)
 2002718:	e0bffe17 	ldw	r2,-8(fp)
 200271c:	e0bffb15 	stw	r2,-20(fp)
 2002720:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2002724:	e0fffc17 	ldw	r3,-16(fp)
 2002728:	e0bffb17 	ldw	r2,-20(fp)
 200272c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2002730:	e0bffb17 	ldw	r2,-20(fp)
 2002734:	10c00017 	ldw	r3,0(r2)
 2002738:	e0bffc17 	ldw	r2,-16(fp)
 200273c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2002740:	e0bffb17 	ldw	r2,-20(fp)
 2002744:	10c00017 	ldw	r3,0(r2)
 2002748:	e0bffc17 	ldw	r2,-16(fp)
 200274c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2002750:	e0fffb17 	ldw	r3,-20(fp)
 2002754:	e0bffc17 	ldw	r2,-16(fp)
 2002758:	18800015 	stw	r2,0(r3)

  return 0;  
 200275c:	e03fff15 	stw	zero,-4(fp)
 2002760:	e0bfff17 	ldw	r2,-4(fp)
}
 2002764:	e037883a 	mov	sp,fp
 2002768:	dfc00117 	ldw	ra,4(sp)
 200276c:	df000017 	ldw	fp,0(sp)
 2002770:	dec00204 	addi	sp,sp,8
 2002774:	f800283a 	ret

02002778 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002778:	defffd04 	addi	sp,sp,-12
 200277c:	dfc00215 	stw	ra,8(sp)
 2002780:	df000115 	stw	fp,4(sp)
 2002784:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002788:	00808034 	movhi	r2,512
 200278c:	10947304 	addi	r2,r2,20940
 2002790:	10800017 	ldw	r2,0(r2)
 2002794:	1005003a 	cmpeq	r2,r2,zero
 2002798:	1000061e 	bne	r2,zero,20027b4 <alt_get_errno+0x3c>
 200279c:	00808034 	movhi	r2,512
 20027a0:	10947304 	addi	r2,r2,20940
 20027a4:	10800017 	ldw	r2,0(r2)
 20027a8:	103ee83a 	callr	r2
 20027ac:	e0bfff15 	stw	r2,-4(fp)
 20027b0:	00000306 	br	20027c0 <alt_get_errno+0x48>
 20027b4:	00808034 	movhi	r2,512
 20027b8:	10948104 	addi	r2,r2,20996
 20027bc:	e0bfff15 	stw	r2,-4(fp)
 20027c0:	e0bfff17 	ldw	r2,-4(fp)
}
 20027c4:	e037883a 	mov	sp,fp
 20027c8:	dfc00117 	ldw	ra,4(sp)
 20027cc:	df000017 	ldw	fp,0(sp)
 20027d0:	dec00204 	addi	sp,sp,8
 20027d4:	f800283a 	ret

020027d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20027d8:	defffd04 	addi	sp,sp,-12
 20027dc:	dfc00215 	stw	ra,8(sp)
 20027e0:	df000115 	stw	fp,4(sp)
 20027e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20027e8:	00bfff04 	movi	r2,-4
 20027ec:	00c08034 	movhi	r3,512
 20027f0:	18cea904 	addi	r3,r3,15012
 20027f4:	1885883a 	add	r2,r3,r2
 20027f8:	e0bfff15 	stw	r2,-4(fp)
 20027fc:	00000606 	br	2002818 <_do_ctors+0x40>
        (*ctor) (); 
 2002800:	e0bfff17 	ldw	r2,-4(fp)
 2002804:	10800017 	ldw	r2,0(r2)
 2002808:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200280c:	e0bfff17 	ldw	r2,-4(fp)
 2002810:	10bfff04 	addi	r2,r2,-4
 2002814:	e0bfff15 	stw	r2,-4(fp)
 2002818:	e0ffff17 	ldw	r3,-4(fp)
 200281c:	00808034 	movhi	r2,512
 2002820:	108ea804 	addi	r2,r2,15008
 2002824:	18bff62e 	bgeu	r3,r2,2002800 <_do_ctors+0x28>
        (*ctor) (); 
}
 2002828:	e037883a 	mov	sp,fp
 200282c:	dfc00117 	ldw	ra,4(sp)
 2002830:	df000017 	ldw	fp,0(sp)
 2002834:	dec00204 	addi	sp,sp,8
 2002838:	f800283a 	ret

0200283c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200283c:	defffd04 	addi	sp,sp,-12
 2002840:	dfc00215 	stw	ra,8(sp)
 2002844:	df000115 	stw	fp,4(sp)
 2002848:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200284c:	00bfff04 	movi	r2,-4
 2002850:	00c08034 	movhi	r3,512
 2002854:	18cea904 	addi	r3,r3,15012
 2002858:	1885883a 	add	r2,r3,r2
 200285c:	e0bfff15 	stw	r2,-4(fp)
 2002860:	00000606 	br	200287c <_do_dtors+0x40>
        (*dtor) (); 
 2002864:	e0bfff17 	ldw	r2,-4(fp)
 2002868:	10800017 	ldw	r2,0(r2)
 200286c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2002870:	e0bfff17 	ldw	r2,-4(fp)
 2002874:	10bfff04 	addi	r2,r2,-4
 2002878:	e0bfff15 	stw	r2,-4(fp)
 200287c:	e0ffff17 	ldw	r3,-4(fp)
 2002880:	00808034 	movhi	r2,512
 2002884:	108ea904 	addi	r2,r2,15012
 2002888:	18bff62e 	bgeu	r3,r2,2002864 <_do_dtors+0x28>
        (*dtor) (); 
}
 200288c:	e037883a 	mov	sp,fp
 2002890:	dfc00117 	ldw	ra,4(sp)
 2002894:	df000017 	ldw	fp,0(sp)
 2002898:	dec00204 	addi	sp,sp,8
 200289c:	f800283a 	ret

020028a0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 20028a0:	defffb04 	addi	sp,sp,-20
 20028a4:	dfc00415 	stw	ra,16(sp)
 20028a8:	df000315 	stw	fp,12(sp)
 20028ac:	df000304 	addi	fp,sp,12
 20028b0:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 20028b4:	e13ffe17 	ldw	r4,-8(fp)
 20028b8:	d1600704 	addi	r5,gp,-32740
 20028bc:	20031cc0 	call	20031cc <alt_find_dev>
 20028c0:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 20028c4:	e0bffd17 	ldw	r2,-12(fp)
 20028c8:	1005003a 	cmpeq	r2,r2,zero
 20028cc:	10000b1e 	bne	r2,zero,20028fc <alt_flash_open_dev+0x5c>
 20028d0:	e0bffd17 	ldw	r2,-12(fp)
 20028d4:	10800317 	ldw	r2,12(r2)
 20028d8:	1005003a 	cmpeq	r2,r2,zero
 20028dc:	1000071e 	bne	r2,zero,20028fc <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 20028e0:	e0bffd17 	ldw	r2,-12(fp)
 20028e4:	10800317 	ldw	r2,12(r2)
 20028e8:	e13ffd17 	ldw	r4,-12(fp)
 20028ec:	e17ffe17 	ldw	r5,-8(fp)
 20028f0:	103ee83a 	callr	r2
 20028f4:	e0bfff15 	stw	r2,-4(fp)
 20028f8:	00000206 	br	2002904 <alt_flash_open_dev+0x64>
  }

  return dev;
 20028fc:	e0bffd17 	ldw	r2,-12(fp)
 2002900:	e0bfff15 	stw	r2,-4(fp)
 2002904:	e0bfff17 	ldw	r2,-4(fp)
}
 2002908:	e037883a 	mov	sp,fp
 200290c:	dfc00117 	ldw	ra,4(sp)
 2002910:	df000017 	ldw	fp,0(sp)
 2002914:	dec00204 	addi	sp,sp,8
 2002918:	f800283a 	ret

0200291c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 200291c:	defffd04 	addi	sp,sp,-12
 2002920:	dfc00215 	stw	ra,8(sp)
 2002924:	df000115 	stw	fp,4(sp)
 2002928:	df000104 	addi	fp,sp,4
 200292c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2002930:	e0bfff17 	ldw	r2,-4(fp)
 2002934:	1005003a 	cmpeq	r2,r2,zero
 2002938:	1000081e 	bne	r2,zero,200295c <alt_flash_close_dev+0x40>
 200293c:	e0bfff17 	ldw	r2,-4(fp)
 2002940:	10800417 	ldw	r2,16(r2)
 2002944:	1005003a 	cmpeq	r2,r2,zero
 2002948:	1000041e 	bne	r2,zero,200295c <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 200294c:	e0bfff17 	ldw	r2,-4(fp)
 2002950:	10800417 	ldw	r2,16(r2)
 2002954:	e13fff17 	ldw	r4,-4(fp)
 2002958:	103ee83a 	callr	r2
  }
  return;
}
 200295c:	e037883a 	mov	sp,fp
 2002960:	dfc00117 	ldw	ra,4(sp)
 2002964:	df000017 	ldw	fp,0(sp)
 2002968:	dec00204 	addi	sp,sp,8
 200296c:	f800283a 	ret

02002970 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2002970:	defff904 	addi	sp,sp,-28
 2002974:	dfc00615 	stw	ra,24(sp)
 2002978:	df000515 	stw	fp,20(sp)
 200297c:	df000504 	addi	fp,sp,20
 2002980:	e13ffc15 	stw	r4,-16(fp)
 2002984:	e17ffd15 	stw	r5,-12(fp)
 2002988:	e1bffe15 	stw	r6,-8(fp)
 200298c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2002990:	e13ffd17 	ldw	r4,-12(fp)
 2002994:	e17ffe17 	ldw	r5,-8(fp)
 2002998:	e1bfff17 	ldw	r6,-4(fp)
 200299c:	2002b880 	call	2002b88 <open>
 20029a0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20029a4:	e0bffb17 	ldw	r2,-20(fp)
 20029a8:	1004803a 	cmplt	r2,r2,zero
 20029ac:	10001c1e 	bne	r2,zero,2002a20 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 20029b0:	e0bffb17 	ldw	r2,-20(fp)
 20029b4:	00c08034 	movhi	r3,512
 20029b8:	18d30d04 	addi	r3,r3,19508
 20029bc:	10800324 	muli	r2,r2,12
 20029c0:	10c5883a 	add	r2,r2,r3
 20029c4:	10c00017 	ldw	r3,0(r2)
 20029c8:	e0bffc17 	ldw	r2,-16(fp)
 20029cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20029d0:	e0bffb17 	ldw	r2,-20(fp)
 20029d4:	00c08034 	movhi	r3,512
 20029d8:	18d30d04 	addi	r3,r3,19508
 20029dc:	10800324 	muli	r2,r2,12
 20029e0:	10c5883a 	add	r2,r2,r3
 20029e4:	10800104 	addi	r2,r2,4
 20029e8:	10c00017 	ldw	r3,0(r2)
 20029ec:	e0bffc17 	ldw	r2,-16(fp)
 20029f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20029f4:	e0bffb17 	ldw	r2,-20(fp)
 20029f8:	00c08034 	movhi	r3,512
 20029fc:	18d30d04 	addi	r3,r3,19508
 2002a00:	10800324 	muli	r2,r2,12
 2002a04:	10c5883a 	add	r2,r2,r3
 2002a08:	10800204 	addi	r2,r2,8
 2002a0c:	10c00017 	ldw	r3,0(r2)
 2002a10:	e0bffc17 	ldw	r2,-16(fp)
 2002a14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2002a18:	e13ffb17 	ldw	r4,-20(fp)
 2002a1c:	2002d700 	call	2002d70 <alt_release_fd>
  }
} 
 2002a20:	e037883a 	mov	sp,fp
 2002a24:	dfc00117 	ldw	ra,4(sp)
 2002a28:	df000017 	ldw	fp,0(sp)
 2002a2c:	dec00204 	addi	sp,sp,8
 2002a30:	f800283a 	ret

02002a34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2002a34:	defffb04 	addi	sp,sp,-20
 2002a38:	dfc00415 	stw	ra,16(sp)
 2002a3c:	df000315 	stw	fp,12(sp)
 2002a40:	df000304 	addi	fp,sp,12
 2002a44:	e13ffd15 	stw	r4,-12(fp)
 2002a48:	e17ffe15 	stw	r5,-8(fp)
 2002a4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2002a50:	01008034 	movhi	r4,512
 2002a54:	21131004 	addi	r4,r4,19520
 2002a58:	e17ffd17 	ldw	r5,-12(fp)
 2002a5c:	01800044 	movi	r6,1
 2002a60:	01c07fc4 	movi	r7,511
 2002a64:	20029700 	call	2002970 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2002a68:	01008034 	movhi	r4,512
 2002a6c:	21130d04 	addi	r4,r4,19508
 2002a70:	e17ffe17 	ldw	r5,-8(fp)
 2002a74:	000d883a 	mov	r6,zero
 2002a78:	01c07fc4 	movi	r7,511
 2002a7c:	20029700 	call	2002970 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2002a80:	01008034 	movhi	r4,512
 2002a84:	21131304 	addi	r4,r4,19532
 2002a88:	e17fff17 	ldw	r5,-4(fp)
 2002a8c:	01800044 	movi	r6,1
 2002a90:	01c07fc4 	movi	r7,511
 2002a94:	20029700 	call	2002970 <alt_open_fd>
}  
 2002a98:	e037883a 	mov	sp,fp
 2002a9c:	dfc00117 	ldw	ra,4(sp)
 2002aa0:	df000017 	ldw	fp,0(sp)
 2002aa4:	dec00204 	addi	sp,sp,8
 2002aa8:	f800283a 	ret

02002aac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2002aac:	defffc04 	addi	sp,sp,-16
 2002ab0:	df000315 	stw	fp,12(sp)
 2002ab4:	df000304 	addi	fp,sp,12
 2002ab8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2002abc:	e0bffe17 	ldw	r2,-8(fp)
 2002ac0:	10800217 	ldw	r2,8(r2)
 2002ac4:	10d00034 	orhi	r3,r2,16384
 2002ac8:	e0bffe17 	ldw	r2,-8(fp)
 2002acc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2002ad0:	e03ffd15 	stw	zero,-12(fp)
 2002ad4:	00002006 	br	2002b58 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2002ad8:	e0bffd17 	ldw	r2,-12(fp)
 2002adc:	00c08034 	movhi	r3,512
 2002ae0:	18d30d04 	addi	r3,r3,19508
 2002ae4:	10800324 	muli	r2,r2,12
 2002ae8:	10c5883a 	add	r2,r2,r3
 2002aec:	10c00017 	ldw	r3,0(r2)
 2002af0:	e0bffe17 	ldw	r2,-8(fp)
 2002af4:	10800017 	ldw	r2,0(r2)
 2002af8:	1880141e 	bne	r3,r2,2002b4c <alt_file_locked+0xa0>
 2002afc:	e0bffd17 	ldw	r2,-12(fp)
 2002b00:	00c08034 	movhi	r3,512
 2002b04:	18d30d04 	addi	r3,r3,19508
 2002b08:	10800324 	muli	r2,r2,12
 2002b0c:	10c5883a 	add	r2,r2,r3
 2002b10:	10800204 	addi	r2,r2,8
 2002b14:	10800017 	ldw	r2,0(r2)
 2002b18:	1004403a 	cmpge	r2,r2,zero
 2002b1c:	10000b1e 	bne	r2,zero,2002b4c <alt_file_locked+0xa0>
 2002b20:	e0bffd17 	ldw	r2,-12(fp)
 2002b24:	10800324 	muli	r2,r2,12
 2002b28:	1007883a 	mov	r3,r2
 2002b2c:	00808034 	movhi	r2,512
 2002b30:	10930d04 	addi	r2,r2,19508
 2002b34:	1887883a 	add	r3,r3,r2
 2002b38:	e0bffe17 	ldw	r2,-8(fp)
 2002b3c:	18800326 	beq	r3,r2,2002b4c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2002b40:	00bffcc4 	movi	r2,-13
 2002b44:	e0bfff15 	stw	r2,-4(fp)
 2002b48:	00000a06 	br	2002b74 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2002b4c:	e0bffd17 	ldw	r2,-12(fp)
 2002b50:	10800044 	addi	r2,r2,1
 2002b54:	e0bffd15 	stw	r2,-12(fp)
 2002b58:	00808034 	movhi	r2,512
 2002b5c:	10947204 	addi	r2,r2,20936
 2002b60:	10800017 	ldw	r2,0(r2)
 2002b64:	1007883a 	mov	r3,r2
 2002b68:	e0bffd17 	ldw	r2,-12(fp)
 2002b6c:	18bfda2e 	bgeu	r3,r2,2002ad8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2002b70:	e03fff15 	stw	zero,-4(fp)
 2002b74:	e0bfff17 	ldw	r2,-4(fp)
}
 2002b78:	e037883a 	mov	sp,fp
 2002b7c:	df000017 	ldw	fp,0(sp)
 2002b80:	dec00104 	addi	sp,sp,4
 2002b84:	f800283a 	ret

02002b88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2002b88:	defff404 	addi	sp,sp,-48
 2002b8c:	dfc00b15 	stw	ra,44(sp)
 2002b90:	df000a15 	stw	fp,40(sp)
 2002b94:	df000a04 	addi	fp,sp,40
 2002b98:	e13ffb15 	stw	r4,-20(fp)
 2002b9c:	e17ffc15 	stw	r5,-16(fp)
 2002ba0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2002ba4:	00bfffc4 	movi	r2,-1
 2002ba8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2002bac:	00bffb44 	movi	r2,-19
 2002bb0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2002bb4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2002bb8:	e13ffb17 	ldw	r4,-20(fp)
 2002bbc:	01408034 	movhi	r5,512
 2002bc0:	29547004 	addi	r5,r5,20928
 2002bc4:	20031cc0 	call	20031cc <alt_find_dev>
 2002bc8:	e0bffa15 	stw	r2,-24(fp)
 2002bcc:	e0bffa17 	ldw	r2,-24(fp)
 2002bd0:	1004c03a 	cmpne	r2,r2,zero
 2002bd4:	1000051e 	bne	r2,zero,2002bec <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2002bd8:	e13ffb17 	ldw	r4,-20(fp)
 2002bdc:	20032600 	call	2003260 <alt_find_file>
 2002be0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2002be4:	00800044 	movi	r2,1
 2002be8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2002bec:	e0bffa17 	ldw	r2,-24(fp)
 2002bf0:	1005003a 	cmpeq	r2,r2,zero
 2002bf4:	1000301e 	bne	r2,zero,2002cb8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2002bf8:	e13ffa17 	ldw	r4,-24(fp)
 2002bfc:	20033800 	call	2003380 <alt_get_fd>
 2002c00:	e0bff815 	stw	r2,-32(fp)
 2002c04:	e0bff817 	ldw	r2,-32(fp)
 2002c08:	1004403a 	cmpge	r2,r2,zero
 2002c0c:	1000031e 	bne	r2,zero,2002c1c <open+0x94>
    {
      status = index;
 2002c10:	e0bff817 	ldw	r2,-32(fp)
 2002c14:	e0bff715 	stw	r2,-36(fp)
 2002c18:	00002906 	br	2002cc0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 2002c1c:	e0bff817 	ldw	r2,-32(fp)
 2002c20:	10800324 	muli	r2,r2,12
 2002c24:	1007883a 	mov	r3,r2
 2002c28:	00808034 	movhi	r2,512
 2002c2c:	10930d04 	addi	r2,r2,19508
 2002c30:	1885883a 	add	r2,r3,r2
 2002c34:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2002c38:	e0fffc17 	ldw	r3,-16(fp)
 2002c3c:	00900034 	movhi	r2,16384
 2002c40:	10bfffc4 	addi	r2,r2,-1
 2002c44:	1886703a 	and	r3,r3,r2
 2002c48:	e0bff917 	ldw	r2,-28(fp)
 2002c4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2002c50:	e0bff617 	ldw	r2,-40(fp)
 2002c54:	1004c03a 	cmpne	r2,r2,zero
 2002c58:	1000061e 	bne	r2,zero,2002c74 <open+0xec>
 2002c5c:	e13ff917 	ldw	r4,-28(fp)
 2002c60:	2002aac0 	call	2002aac <alt_file_locked>
 2002c64:	e0bff715 	stw	r2,-36(fp)
 2002c68:	e0bff717 	ldw	r2,-36(fp)
 2002c6c:	1004803a 	cmplt	r2,r2,zero
 2002c70:	1000131e 	bne	r2,zero,2002cc0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2002c74:	e0bffa17 	ldw	r2,-24(fp)
 2002c78:	10800317 	ldw	r2,12(r2)
 2002c7c:	1005003a 	cmpeq	r2,r2,zero
 2002c80:	1000091e 	bne	r2,zero,2002ca8 <open+0x120>
 2002c84:	e0bffa17 	ldw	r2,-24(fp)
 2002c88:	10800317 	ldw	r2,12(r2)
 2002c8c:	e13ff917 	ldw	r4,-28(fp)
 2002c90:	e17ffb17 	ldw	r5,-20(fp)
 2002c94:	e1bffc17 	ldw	r6,-16(fp)
 2002c98:	e1fffd17 	ldw	r7,-12(fp)
 2002c9c:	103ee83a 	callr	r2
 2002ca0:	e0bfff15 	stw	r2,-4(fp)
 2002ca4:	00000106 	br	2002cac <open+0x124>
 2002ca8:	e03fff15 	stw	zero,-4(fp)
 2002cac:	e0bfff17 	ldw	r2,-4(fp)
 2002cb0:	e0bff715 	stw	r2,-36(fp)
 2002cb4:	00000206 	br	2002cc0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2002cb8:	00bffb44 	movi	r2,-19
 2002cbc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2002cc0:	e0bff717 	ldw	r2,-36(fp)
 2002cc4:	1004403a 	cmpge	r2,r2,zero
 2002cc8:	1000091e 	bne	r2,zero,2002cf0 <open+0x168>
  {
    alt_release_fd (index);  
 2002ccc:	e13ff817 	ldw	r4,-32(fp)
 2002cd0:	2002d700 	call	2002d70 <alt_release_fd>
    ALT_ERRNO = -status;
 2002cd4:	2002d100 	call	2002d10 <alt_get_errno>
 2002cd8:	e0fff717 	ldw	r3,-36(fp)
 2002cdc:	00c7c83a 	sub	r3,zero,r3
 2002ce0:	10c00015 	stw	r3,0(r2)
    return -1;
 2002ce4:	00bfffc4 	movi	r2,-1
 2002ce8:	e0bffe15 	stw	r2,-8(fp)
 2002cec:	00000206 	br	2002cf8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 2002cf0:	e0bff817 	ldw	r2,-32(fp)
 2002cf4:	e0bffe15 	stw	r2,-8(fp)
 2002cf8:	e0bffe17 	ldw	r2,-8(fp)
}
 2002cfc:	e037883a 	mov	sp,fp
 2002d00:	dfc00117 	ldw	ra,4(sp)
 2002d04:	df000017 	ldw	fp,0(sp)
 2002d08:	dec00204 	addi	sp,sp,8
 2002d0c:	f800283a 	ret

02002d10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002d10:	defffd04 	addi	sp,sp,-12
 2002d14:	dfc00215 	stw	ra,8(sp)
 2002d18:	df000115 	stw	fp,4(sp)
 2002d1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002d20:	00808034 	movhi	r2,512
 2002d24:	10947304 	addi	r2,r2,20940
 2002d28:	10800017 	ldw	r2,0(r2)
 2002d2c:	1005003a 	cmpeq	r2,r2,zero
 2002d30:	1000061e 	bne	r2,zero,2002d4c <alt_get_errno+0x3c>
 2002d34:	00808034 	movhi	r2,512
 2002d38:	10947304 	addi	r2,r2,20940
 2002d3c:	10800017 	ldw	r2,0(r2)
 2002d40:	103ee83a 	callr	r2
 2002d44:	e0bfff15 	stw	r2,-4(fp)
 2002d48:	00000306 	br	2002d58 <alt_get_errno+0x48>
 2002d4c:	00808034 	movhi	r2,512
 2002d50:	10948104 	addi	r2,r2,20996
 2002d54:	e0bfff15 	stw	r2,-4(fp)
 2002d58:	e0bfff17 	ldw	r2,-4(fp)
}
 2002d5c:	e037883a 	mov	sp,fp
 2002d60:	dfc00117 	ldw	ra,4(sp)
 2002d64:	df000017 	ldw	fp,0(sp)
 2002d68:	dec00204 	addi	sp,sp,8
 2002d6c:	f800283a 	ret

02002d70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2002d70:	defffe04 	addi	sp,sp,-8
 2002d74:	df000115 	stw	fp,4(sp)
 2002d78:	df000104 	addi	fp,sp,4
 2002d7c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2002d80:	e0bfff17 	ldw	r2,-4(fp)
 2002d84:	108000d0 	cmplti	r2,r2,3
 2002d88:	10000d1e 	bne	r2,zero,2002dc0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2002d8c:	e0bfff17 	ldw	r2,-4(fp)
 2002d90:	00c08034 	movhi	r3,512
 2002d94:	18d30d04 	addi	r3,r3,19508
 2002d98:	10800324 	muli	r2,r2,12
 2002d9c:	10c5883a 	add	r2,r2,r3
 2002da0:	10800204 	addi	r2,r2,8
 2002da4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2002da8:	e0bfff17 	ldw	r2,-4(fp)
 2002dac:	00c08034 	movhi	r3,512
 2002db0:	18d30d04 	addi	r3,r3,19508
 2002db4:	10800324 	muli	r2,r2,12
 2002db8:	10c5883a 	add	r2,r2,r3
 2002dbc:	10000015 	stw	zero,0(r2)
  }
}
 2002dc0:	e037883a 	mov	sp,fp
 2002dc4:	df000017 	ldw	fp,0(sp)
 2002dc8:	dec00104 	addi	sp,sp,4
 2002dcc:	f800283a 	ret

02002dd0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2002dd0:	defffa04 	addi	sp,sp,-24
 2002dd4:	df000515 	stw	fp,20(sp)
 2002dd8:	df000504 	addi	fp,sp,20
 2002ddc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002de0:	0005303a 	rdctl	r2,status
 2002de4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002de8:	e0fffd17 	ldw	r3,-12(fp)
 2002dec:	00bfff84 	movi	r2,-2
 2002df0:	1884703a 	and	r2,r3,r2
 2002df4:	1001703a 	wrctl	status,r2
  
  return context;
 2002df8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2002dfc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2002e00:	e0bfff17 	ldw	r2,-4(fp)
 2002e04:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2002e08:	e0bffc17 	ldw	r2,-16(fp)
 2002e0c:	10c00017 	ldw	r3,0(r2)
 2002e10:	e0bffc17 	ldw	r2,-16(fp)
 2002e14:	10800117 	ldw	r2,4(r2)
 2002e18:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2002e1c:	e0bffc17 	ldw	r2,-16(fp)
 2002e20:	10c00117 	ldw	r3,4(r2)
 2002e24:	e0bffc17 	ldw	r2,-16(fp)
 2002e28:	10800017 	ldw	r2,0(r2)
 2002e2c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2002e30:	e0fffc17 	ldw	r3,-16(fp)
 2002e34:	e0bffc17 	ldw	r2,-16(fp)
 2002e38:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2002e3c:	e0fffc17 	ldw	r3,-16(fp)
 2002e40:	e0bffc17 	ldw	r2,-16(fp)
 2002e44:	18800015 	stw	r2,0(r3)
 2002e48:	e0bffe17 	ldw	r2,-8(fp)
 2002e4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002e50:	e0bffb17 	ldw	r2,-20(fp)
 2002e54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2002e58:	e037883a 	mov	sp,fp
 2002e5c:	df000017 	ldw	fp,0(sp)
 2002e60:	dec00104 	addi	sp,sp,4
 2002e64:	f800283a 	ret

02002e68 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2002e68:	defffb04 	addi	sp,sp,-20
 2002e6c:	dfc00415 	stw	ra,16(sp)
 2002e70:	df000315 	stw	fp,12(sp)
 2002e74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2002e78:	d0a00917 	ldw	r2,-32732(gp)
 2002e7c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2002e80:	d0a01317 	ldw	r2,-32692(gp)
 2002e84:	10800044 	addi	r2,r2,1
 2002e88:	d0a01315 	stw	r2,-32692(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2002e8c:	00003106 	br	2002f54 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2002e90:	e0bffe17 	ldw	r2,-8(fp)
 2002e94:	10800017 	ldw	r2,0(r2)
 2002e98:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2002e9c:	e0bffe17 	ldw	r2,-8(fp)
 2002ea0:	10800403 	ldbu	r2,16(r2)
 2002ea4:	10803fcc 	andi	r2,r2,255
 2002ea8:	1005003a 	cmpeq	r2,r2,zero
 2002eac:	1000051e 	bne	r2,zero,2002ec4 <alt_tick+0x5c>
 2002eb0:	d0a01317 	ldw	r2,-32692(gp)
 2002eb4:	1004c03a 	cmpne	r2,r2,zero
 2002eb8:	1000021e 	bne	r2,zero,2002ec4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2002ebc:	e0bffe17 	ldw	r2,-8(fp)
 2002ec0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2002ec4:	e0bffe17 	ldw	r2,-8(fp)
 2002ec8:	10c00217 	ldw	r3,8(r2)
 2002ecc:	d0a01317 	ldw	r2,-32692(gp)
 2002ed0:	10c01e36 	bltu	r2,r3,2002f4c <alt_tick+0xe4>
 2002ed4:	e0bffe17 	ldw	r2,-8(fp)
 2002ed8:	10800403 	ldbu	r2,16(r2)
 2002edc:	10803fcc 	andi	r2,r2,255
 2002ee0:	1004c03a 	cmpne	r2,r2,zero
 2002ee4:	1000191e 	bne	r2,zero,2002f4c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2002ee8:	e0bffe17 	ldw	r2,-8(fp)
 2002eec:	10c00317 	ldw	r3,12(r2)
 2002ef0:	e0bffe17 	ldw	r2,-8(fp)
 2002ef4:	11000517 	ldw	r4,20(r2)
 2002ef8:	183ee83a 	callr	r3
 2002efc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2002f00:	e0bffd17 	ldw	r2,-12(fp)
 2002f04:	1004c03a 	cmpne	r2,r2,zero
 2002f08:	1000031e 	bne	r2,zero,2002f18 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2002f0c:	e13ffe17 	ldw	r4,-8(fp)
 2002f10:	2002dd00 	call	2002dd0 <alt_alarm_stop>
 2002f14:	00000d06 	br	2002f4c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2002f18:	e0bffe17 	ldw	r2,-8(fp)
 2002f1c:	10c00217 	ldw	r3,8(r2)
 2002f20:	e0bffd17 	ldw	r2,-12(fp)
 2002f24:	1887883a 	add	r3,r3,r2
 2002f28:	e0bffe17 	ldw	r2,-8(fp)
 2002f2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2002f30:	e0bffe17 	ldw	r2,-8(fp)
 2002f34:	10c00217 	ldw	r3,8(r2)
 2002f38:	d0a01317 	ldw	r2,-32692(gp)
 2002f3c:	1880032e 	bgeu	r3,r2,2002f4c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2002f40:	e0fffe17 	ldw	r3,-8(fp)
 2002f44:	00800044 	movi	r2,1
 2002f48:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2002f4c:	e0bfff17 	ldw	r2,-4(fp)
 2002f50:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2002f54:	d0e00904 	addi	r3,gp,-32732
 2002f58:	e0bffe17 	ldw	r2,-8(fp)
 2002f5c:	10ffcc1e 	bne	r2,r3,2002e90 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2002f60:	e037883a 	mov	sp,fp
 2002f64:	dfc00117 	ldw	ra,4(sp)
 2002f68:	df000017 	ldw	fp,0(sp)
 2002f6c:	dec00204 	addi	sp,sp,8
 2002f70:	f800283a 	ret

02002f74 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2002f74:	deffff04 	addi	sp,sp,-4
 2002f78:	df000015 	stw	fp,0(sp)
 2002f7c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2002f80:	000170fa 	wrctl	ienable,zero
}
 2002f84:	e037883a 	mov	sp,fp
 2002f88:	df000017 	ldw	fp,0(sp)
 2002f8c:	dec00104 	addi	sp,sp,4
 2002f90:	f800283a 	ret

02002f94 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2002f94:	defff404 	addi	sp,sp,-48
 2002f98:	df000b15 	stw	fp,44(sp)
 2002f9c:	df000b04 	addi	fp,sp,44
 2002fa0:	e13ffc15 	stw	r4,-16(fp)
 2002fa4:	e17ffd15 	stw	r5,-12(fp)
 2002fa8:	e1bffe15 	stw	r6,-8(fp)
 2002fac:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2002fb0:	e0fffe17 	ldw	r3,-8(fp)
 2002fb4:	e0bfff17 	ldw	r2,-4(fp)
 2002fb8:	10c5883a 	add	r2,r2,r3
 2002fbc:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 2002fc0:	e0c00117 	ldw	r3,4(fp)
 2002fc4:	e0800217 	ldw	r2,8(fp)
 2002fc8:	10c5883a 	add	r2,r2,r3
 2002fcc:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 2002fd0:	e0800117 	ldw	r2,4(fp)
 2002fd4:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 2002fd8:	e0bffe17 	ldw	r2,-8(fp)
 2002fdc:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2002fe0:	00800044 	movi	r2,1
 2002fe4:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2002fe8:	e0bffc17 	ldw	r2,-16(fp)
 2002fec:	11000504 	addi	r4,r2,20
 2002ff0:	e0fffd17 	ldw	r3,-12(fp)
 2002ff4:	00800044 	movi	r2,1
 2002ff8:	10c6983a 	sll	r3,r2,r3
 2002ffc:	2005883a 	mov	r2,r4
 2003000:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2003004:	e0800317 	ldw	r2,12(fp)
 2003008:	1080008c 	andi	r2,r2,2
 200300c:	1004c03a 	cmpne	r2,r2,zero
 2003010:	1000051e 	bne	r2,zero,2003028 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2003014:	e0bffc17 	ldw	r2,-16(fp)
 2003018:	10800304 	addi	r2,r2,12
 200301c:	1007883a 	mov	r3,r2
 2003020:	00810004 	movi	r2,1024
 2003024:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2003028:	e0bffc17 	ldw	r2,-16(fp)
 200302c:	10800037 	ldwio	r2,0(r2)
 2003030:	00000006 	br	2003034 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2003034:	e0bffc17 	ldw	r2,-16(fp)
 2003038:	10800204 	addi	r2,r2,8
 200303c:	10800037 	ldwio	r2,0(r2)
 2003040:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2003044:	e0bff717 	ldw	r2,-36(fp)
 2003048:	1080100c 	andi	r2,r2,64
 200304c:	1005003a 	cmpeq	r2,r2,zero
 2003050:	1000031e 	bne	r2,zero,2003060 <alt_avalon_spi_command+0xcc>
 2003054:	e0bff617 	ldw	r2,-40(fp)
 2003058:	1004c03a 	cmpne	r2,r2,zero
 200305c:	1000041e 	bne	r2,zero,2003070 <alt_avalon_spi_command+0xdc>
 2003060:	e0bff717 	ldw	r2,-36(fp)
 2003064:	1080200c 	andi	r2,r2,128
 2003068:	1005003a 	cmpeq	r2,r2,zero
 200306c:	103ff11e 	bne	r2,zero,2003034 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2003070:	e0bff717 	ldw	r2,-36(fp)
 2003074:	1080100c 	andi	r2,r2,64
 2003078:	1005003a 	cmpeq	r2,r2,zero
 200307c:	1000201e 	bne	r2,zero,2003100 <alt_avalon_spi_command+0x16c>
 2003080:	e0bff617 	ldw	r2,-40(fp)
 2003084:	10800050 	cmplti	r2,r2,1
 2003088:	10001d1e 	bne	r2,zero,2003100 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 200308c:	e0bff617 	ldw	r2,-40(fp)
 2003090:	10bfffc4 	addi	r2,r2,-1
 2003094:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 2003098:	e0ffff17 	ldw	r3,-4(fp)
 200309c:	e0bffb17 	ldw	r2,-20(fp)
 20030a0:	18800b2e 	bgeu	r3,r2,20030d0 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 20030a4:	e0bffc17 	ldw	r2,-16(fp)
 20030a8:	11000104 	addi	r4,r2,4
 20030ac:	e0bfff17 	ldw	r2,-4(fp)
 20030b0:	10800003 	ldbu	r2,0(r2)
 20030b4:	10c03fcc 	andi	r3,r2,255
 20030b8:	e0bfff17 	ldw	r2,-4(fp)
 20030bc:	10800044 	addi	r2,r2,1
 20030c0:	e0bfff15 	stw	r2,-4(fp)
 20030c4:	2005883a 	mov	r2,r4
 20030c8:	10c00035 	stwio	r3,0(r2)
 20030cc:	00000c06 	br	2003100 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 20030d0:	e0bff917 	ldw	r2,-28(fp)
 20030d4:	1005003a 	cmpeq	r2,r2,zero
 20030d8:	1000071e 	bne	r2,zero,20030f8 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 20030dc:	e0bff917 	ldw	r2,-28(fp)
 20030e0:	10bfffc4 	addi	r2,r2,-1
 20030e4:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 20030e8:	e0bffc17 	ldw	r2,-16(fp)
 20030ec:	10800104 	addi	r2,r2,4
 20030f0:	10000035 	stwio	zero,0(r2)
 20030f4:	00000206 	br	2003100 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 20030f8:	00bf0004 	movi	r2,-1024
 20030fc:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2003100:	e0bff717 	ldw	r2,-36(fp)
 2003104:	1080200c 	andi	r2,r2,128
 2003108:	1005003a 	cmpeq	r2,r2,zero
 200310c:	103fc91e 	bne	r2,zero,2003034 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2003110:	e0bffc17 	ldw	r2,-16(fp)
 2003114:	10800037 	ldwio	r2,0(r2)
 2003118:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 200311c:	e0bff817 	ldw	r2,-32(fp)
 2003120:	1005003a 	cmpeq	r2,r2,zero
 2003124:	1000041e 	bne	r2,zero,2003138 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 2003128:	e0bff817 	ldw	r2,-32(fp)
 200312c:	10bfffc4 	addi	r2,r2,-1
 2003130:	e0bff815 	stw	r2,-32(fp)
 2003134:	00000706 	br	2003154 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 2003138:	e0bff517 	ldw	r2,-44(fp)
 200313c:	1007883a 	mov	r3,r2
 2003140:	e0800217 	ldw	r2,8(fp)
 2003144:	10c00005 	stb	r3,0(r2)
 2003148:	e0800217 	ldw	r2,8(fp)
 200314c:	10800044 	addi	r2,r2,1
 2003150:	e0800215 	stw	r2,8(fp)
      credits++;
 2003154:	e0bff617 	ldw	r2,-40(fp)
 2003158:	10800044 	addi	r2,r2,1
 200315c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 2003160:	e0bff817 	ldw	r2,-32(fp)
 2003164:	1004c03a 	cmpne	r2,r2,zero
 2003168:	103fb21e 	bne	r2,zero,2003034 <alt_avalon_spi_command+0xa0>
 200316c:	e0c00217 	ldw	r3,8(fp)
 2003170:	e0bffa17 	ldw	r2,-24(fp)
 2003174:	18800126 	beq	r3,r2,200317c <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 2003178:	003fae06 	br	2003034 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200317c:	e0bffc17 	ldw	r2,-16(fp)
 2003180:	10800204 	addi	r2,r2,8
 2003184:	10800037 	ldwio	r2,0(r2)
 2003188:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 200318c:	e0bff717 	ldw	r2,-36(fp)
 2003190:	1080080c 	andi	r2,r2,32
 2003194:	1005003a 	cmpeq	r2,r2,zero
 2003198:	103ff81e 	bne	r2,zero,200317c <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 200319c:	e0800317 	ldw	r2,12(fp)
 20031a0:	1080004c 	andi	r2,r2,1
 20031a4:	1004c03a 	cmpne	r2,r2,zero
 20031a8:	1000031e 	bne	r2,zero,20031b8 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 20031ac:	e0bffc17 	ldw	r2,-16(fp)
 20031b0:	10800304 	addi	r2,r2,12
 20031b4:	10000035 	stwio	zero,0(r2)

  return read_length;
 20031b8:	e0800117 	ldw	r2,4(fp)
}
 20031bc:	e037883a 	mov	sp,fp
 20031c0:	df000017 	ldw	fp,0(sp)
 20031c4:	dec00104 	addi	sp,sp,4
 20031c8:	f800283a 	ret

020031cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20031cc:	defff904 	addi	sp,sp,-28
 20031d0:	dfc00615 	stw	ra,24(sp)
 20031d4:	df000515 	stw	fp,20(sp)
 20031d8:	df000504 	addi	fp,sp,20
 20031dc:	e13ffd15 	stw	r4,-12(fp)
 20031e0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20031e4:	e0bffe17 	ldw	r2,-8(fp)
 20031e8:	10800017 	ldw	r2,0(r2)
 20031ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20031f0:	e13ffd17 	ldw	r4,-12(fp)
 20031f4:	20035980 	call	2003598 <strlen>
 20031f8:	10800044 	addi	r2,r2,1
 20031fc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2003200:	00000d06 	br	2003238 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2003204:	e0bffc17 	ldw	r2,-16(fp)
 2003208:	11000217 	ldw	r4,8(r2)
 200320c:	e1bffb17 	ldw	r6,-20(fp)
 2003210:	e17ffd17 	ldw	r5,-12(fp)
 2003214:	20034840 	call	2003484 <memcmp>
 2003218:	1004c03a 	cmpne	r2,r2,zero
 200321c:	1000031e 	bne	r2,zero,200322c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2003220:	e0bffc17 	ldw	r2,-16(fp)
 2003224:	e0bfff15 	stw	r2,-4(fp)
 2003228:	00000706 	br	2003248 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200322c:	e0bffc17 	ldw	r2,-16(fp)
 2003230:	10800017 	ldw	r2,0(r2)
 2003234:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2003238:	e0fffe17 	ldw	r3,-8(fp)
 200323c:	e0bffc17 	ldw	r2,-16(fp)
 2003240:	10fff01e 	bne	r2,r3,2003204 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2003244:	e03fff15 	stw	zero,-4(fp)
 2003248:	e0bfff17 	ldw	r2,-4(fp)
}
 200324c:	e037883a 	mov	sp,fp
 2003250:	dfc00117 	ldw	ra,4(sp)
 2003254:	df000017 	ldw	fp,0(sp)
 2003258:	dec00204 	addi	sp,sp,8
 200325c:	f800283a 	ret

02003260 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2003260:	defffa04 	addi	sp,sp,-24
 2003264:	dfc00515 	stw	ra,20(sp)
 2003268:	df000415 	stw	fp,16(sp)
 200326c:	df000404 	addi	fp,sp,16
 2003270:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2003274:	00808034 	movhi	r2,512
 2003278:	10946e04 	addi	r2,r2,20920
 200327c:	10800017 	ldw	r2,0(r2)
 2003280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2003284:	00003306 	br	2003354 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2003288:	e0bffd17 	ldw	r2,-12(fp)
 200328c:	11000217 	ldw	r4,8(r2)
 2003290:	20035980 	call	2003598 <strlen>
 2003294:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2003298:	e0bffd17 	ldw	r2,-12(fp)
 200329c:	10c00217 	ldw	r3,8(r2)
 20032a0:	e0bffc17 	ldw	r2,-16(fp)
 20032a4:	1885883a 	add	r2,r3,r2
 20032a8:	10bfffc4 	addi	r2,r2,-1
 20032ac:	10800003 	ldbu	r2,0(r2)
 20032b0:	10803fcc 	andi	r2,r2,255
 20032b4:	1080201c 	xori	r2,r2,128
 20032b8:	10bfe004 	addi	r2,r2,-128
 20032bc:	10800bd8 	cmpnei	r2,r2,47
 20032c0:	1000031e 	bne	r2,zero,20032d0 <alt_find_file+0x70>
    {
      len -= 1;
 20032c4:	e0bffc17 	ldw	r2,-16(fp)
 20032c8:	10bfffc4 	addi	r2,r2,-1
 20032cc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20032d0:	e0bffc17 	ldw	r2,-16(fp)
 20032d4:	1007883a 	mov	r3,r2
 20032d8:	e0bffe17 	ldw	r2,-8(fp)
 20032dc:	1885883a 	add	r2,r3,r2
 20032e0:	10800003 	ldbu	r2,0(r2)
 20032e4:	10803fcc 	andi	r2,r2,255
 20032e8:	1080201c 	xori	r2,r2,128
 20032ec:	10bfe004 	addi	r2,r2,-128
 20032f0:	10800be0 	cmpeqi	r2,r2,47
 20032f4:	10000a1e 	bne	r2,zero,2003320 <alt_find_file+0xc0>
 20032f8:	e0bffc17 	ldw	r2,-16(fp)
 20032fc:	1007883a 	mov	r3,r2
 2003300:	e0bffe17 	ldw	r2,-8(fp)
 2003304:	1885883a 	add	r2,r3,r2
 2003308:	10800003 	ldbu	r2,0(r2)
 200330c:	10803fcc 	andi	r2,r2,255
 2003310:	1080201c 	xori	r2,r2,128
 2003314:	10bfe004 	addi	r2,r2,-128
 2003318:	1004c03a 	cmpne	r2,r2,zero
 200331c:	10000a1e 	bne	r2,zero,2003348 <alt_find_file+0xe8>
 2003320:	e0bffd17 	ldw	r2,-12(fp)
 2003324:	11000217 	ldw	r4,8(r2)
 2003328:	e1bffc17 	ldw	r6,-16(fp)
 200332c:	e17ffe17 	ldw	r5,-8(fp)
 2003330:	20034840 	call	2003484 <memcmp>
 2003334:	1004c03a 	cmpne	r2,r2,zero
 2003338:	1000031e 	bne	r2,zero,2003348 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200333c:	e0bffd17 	ldw	r2,-12(fp)
 2003340:	e0bfff15 	stw	r2,-4(fp)
 2003344:	00000806 	br	2003368 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2003348:	e0bffd17 	ldw	r2,-12(fp)
 200334c:	10800017 	ldw	r2,0(r2)
 2003350:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2003354:	00c08034 	movhi	r3,512
 2003358:	18d46e04 	addi	r3,r3,20920
 200335c:	e0bffd17 	ldw	r2,-12(fp)
 2003360:	10ffc91e 	bne	r2,r3,2003288 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2003364:	e03fff15 	stw	zero,-4(fp)
 2003368:	e0bfff17 	ldw	r2,-4(fp)
}
 200336c:	e037883a 	mov	sp,fp
 2003370:	dfc00117 	ldw	ra,4(sp)
 2003374:	df000017 	ldw	fp,0(sp)
 2003378:	dec00204 	addi	sp,sp,8
 200337c:	f800283a 	ret

02003380 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2003380:	defffc04 	addi	sp,sp,-16
 2003384:	df000315 	stw	fp,12(sp)
 2003388:	df000304 	addi	fp,sp,12
 200338c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2003390:	00bffa04 	movi	r2,-24
 2003394:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2003398:	e03ffe15 	stw	zero,-8(fp)
 200339c:	00001e06 	br	2003418 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 20033a0:	e0bffe17 	ldw	r2,-8(fp)
 20033a4:	00c08034 	movhi	r3,512
 20033a8:	18d30d04 	addi	r3,r3,19508
 20033ac:	10800324 	muli	r2,r2,12
 20033b0:	10c5883a 	add	r2,r2,r3
 20033b4:	10800017 	ldw	r2,0(r2)
 20033b8:	1004c03a 	cmpne	r2,r2,zero
 20033bc:	1000131e 	bne	r2,zero,200340c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 20033c0:	e0bffe17 	ldw	r2,-8(fp)
 20033c4:	00c08034 	movhi	r3,512
 20033c8:	18d30d04 	addi	r3,r3,19508
 20033cc:	10800324 	muli	r2,r2,12
 20033d0:	10c7883a 	add	r3,r2,r3
 20033d4:	e0bfff17 	ldw	r2,-4(fp)
 20033d8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 20033dc:	00808034 	movhi	r2,512
 20033e0:	10947204 	addi	r2,r2,20936
 20033e4:	10c00017 	ldw	r3,0(r2)
 20033e8:	e0bffe17 	ldw	r2,-8(fp)
 20033ec:	1880040e 	bge	r3,r2,2003400 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 20033f0:	00c08034 	movhi	r3,512
 20033f4:	18d47204 	addi	r3,r3,20936
 20033f8:	e0bffe17 	ldw	r2,-8(fp)
 20033fc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2003400:	e0bffe17 	ldw	r2,-8(fp)
 2003404:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2003408:	00000606 	br	2003424 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200340c:	e0bffe17 	ldw	r2,-8(fp)
 2003410:	10800044 	addi	r2,r2,1
 2003414:	e0bffe15 	stw	r2,-8(fp)
 2003418:	e0bffe17 	ldw	r2,-8(fp)
 200341c:	10800810 	cmplti	r2,r2,32
 2003420:	103fdf1e 	bne	r2,zero,20033a0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2003424:	e0bffd17 	ldw	r2,-12(fp)
}
 2003428:	e037883a 	mov	sp,fp
 200342c:	df000017 	ldw	fp,0(sp)
 2003430:	dec00104 	addi	sp,sp,4
 2003434:	f800283a 	ret

02003438 <atexit>:
 2003438:	200b883a 	mov	r5,r4
 200343c:	000d883a 	mov	r6,zero
 2003440:	0009883a 	mov	r4,zero
 2003444:	000f883a 	mov	r7,zero
 2003448:	200360c1 	jmpi	200360c <__register_exitproc>

0200344c <exit>:
 200344c:	defffe04 	addi	sp,sp,-8
 2003450:	000b883a 	mov	r5,zero
 2003454:	dc000015 	stw	r16,0(sp)
 2003458:	dfc00115 	stw	ra,4(sp)
 200345c:	2021883a 	mov	r16,r4
 2003460:	20037440 	call	2003744 <__call_exitprocs>
 2003464:	00808034 	movhi	r2,512
 2003468:	10947904 	addi	r2,r2,20964
 200346c:	11000017 	ldw	r4,0(r2)
 2003470:	20800f17 	ldw	r2,60(r4)
 2003474:	10000126 	beq	r2,zero,200347c <exit+0x30>
 2003478:	103ee83a 	callr	r2
 200347c:	8009883a 	mov	r4,r16
 2003480:	2003a800 	call	2003a80 <_exit>

02003484 <memcmp>:
 2003484:	00c000c4 	movi	r3,3
 2003488:	1980032e 	bgeu	r3,r6,2003498 <memcmp+0x14>
 200348c:	2144b03a 	or	r2,r4,r5
 2003490:	10c4703a 	and	r2,r2,r3
 2003494:	10000f26 	beq	r2,zero,20034d4 <memcmp+0x50>
 2003498:	31ffffc4 	addi	r7,r6,-1
 200349c:	3000061e 	bne	r6,zero,20034b8 <memcmp+0x34>
 20034a0:	00000a06 	br	20034cc <memcmp+0x48>
 20034a4:	39ffffc4 	addi	r7,r7,-1
 20034a8:	00bfffc4 	movi	r2,-1
 20034ac:	21000044 	addi	r4,r4,1
 20034b0:	29400044 	addi	r5,r5,1
 20034b4:	38800526 	beq	r7,r2,20034cc <memcmp+0x48>
 20034b8:	20c00003 	ldbu	r3,0(r4)
 20034bc:	28800003 	ldbu	r2,0(r5)
 20034c0:	18bff826 	beq	r3,r2,20034a4 <memcmp+0x20>
 20034c4:	1885c83a 	sub	r2,r3,r2
 20034c8:	f800283a 	ret
 20034cc:	0005883a 	mov	r2,zero
 20034d0:	f800283a 	ret
 20034d4:	180f883a 	mov	r7,r3
 20034d8:	20c00017 	ldw	r3,0(r4)
 20034dc:	28800017 	ldw	r2,0(r5)
 20034e0:	18bfed1e 	bne	r3,r2,2003498 <memcmp+0x14>
 20034e4:	31bfff04 	addi	r6,r6,-4
 20034e8:	21000104 	addi	r4,r4,4
 20034ec:	29400104 	addi	r5,r5,4
 20034f0:	39bff936 	bltu	r7,r6,20034d8 <memcmp+0x54>
 20034f4:	003fe806 	br	2003498 <memcmp+0x14>

020034f8 <memcpy>:
 20034f8:	01c003c4 	movi	r7,15
 20034fc:	2007883a 	mov	r3,r4
 2003500:	3980032e 	bgeu	r7,r6,2003510 <memcpy+0x18>
 2003504:	2904b03a 	or	r2,r5,r4
 2003508:	108000cc 	andi	r2,r2,3
 200350c:	10000926 	beq	r2,zero,2003534 <memcpy+0x3c>
 2003510:	30000626 	beq	r6,zero,200352c <memcpy+0x34>
 2003514:	30cd883a 	add	r6,r6,r3
 2003518:	28800003 	ldbu	r2,0(r5)
 200351c:	29400044 	addi	r5,r5,1
 2003520:	18800005 	stb	r2,0(r3)
 2003524:	18c00044 	addi	r3,r3,1
 2003528:	30fffb1e 	bne	r6,r3,2003518 <memcpy+0x20>
 200352c:	2005883a 	mov	r2,r4
 2003530:	f800283a 	ret
 2003534:	3811883a 	mov	r8,r7
 2003538:	200f883a 	mov	r7,r4
 200353c:	28c00017 	ldw	r3,0(r5)
 2003540:	31bffc04 	addi	r6,r6,-16
 2003544:	38c00015 	stw	r3,0(r7)
 2003548:	28800117 	ldw	r2,4(r5)
 200354c:	38800115 	stw	r2,4(r7)
 2003550:	28c00217 	ldw	r3,8(r5)
 2003554:	38c00215 	stw	r3,8(r7)
 2003558:	28800317 	ldw	r2,12(r5)
 200355c:	29400404 	addi	r5,r5,16
 2003560:	38800315 	stw	r2,12(r7)
 2003564:	39c00404 	addi	r7,r7,16
 2003568:	41bff436 	bltu	r8,r6,200353c <memcpy+0x44>
 200356c:	008000c4 	movi	r2,3
 2003570:	1180072e 	bgeu	r2,r6,2003590 <memcpy+0x98>
 2003574:	1007883a 	mov	r3,r2
 2003578:	28800017 	ldw	r2,0(r5)
 200357c:	31bfff04 	addi	r6,r6,-4
 2003580:	29400104 	addi	r5,r5,4
 2003584:	38800015 	stw	r2,0(r7)
 2003588:	39c00104 	addi	r7,r7,4
 200358c:	19bffa36 	bltu	r3,r6,2003578 <memcpy+0x80>
 2003590:	3807883a 	mov	r3,r7
 2003594:	003fde06 	br	2003510 <memcpy+0x18>

02003598 <strlen>:
 2003598:	208000cc 	andi	r2,r4,3
 200359c:	2011883a 	mov	r8,r4
 20035a0:	1000161e 	bne	r2,zero,20035fc <strlen+0x64>
 20035a4:	20c00017 	ldw	r3,0(r4)
 20035a8:	017fbff4 	movhi	r5,65279
 20035ac:	297fbfc4 	addi	r5,r5,-257
 20035b0:	01e02074 	movhi	r7,32897
 20035b4:	39e02004 	addi	r7,r7,-32640
 20035b8:	1945883a 	add	r2,r3,r5
 20035bc:	11c4703a 	and	r2,r2,r7
 20035c0:	00c6303a 	nor	r3,zero,r3
 20035c4:	1886703a 	and	r3,r3,r2
 20035c8:	18000c1e 	bne	r3,zero,20035fc <strlen+0x64>
 20035cc:	280d883a 	mov	r6,r5
 20035d0:	380b883a 	mov	r5,r7
 20035d4:	21000104 	addi	r4,r4,4
 20035d8:	20800017 	ldw	r2,0(r4)
 20035dc:	1187883a 	add	r3,r2,r6
 20035e0:	1946703a 	and	r3,r3,r5
 20035e4:	0084303a 	nor	r2,zero,r2
 20035e8:	10c4703a 	and	r2,r2,r3
 20035ec:	103ff926 	beq	r2,zero,20035d4 <strlen+0x3c>
 20035f0:	20800007 	ldb	r2,0(r4)
 20035f4:	10000326 	beq	r2,zero,2003604 <strlen+0x6c>
 20035f8:	21000044 	addi	r4,r4,1
 20035fc:	20800007 	ldb	r2,0(r4)
 2003600:	103ffd1e 	bne	r2,zero,20035f8 <strlen+0x60>
 2003604:	2205c83a 	sub	r2,r4,r8
 2003608:	f800283a 	ret

0200360c <__register_exitproc>:
 200360c:	defffa04 	addi	sp,sp,-24
 2003610:	00808034 	movhi	r2,512
 2003614:	10947904 	addi	r2,r2,20964
 2003618:	dc000015 	stw	r16,0(sp)
 200361c:	14000017 	ldw	r16,0(r2)
 2003620:	dd000415 	stw	r20,16(sp)
 2003624:	2829883a 	mov	r20,r5
 2003628:	81405217 	ldw	r5,328(r16)
 200362c:	dcc00315 	stw	r19,12(sp)
 2003630:	dc800215 	stw	r18,8(sp)
 2003634:	dc400115 	stw	r17,4(sp)
 2003638:	dfc00515 	stw	ra,20(sp)
 200363c:	2023883a 	mov	r17,r4
 2003640:	3027883a 	mov	r19,r6
 2003644:	3825883a 	mov	r18,r7
 2003648:	28002526 	beq	r5,zero,20036e0 <__register_exitproc+0xd4>
 200364c:	29000117 	ldw	r4,4(r5)
 2003650:	008007c4 	movi	r2,31
 2003654:	11002716 	blt	r2,r4,20036f4 <__register_exitproc+0xe8>
 2003658:	8800101e 	bne	r17,zero,200369c <__register_exitproc+0x90>
 200365c:	2105883a 	add	r2,r4,r4
 2003660:	1085883a 	add	r2,r2,r2
 2003664:	20c00044 	addi	r3,r4,1
 2003668:	1145883a 	add	r2,r2,r5
 200366c:	0009883a 	mov	r4,zero
 2003670:	15000215 	stw	r20,8(r2)
 2003674:	28c00115 	stw	r3,4(r5)
 2003678:	2005883a 	mov	r2,r4
 200367c:	dfc00517 	ldw	ra,20(sp)
 2003680:	dd000417 	ldw	r20,16(sp)
 2003684:	dcc00317 	ldw	r19,12(sp)
 2003688:	dc800217 	ldw	r18,8(sp)
 200368c:	dc400117 	ldw	r17,4(sp)
 2003690:	dc000017 	ldw	r16,0(sp)
 2003694:	dec00604 	addi	sp,sp,24
 2003698:	f800283a 	ret
 200369c:	29802204 	addi	r6,r5,136
 20036a0:	00800044 	movi	r2,1
 20036a4:	110e983a 	sll	r7,r2,r4
 20036a8:	30c04017 	ldw	r3,256(r6)
 20036ac:	2105883a 	add	r2,r4,r4
 20036b0:	1085883a 	add	r2,r2,r2
 20036b4:	1185883a 	add	r2,r2,r6
 20036b8:	19c6b03a 	or	r3,r3,r7
 20036bc:	14802015 	stw	r18,128(r2)
 20036c0:	14c00015 	stw	r19,0(r2)
 20036c4:	00800084 	movi	r2,2
 20036c8:	30c04015 	stw	r3,256(r6)
 20036cc:	88bfe31e 	bne	r17,r2,200365c <__register_exitproc+0x50>
 20036d0:	30804117 	ldw	r2,260(r6)
 20036d4:	11c4b03a 	or	r2,r2,r7
 20036d8:	30804115 	stw	r2,260(r6)
 20036dc:	003fdf06 	br	200365c <__register_exitproc+0x50>
 20036e0:	00808034 	movhi	r2,512
 20036e4:	1094c204 	addi	r2,r2,21256
 20036e8:	100b883a 	mov	r5,r2
 20036ec:	80805215 	stw	r2,328(r16)
 20036f0:	003fd606 	br	200364c <__register_exitproc+0x40>
 20036f4:	00800034 	movhi	r2,0
 20036f8:	10800004 	addi	r2,r2,0
 20036fc:	1000021e 	bne	r2,zero,2003708 <__register_exitproc+0xfc>
 2003700:	013fffc4 	movi	r4,-1
 2003704:	003fdc06 	br	2003678 <__register_exitproc+0x6c>
 2003708:	01006404 	movi	r4,400
 200370c:	103ee83a 	callr	r2
 2003710:	1007883a 	mov	r3,r2
 2003714:	103ffa26 	beq	r2,zero,2003700 <__register_exitproc+0xf4>
 2003718:	80805217 	ldw	r2,328(r16)
 200371c:	180b883a 	mov	r5,r3
 2003720:	18000115 	stw	zero,4(r3)
 2003724:	18800015 	stw	r2,0(r3)
 2003728:	80c05215 	stw	r3,328(r16)
 200372c:	18006215 	stw	zero,392(r3)
 2003730:	18006315 	stw	zero,396(r3)
 2003734:	0009883a 	mov	r4,zero
 2003738:	883fc826 	beq	r17,zero,200365c <__register_exitproc+0x50>
 200373c:	003fd706 	br	200369c <__register_exitproc+0x90>

02003740 <register_fini>:
 2003740:	f800283a 	ret

02003744 <__call_exitprocs>:
 2003744:	00808034 	movhi	r2,512
 2003748:	10947904 	addi	r2,r2,20964
 200374c:	10800017 	ldw	r2,0(r2)
 2003750:	defff304 	addi	sp,sp,-52
 2003754:	df000b15 	stw	fp,44(sp)
 2003758:	d8800115 	stw	r2,4(sp)
 200375c:	00800034 	movhi	r2,0
 2003760:	10800004 	addi	r2,r2,0
 2003764:	1005003a 	cmpeq	r2,r2,zero
 2003768:	d8800215 	stw	r2,8(sp)
 200376c:	d8800117 	ldw	r2,4(sp)
 2003770:	dd400815 	stw	r21,32(sp)
 2003774:	dd000715 	stw	r20,28(sp)
 2003778:	10805204 	addi	r2,r2,328
 200377c:	dfc00c15 	stw	ra,48(sp)
 2003780:	ddc00a15 	stw	r23,40(sp)
 2003784:	dd800915 	stw	r22,36(sp)
 2003788:	dcc00615 	stw	r19,24(sp)
 200378c:	dc800515 	stw	r18,20(sp)
 2003790:	dc400415 	stw	r17,16(sp)
 2003794:	dc000315 	stw	r16,12(sp)
 2003798:	282b883a 	mov	r21,r5
 200379c:	2039883a 	mov	fp,r4
 20037a0:	d8800015 	stw	r2,0(sp)
 20037a4:	2829003a 	cmpeq	r20,r5,zero
 20037a8:	d8800117 	ldw	r2,4(sp)
 20037ac:	14405217 	ldw	r17,328(r2)
 20037b0:	88001026 	beq	r17,zero,20037f4 <__call_exitprocs+0xb0>
 20037b4:	ddc00017 	ldw	r23,0(sp)
 20037b8:	88800117 	ldw	r2,4(r17)
 20037bc:	8c802204 	addi	r18,r17,136
 20037c0:	143fffc4 	addi	r16,r2,-1
 20037c4:	80000916 	blt	r16,zero,20037ec <__call_exitprocs+0xa8>
 20037c8:	05bfffc4 	movi	r22,-1
 20037cc:	a000151e 	bne	r20,zero,2003824 <__call_exitprocs+0xe0>
 20037d0:	8409883a 	add	r4,r16,r16
 20037d4:	2105883a 	add	r2,r4,r4
 20037d8:	1485883a 	add	r2,r2,r18
 20037dc:	10c02017 	ldw	r3,128(r2)
 20037e0:	a8c01126 	beq	r21,r3,2003828 <__call_exitprocs+0xe4>
 20037e4:	843fffc4 	addi	r16,r16,-1
 20037e8:	85bff81e 	bne	r16,r22,20037cc <__call_exitprocs+0x88>
 20037ec:	d8800217 	ldw	r2,8(sp)
 20037f0:	10003126 	beq	r2,zero,20038b8 <__call_exitprocs+0x174>
 20037f4:	dfc00c17 	ldw	ra,48(sp)
 20037f8:	df000b17 	ldw	fp,44(sp)
 20037fc:	ddc00a17 	ldw	r23,40(sp)
 2003800:	dd800917 	ldw	r22,36(sp)
 2003804:	dd400817 	ldw	r21,32(sp)
 2003808:	dd000717 	ldw	r20,28(sp)
 200380c:	dcc00617 	ldw	r19,24(sp)
 2003810:	dc800517 	ldw	r18,20(sp)
 2003814:	dc400417 	ldw	r17,16(sp)
 2003818:	dc000317 	ldw	r16,12(sp)
 200381c:	dec00d04 	addi	sp,sp,52
 2003820:	f800283a 	ret
 2003824:	8409883a 	add	r4,r16,r16
 2003828:	88c00117 	ldw	r3,4(r17)
 200382c:	2105883a 	add	r2,r4,r4
 2003830:	1445883a 	add	r2,r2,r17
 2003834:	18ffffc4 	addi	r3,r3,-1
 2003838:	11800217 	ldw	r6,8(r2)
 200383c:	1c001526 	beq	r3,r16,2003894 <__call_exitprocs+0x150>
 2003840:	10000215 	stw	zero,8(r2)
 2003844:	303fe726 	beq	r6,zero,20037e4 <__call_exitprocs+0xa0>
 2003848:	00c00044 	movi	r3,1
 200384c:	1c06983a 	sll	r3,r3,r16
 2003850:	90804017 	ldw	r2,256(r18)
 2003854:	8cc00117 	ldw	r19,4(r17)
 2003858:	1884703a 	and	r2,r3,r2
 200385c:	10001426 	beq	r2,zero,20038b0 <__call_exitprocs+0x16c>
 2003860:	90804117 	ldw	r2,260(r18)
 2003864:	1884703a 	and	r2,r3,r2
 2003868:	10000c1e 	bne	r2,zero,200389c <__call_exitprocs+0x158>
 200386c:	2105883a 	add	r2,r4,r4
 2003870:	1485883a 	add	r2,r2,r18
 2003874:	11400017 	ldw	r5,0(r2)
 2003878:	e009883a 	mov	r4,fp
 200387c:	303ee83a 	callr	r6
 2003880:	88800117 	ldw	r2,4(r17)
 2003884:	98bfc81e 	bne	r19,r2,20037a8 <__call_exitprocs+0x64>
 2003888:	b8800017 	ldw	r2,0(r23)
 200388c:	147fd526 	beq	r2,r17,20037e4 <__call_exitprocs+0xa0>
 2003890:	003fc506 	br	20037a8 <__call_exitprocs+0x64>
 2003894:	8c000115 	stw	r16,4(r17)
 2003898:	003fea06 	br	2003844 <__call_exitprocs+0x100>
 200389c:	2105883a 	add	r2,r4,r4
 20038a0:	1485883a 	add	r2,r2,r18
 20038a4:	11000017 	ldw	r4,0(r2)
 20038a8:	303ee83a 	callr	r6
 20038ac:	003ff406 	br	2003880 <__call_exitprocs+0x13c>
 20038b0:	303ee83a 	callr	r6
 20038b4:	003ff206 	br	2003880 <__call_exitprocs+0x13c>
 20038b8:	88800117 	ldw	r2,4(r17)
 20038bc:	1000081e 	bne	r2,zero,20038e0 <__call_exitprocs+0x19c>
 20038c0:	89000017 	ldw	r4,0(r17)
 20038c4:	20000726 	beq	r4,zero,20038e4 <__call_exitprocs+0x1a0>
 20038c8:	b9000015 	stw	r4,0(r23)
 20038cc:	8809883a 	mov	r4,r17
 20038d0:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 20038d4:	bc400017 	ldw	r17,0(r23)
 20038d8:	883fb71e 	bne	r17,zero,20037b8 <__call_exitprocs+0x74>
 20038dc:	003fc506 	br	20037f4 <__call_exitprocs+0xb0>
 20038e0:	89000017 	ldw	r4,0(r17)
 20038e4:	882f883a 	mov	r23,r17
 20038e8:	2023883a 	mov	r17,r4
 20038ec:	883fb21e 	bne	r17,zero,20037b8 <__call_exitprocs+0x74>
 20038f0:	003fc006 	br	20037f4 <__call_exitprocs+0xb0>

020038f4 <udivmodsi4>:
 20038f4:	29001b2e 	bgeu	r5,r4,2003964 <udivmodsi4+0x70>
 20038f8:	28001a16 	blt	r5,zero,2003964 <udivmodsi4+0x70>
 20038fc:	00800044 	movi	r2,1
 2003900:	0007883a 	mov	r3,zero
 2003904:	01c007c4 	movi	r7,31
 2003908:	00000306 	br	2003918 <udivmodsi4+0x24>
 200390c:	19c01326 	beq	r3,r7,200395c <udivmodsi4+0x68>
 2003910:	18c00044 	addi	r3,r3,1
 2003914:	28000416 	blt	r5,zero,2003928 <udivmodsi4+0x34>
 2003918:	294b883a 	add	r5,r5,r5
 200391c:	1085883a 	add	r2,r2,r2
 2003920:	293ffa36 	bltu	r5,r4,200390c <udivmodsi4+0x18>
 2003924:	10000d26 	beq	r2,zero,200395c <udivmodsi4+0x68>
 2003928:	0007883a 	mov	r3,zero
 200392c:	21400236 	bltu	r4,r5,2003938 <udivmodsi4+0x44>
 2003930:	2149c83a 	sub	r4,r4,r5
 2003934:	1886b03a 	or	r3,r3,r2
 2003938:	1004d07a 	srli	r2,r2,1
 200393c:	280ad07a 	srli	r5,r5,1
 2003940:	103ffa1e 	bne	r2,zero,200392c <udivmodsi4+0x38>
 2003944:	30000226 	beq	r6,zero,2003950 <udivmodsi4+0x5c>
 2003948:	2005883a 	mov	r2,r4
 200394c:	f800283a 	ret
 2003950:	1809883a 	mov	r4,r3
 2003954:	2005883a 	mov	r2,r4
 2003958:	f800283a 	ret
 200395c:	0007883a 	mov	r3,zero
 2003960:	003ff806 	br	2003944 <udivmodsi4+0x50>
 2003964:	00800044 	movi	r2,1
 2003968:	0007883a 	mov	r3,zero
 200396c:	003fef06 	br	200392c <udivmodsi4+0x38>

02003970 <__divsi3>:
 2003970:	defffe04 	addi	sp,sp,-8
 2003974:	dc000015 	stw	r16,0(sp)
 2003978:	dfc00115 	stw	ra,4(sp)
 200397c:	0021883a 	mov	r16,zero
 2003980:	20000c16 	blt	r4,zero,20039b4 <__divsi3+0x44>
 2003984:	000d883a 	mov	r6,zero
 2003988:	28000e16 	blt	r5,zero,20039c4 <__divsi3+0x54>
 200398c:	20038f40 	call	20038f4 <udivmodsi4>
 2003990:	1007883a 	mov	r3,r2
 2003994:	8005003a 	cmpeq	r2,r16,zero
 2003998:	1000011e 	bne	r2,zero,20039a0 <__divsi3+0x30>
 200399c:	00c7c83a 	sub	r3,zero,r3
 20039a0:	1805883a 	mov	r2,r3
 20039a4:	dfc00117 	ldw	ra,4(sp)
 20039a8:	dc000017 	ldw	r16,0(sp)
 20039ac:	dec00204 	addi	sp,sp,8
 20039b0:	f800283a 	ret
 20039b4:	0109c83a 	sub	r4,zero,r4
 20039b8:	04000044 	movi	r16,1
 20039bc:	000d883a 	mov	r6,zero
 20039c0:	283ff20e 	bge	r5,zero,200398c <__divsi3+0x1c>
 20039c4:	014bc83a 	sub	r5,zero,r5
 20039c8:	8021003a 	cmpeq	r16,r16,zero
 20039cc:	003fef06 	br	200398c <__divsi3+0x1c>

020039d0 <__modsi3>:
 20039d0:	deffff04 	addi	sp,sp,-4
 20039d4:	dfc00015 	stw	ra,0(sp)
 20039d8:	01800044 	movi	r6,1
 20039dc:	2807883a 	mov	r3,r5
 20039e0:	20000416 	blt	r4,zero,20039f4 <__modsi3+0x24>
 20039e4:	28000c16 	blt	r5,zero,2003a18 <__modsi3+0x48>
 20039e8:	dfc00017 	ldw	ra,0(sp)
 20039ec:	dec00104 	addi	sp,sp,4
 20039f0:	20038f41 	jmpi	20038f4 <udivmodsi4>
 20039f4:	0109c83a 	sub	r4,zero,r4
 20039f8:	28000b16 	blt	r5,zero,2003a28 <__modsi3+0x58>
 20039fc:	180b883a 	mov	r5,r3
 2003a00:	01800044 	movi	r6,1
 2003a04:	20038f40 	call	20038f4 <udivmodsi4>
 2003a08:	0085c83a 	sub	r2,zero,r2
 2003a0c:	dfc00017 	ldw	ra,0(sp)
 2003a10:	dec00104 	addi	sp,sp,4
 2003a14:	f800283a 	ret
 2003a18:	014bc83a 	sub	r5,zero,r5
 2003a1c:	dfc00017 	ldw	ra,0(sp)
 2003a20:	dec00104 	addi	sp,sp,4
 2003a24:	20038f41 	jmpi	20038f4 <udivmodsi4>
 2003a28:	0147c83a 	sub	r3,zero,r5
 2003a2c:	003ff306 	br	20039fc <__modsi3+0x2c>

02003a30 <__udivsi3>:
 2003a30:	000d883a 	mov	r6,zero
 2003a34:	20038f41 	jmpi	20038f4 <udivmodsi4>

02003a38 <__umodsi3>:
 2003a38:	01800044 	movi	r6,1
 2003a3c:	20038f41 	jmpi	20038f4 <udivmodsi4>

02003a40 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2003a40:	defffd04 	addi	sp,sp,-12
 2003a44:	df000215 	stw	fp,8(sp)
 2003a48:	df000204 	addi	fp,sp,8
 2003a4c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2003a50:	e0bfff17 	ldw	r2,-4(fp)
 2003a54:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2003a58:	e0bffe17 	ldw	r2,-8(fp)
 2003a5c:	1005003a 	cmpeq	r2,r2,zero
 2003a60:	1000021e 	bne	r2,zero,2003a6c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2003a64:	002af070 	cmpltui	zero,zero,43969
 2003a68:	00000106 	br	2003a70 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2003a6c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2003a70:	e037883a 	mov	sp,fp
 2003a74:	df000017 	ldw	fp,0(sp)
 2003a78:	dec00104 	addi	sp,sp,4
 2003a7c:	f800283a 	ret

02003a80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2003a80:	defffd04 	addi	sp,sp,-12
 2003a84:	dfc00215 	stw	ra,8(sp)
 2003a88:	df000115 	stw	fp,4(sp)
 2003a8c:	df000104 	addi	fp,sp,4
 2003a90:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2003a94:	e13fff17 	ldw	r4,-4(fp)
 2003a98:	2003a400 	call	2003a40 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2003a9c:	003fff06 	br	2003a9c <_exit+0x1c>
 2003aa0:	02003740 	call	200374 <__alt_mem_sdram-0x1dffc8c>
