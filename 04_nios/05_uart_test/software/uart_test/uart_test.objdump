
uart_test.elf:     file format elf32-littlenios2
uart_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0000703c memsz 0x000072e8 flags rwx
    LOAD off    0x00009000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000546c  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000194  02005620  02005620  00006620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000018a8  020057b4  020057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0200705c  0200705c  0000805c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000790  00000000  00000000  00009028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ce7  00000000  00000000  000097b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000ead7  00000000  00000000  0000a49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d63  00000000  00000000  00018f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009758  00000000  00000000  0001ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f84  00000000  00000000  00026434  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f8d  00000000  00000000  000273b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002006  00000000  00000000  00028345  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0002a34c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  0002a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002c813  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0002c816  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002c81b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002c81c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002c81d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002c821  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002c825  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002c829  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002c832  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002c83b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0002c844  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000017  00000000  00000000  0002c84a  2**0
                  CONTENTS, READONLY
 29 .jdi          00004627  00000000  00000000  0002c861  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003fff0  00000000  00000000  00030e88  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
02005620 l    d  .rodata	00000000 .rodata
020057b4 l    d  .rwdata	00000000 .rwdata
0200705c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 uart.c
020001fc l     F .text	0000004c uart_send_byte
02000248 l     F .text	00000064 uart_send_string
020002ac l     F .text	00000070 uart_init
020003f8 l     F .text	00000090 set_baudrate
0200031c l     F .text	000000dc uart_ISR
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
02000610 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02000e08 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02005894 l     O .rwdata	000000c8 epcs_flash
0200595c l     O .rwdata	00001060 jtag_uart
020069bc l     O .rwdata	000000c4 uart
02001a18 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02001adc l     F .text	00000288 alt_epcs_flash_query
02001aa4 l     F .text	00000038 alt_flash_device_register
02001d64 l     F .text	00000108 alt_epcs_flash_memcmp
020021ec l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200263c l     F .text	00000228 altera_avalon_jtag_uart_irq
02002864 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
020030a0 l     F .text	0000009c altera_avalon_uart_irq
0200313c l     F .text	000000e0 altera_avalon_uart_rxirq
0200321c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
02003608 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02003830 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
020039e8 l     F .text	00000038 epcs_await_wip_released
02003a20 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
02004300 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02004360 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02004440 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02004638 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02004774 l     F .text	000000dc alt_file_locked
020049d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
02006c28 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02005408 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
020055bc l     F .text	00000040 alt_sim_halt
020020ec g     F .text	00000090 alt_epcs_flash_get_info
020018d8 g     F .text	0000006c alt_main
02001580 g     F .text	0000008c strcpy
02007078 g     O .bss	00000100 alt_irq
04001000 g       *ABS*	00000000 __alt_mem_epcs_flash
00000000  w      *UND*	00000000 __errno
020038f0 g     F .text	000000f8 epcs_sector_erase
04001000 g     F .entry	00000000 __reset
02007074 g     O .bss	00000004 errno
02007064 g     O .bss	00000004 alt_argv
0200f028 g       *ABS*	00000000 _gp
02001944 g     F .text	00000030 usleep
02006aa8 g     O .rwdata	00000180 alt_fd_list
02003bf4 g     F .text	00000064 epcs_write_status_register
02004e94 g     F .text	00000094 alt_find_dev
020051c0 g     F .text	000000a0 memcpy
020046fc g     F .text	00000078 alt_io_redirect
02005620 g       *ABS*	00000000 __DTOR_END__
02002280 g     F .text	0000011c alt_epcs_flash_write_block
02002a7c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02000f44 g     F .text	00000008 __udivsi3
0200056c g     F .text	000000a4 __fixunsdfsi
0200703c g     O .rwdata	00000004 alt_max_fd
020012e8 g     F .text	00000138 __unpack_d
02000aa0 g     F .text	00000074 __adddf3
0200217c g     F .text	00000070 alt_epcs_flash_erase_block
02007058 g     O .rwdata	00000004 _global_impure_ptr
02003f0c g     F .text	00000058 epcs_exit_4_bytes_mode
02007308 g       *ABS*	00000000 __bss_end
020017e0 g     F .text	000000f8 alt_iic_isr_register
02004b30 g     F .text	0000010c alt_tick
02000c74 g     F .text	00000194 __floatunsidf
02002fd8 g     F .text	000000c8 altera_avalon_uart_init
02001798 g     F .text	00000048 alt_ic_irq_enabled
02004a98 g     F .text	00000098 alt_alarm_stop
0200705c g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
02006a80 g     O .rwdata	00000028 alt_dev_null
02000b9c g     F .text	000000d8 __fixdfsi
02007034 g     O .rwdata	00000008 alt_dev_list
02000f4c g     F .text	00000008 __umodsi3
02003dc8 g     F .text	0000006c epcs_read_electronic_signature
02007308 g       *ABS*	00000000 end
02003668 g     F .text	000001c8 altera_avalon_uart_write
0200257c g     F .text	000000c0 altera_avalon_jtag_uart_init
0200561c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02002f38 g     F .text	00000058 altera_avalon_uart_write_fd
02000f54 g     F .text	00000080 __clzsi2
02002f90 g     F .text	00000048 altera_avalon_uart_close_fd
02002ca0 g     F .text	00000240 altera_avalon_jtag_uart_write
0200540c g     F .text	000001b0 __call_exitprocs
020001b4 g     F .text	00000048 _start
0200706c g     O .bss	00000004 _alt_tick_rate
02004c5c g     F .text	00000238 alt_avalon_spi_command
02007070 g     O .bss	00000004 _alt_nticks
020019a8 g     F .text	00000070 alt_sys_init
020052d4 g     F .text	00000134 __register_exitproc
02002914 g     F .text	00000074 altera_avalon_jtag_uart_close
02003890 g     F .text	00000060 epcs_read_status_register
02002434 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02005048 g     F .text	000000b8 alt_get_fd
020040b8 g     F .text	0000014c alt_busy_sleep
02001420 g     F .text	000000c8 __fpcmp_parts_d
02003e34 g     F .text	00000080 epcs_read_device_id
0200514c g     F .text	00000074 memcmp
020024e4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02007308 g       *ABS*	00000000 __alt_stack_base
0200252c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02004f28 g     F .text	00000120 alt_find_file
0200438c g     F .text	000000b4 alt_dev_llist_insert
02007044 g     O .rwdata	00000008 alt_flash_dev_list
0200705c g       *ABS*	00000000 __bss_start
020014e8 g     F .text	00000098 memset
02000488 g     F .text	000000e4 main
02007068 g     O .bss	00000004 alt_envp
0200248c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02007178 g     O .bss	00000190 _atexit0
02007040 g     O .rwdata	00000004 alt_errno
02000e84 g     F .text	00000060 __divsi3
02005654 g     O .rodata	00000014 __thenan_df
02005620 g       *ABS*	00000000 __CTOR_END__
02001e6c g     F .text	00000280 alt_epcs_flash_write
02005620 g       *ABS*	00000000 __DTOR_LIST__
02001974 g     F .text	00000034 alt_irq_init
02004a38 g     F .text	00000060 alt_release_fd
02005668 g     O .rodata	00000100 __clz_tab
02005100 g     F .text	00000014 atexit
02007054 g     O .rwdata	00000004 _impure_ptr
02007060 g     O .bss	00000004 alt_argc
02004504 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
0200702c g     O .rwdata	00000008 alt_fs_list
02003a58 g     F .text	0000014c epcs_read_buffer
02001a50 g     F .text	00000054 alt_epcs_flash_init
0200160c g     F .text	00000050 alt_ic_isr_register
0200705c g       *ABS*	00000000 _edata
02002ee0 g     F .text	00000058 altera_avalon_uart_read_fd
02007308 g       *ABS*	00000000 _end
02004568 g     F .text	0000007c alt_flash_open_dev
02002988 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
020016f8 g     F .text	000000a0 alt_ic_irq_disable
02003eb4 g     F .text	00000058 epcs_enter_4_bytes_mode
02004c3c g     F .text	00000020 altera_nios2_qsys_irq_init
02005114 g     F .text	00000038 exit
020045e4 g     F .text	00000054 alt_flash_close_dev
02000ee4 g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
020057b4 g     O .rwdata	000000e0 uart
02000000 g       *ABS*	00000000 __alt_mem_sdram
02003378 g     F .text	00000060 altera_avalon_uart_close
020055fc g     F .text	00000020 _exit
02003f64 g     F .text	00000154 alt_alarm_start
02005260 g     F .text	00000074 strlen
02003ba4 g     F .text	00000050 epcs_write_enable
02004850 g     F .text	00000188 open
02000b14 g     F .text	00000088 __gedf2
02007028 g     O .rwdata	00000004 alt_priority_mask
0200165c g     F .text	0000009c alt_ic_irq_enable
020033d8 g     F .text	00000230 altera_avalon_uart_read
02000a20 g     F .text	00000080 __subdf3
0200239c g     F .text	00000098 alt_epcs_flash_read
0200704c g     O .rwdata	00000008 alt_alarm_list
020044a0 g     F .text	00000064 _do_ctors
02004204 g     F .text	000000fc close
02000fd4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
02003c58 g     F .text	00000170 epcs_write_buffer



Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08034 	movhi	r3,512
 2000134:	18dc1e04 	addi	r3,r3,28792
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08034 	movhi	r3,512
 200014c:	18dc1e04 	addi	r3,r3,28792
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 20001c0:	00bffd16 	blt	zero,r2,20001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c4:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001cc:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001d0:	d6bc0a14 	ori	gp,gp,61480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d4:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001d8:	109c1714 	ori	r2,r2,28764

    movhi r3, %hi(__bss_end)
 20001dc:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001e0:	18dcc214 	ori	r3,r3,29448

    beq r2, r3, 1f
 20001e4:	10c00326 	beq	r2,r3,20001f4 <_start+0x40>

0:
    stw zero, (r2)
 20001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f0:	10fffd36 	bltu	r2,r3,20001e8 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f4:	20018d80 	call	20018d8 <alt_main>

020001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001f8:	003fff06 	br	20001f8 <alt_after_alt_main>

020001fc <uart_send_byte>:
 *         Name:  uart_send_byte
 *  Description:  
 * =====================================================================================
 */
int uart_send_byte(unsigned char data)
{
 20001fc:	defffe04 	addi	sp,sp,-8
 2000200:	df000115 	stw	fp,4(sp)
 2000204:	df000104 	addi	fp,sp,4
 2000208:	e13fff05 	stb	r4,-4(fp)
    UART->TXDATA.BITS.TRANSMIT_DATA = data;
 200020c:	00e10034 	movhi	r3,33792
 2000210:	18c80004 	addi	r3,r3,8192
 2000214:	e0bfff03 	ldbu	r2,-4(fp)
 2000218:	18800105 	stb	r2,4(r3)
    while(!UART->STATUS.BITS.TRDY);
 200021c:	00a10034 	movhi	r2,33792
 2000220:	10880004 	addi	r2,r2,8192
 2000224:	10800217 	ldw	r2,8(r2)
 2000228:	1080100c 	andi	r2,r2,64
 200022c:	1005003a 	cmpeq	r2,r2,zero
 2000230:	103ffa1e 	bne	r2,zero,200021c <uart_send_byte+0x20>

    return 0;
 2000234:	0005883a 	mov	r2,zero
}
 2000238:	e037883a 	mov	sp,fp
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00104 	addi	sp,sp,4
 2000244:	f800283a 	ret

02000248 <uart_send_string>:
 *         Name:  uart_send_string
 *  Description:  
 * =====================================================================================
 */
void uart_send_string(unsigned int len, unsigned char *str)
{
 2000248:	defffc04 	addi	sp,sp,-16
 200024c:	dfc00315 	stw	ra,12(sp)
 2000250:	df000215 	stw	fp,8(sp)
 2000254:	df000204 	addi	fp,sp,8
 2000258:	e13ffe15 	stw	r4,-8(fp)
 200025c:	e17fff15 	stw	r5,-4(fp)
    while(len--)
 2000260:	00000706 	br	2000280 <uart_send_string+0x38>
    {
        uart_send_byte(*str++);  
 2000264:	e0bfff17 	ldw	r2,-4(fp)
 2000268:	10800003 	ldbu	r2,0(r2)
 200026c:	11003fcc 	andi	r4,r2,255
 2000270:	e0bfff17 	ldw	r2,-4(fp)
 2000274:	10800044 	addi	r2,r2,1
 2000278:	e0bfff15 	stw	r2,-4(fp)
 200027c:	20001fc0 	call	20001fc <uart_send_byte>
 *  Description:  
 * =====================================================================================
 */
void uart_send_string(unsigned int len, unsigned char *str)
{
    while(len--)
 2000280:	e0bffe17 	ldw	r2,-8(fp)
 2000284:	10bfffc4 	addi	r2,r2,-1
 2000288:	e0bffe15 	stw	r2,-8(fp)
 200028c:	e0bffe17 	ldw	r2,-8(fp)
 2000290:	10bfffd8 	cmpnei	r2,r2,-1
 2000294:	103ff31e 	bne	r2,zero,2000264 <uart_send_string+0x1c>
    {
        uart_send_byte(*str++);  
    }
}
 2000298:	e037883a 	mov	sp,fp
 200029c:	dfc00117 	ldw	ra,4(sp)
 20002a0:	df000017 	ldw	fp,0(sp)
 20002a4:	dec00204 	addi	sp,sp,8
 20002a8:	f800283a 	ret

020002ac <uart_init>:
 *         Name:  uart_init
 *  Description:  
 * =====================================================================================
 */
int uart_init(void)
{
 20002ac:	defffd04 	addi	sp,sp,-12
 20002b0:	dfc00215 	stw	ra,8(sp)
 20002b4:	df000115 	stw	fp,4(sp)
 20002b8:	df000104 	addi	fp,sp,4
    set_baudrate(115200);
 20002bc:	010000b4 	movhi	r4,2
 20002c0:	21308004 	addi	r4,r4,-15872
 20002c4:	20003f80 	call	20003f8 <set_baudrate>
    
    UART->CONTROL.BITS.IRRDY=1;
 20002c8:	00e10034 	movhi	r3,33792
 20002cc:	18c80004 	addi	r3,r3,8192
 20002d0:	18800317 	ldw	r2,12(r3)
 20002d4:	10802014 	ori	r2,r2,128
 20002d8:	18800315 	stw	r2,12(r3)
    UART->STATUS.WORD=0;
 20002dc:	00a10034 	movhi	r2,33792
 20002e0:	10880004 	addi	r2,r2,8192
 20002e4:	10000215 	stw	zero,8(r2)
    
    //alt_irq_register(UART_IRQ, NULL, uart_ISR);
    alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID,UART_IRQ,uart_ISR,NULL,0x0);
 20002e8:	01808034 	movhi	r6,512
 20002ec:	3180c704 	addi	r6,r6,796
 20002f0:	d8000015 	stw	zero,0(sp)
 20002f4:	0009883a 	mov	r4,zero
 20002f8:	014000c4 	movi	r5,3
 20002fc:	000f883a 	mov	r7,zero
 2000300:	200160c0 	call	200160c <alt_ic_isr_register>

    return 0;
 2000304:	0005883a 	mov	r2,zero
}
 2000308:	e037883a 	mov	sp,fp
 200030c:	dfc00117 	ldw	ra,4(sp)
 2000310:	df000017 	ldw	fp,0(sp)
 2000314:	dec00204 	addi	sp,sp,8
 2000318:	f800283a 	ret

0200031c <uart_ISR>:
 *         Name:  uart_ISR
 *  Description:  
 * =====================================================================================
 */
static void uart_ISR(void)
{     
 200031c:	deffff04 	addi	sp,sp,-4
 2000320:	df000015 	stw	fp,0(sp)
 2000324:	d839883a 	mov	fp,sp
	while(!(UART->STATUS.BITS.RRDY));
 2000328:	00a10034 	movhi	r2,33792
 200032c:	10880004 	addi	r2,r2,8192
 2000330:	10800217 	ldw	r2,8(r2)
 2000334:	1080200c 	andi	r2,r2,128
 2000338:	1005003a 	cmpeq	r2,r2,zero
 200033c:	103ffa1e 	bne	r2,zero,2000328 <uart_ISR+0xc>

	uart.receive_buffer[uart.receive_count++] = UART->RXDATA.BITS.RECEIVE_DATA;
 2000340:	00808034 	movhi	r2,512
 2000344:	1095ed04 	addi	r2,r2,22452
 2000348:	10c00117 	ldw	r3,4(r2)
 200034c:	00a10034 	movhi	r2,33792
 2000350:	10880004 	addi	r2,r2,8192
 2000354:	11000003 	ldbu	r4,0(r2)
 2000358:	00808034 	movhi	r2,512
 200035c:	1095ed04 	addi	r2,r2,22452
 2000360:	1885883a 	add	r2,r3,r2
 2000364:	10800204 	addi	r2,r2,8
 2000368:	11000005 	stb	r4,0(r2)
 200036c:	18c00044 	addi	r3,r3,1
 2000370:	00808034 	movhi	r2,512
 2000374:	1095ed04 	addi	r2,r2,22452
 2000378:	10c00115 	stw	r3,4(r2)

	if(uart.receive_buffer[uart.receive_count-1]=='\n'){
 200037c:	00808034 	movhi	r2,512
 2000380:	1095ed04 	addi	r2,r2,22452
 2000384:	10800117 	ldw	r2,4(r2)
 2000388:	10ffffc4 	addi	r3,r2,-1
 200038c:	00808034 	movhi	r2,512
 2000390:	1095ed04 	addi	r2,r2,22452
 2000394:	1885883a 	add	r2,r3,r2
 2000398:	10800204 	addi	r2,r2,8
 200039c:	10800003 	ldbu	r2,0(r2)
 20003a0:	10803fcc 	andi	r2,r2,255
 20003a4:	10800298 	cmpnei	r2,r2,10
 20003a8:	10000f1e 	bne	r2,zero,20003e8 <uart_ISR+0xcc>
		uart.receive_buffer[uart.receive_count]='\0';
 20003ac:	00808034 	movhi	r2,512
 20003b0:	1095ed04 	addi	r2,r2,22452
 20003b4:	10c00117 	ldw	r3,4(r2)
 20003b8:	00808034 	movhi	r2,512
 20003bc:	1095ed04 	addi	r2,r2,22452
 20003c0:	1885883a 	add	r2,r3,r2
 20003c4:	10800204 	addi	r2,r2,8
 20003c8:	10000005 	stb	zero,0(r2)
//		uart_send_string(uart.receive_count,uart.receive_buffer);
		uart.receive_count=0;
 20003cc:	00808034 	movhi	r2,512
 20003d0:	1095ed04 	addi	r2,r2,22452
 20003d4:	10000115 	stw	zero,4(r2)
		uart.receive_flag=1;
 20003d8:	00c08034 	movhi	r3,512
 20003dc:	18d5ed04 	addi	r3,r3,22452
 20003e0:	00800044 	movi	r2,1
 20003e4:	18800015 	stw	r2,0(r3)
	}


}
 20003e8:	e037883a 	mov	sp,fp
 20003ec:	df000017 	ldw	fp,0(sp)
 20003f0:	dec00104 	addi	sp,sp,4
 20003f4:	f800283a 	ret

020003f8 <set_baudrate>:
 *         Name:  set_baudrate
 *  Description:  
 * =====================================================================================
 */
int set_baudrate(unsigned int baudrate)
{    
 20003f8:	defffc04 	addi	sp,sp,-16
 20003fc:	dfc00315 	stw	ra,12(sp)
 2000400:	df000215 	stw	fp,8(sp)
 2000404:	dc000115 	stw	r16,4(sp)
 2000408:	df000104 	addi	fp,sp,4
 200040c:	e13fff15 	stw	r4,-4(fp)
	UART->DIVISOR.WORD=(unsigned int)(ALT_CPU_FREQ/baudrate+0.5);
 2000410:	04210034 	movhi	r16,33792
 2000414:	84080004 	addi	r16,r16,8192
 2000418:	01017db4 	movhi	r4,1526
 200041c:	21384004 	addi	r4,r4,-7936
 2000420:	e17fff17 	ldw	r5,-4(fp)
 2000424:	2000f440 	call	2000f44 <__udivsi3>
 2000428:	1009883a 	mov	r4,r2
 200042c:	2000c740 	call	2000c74 <__floatunsidf>
 2000430:	100b883a 	mov	r5,r2
 2000434:	180d883a 	mov	r6,r3
 2000438:	2809883a 	mov	r4,r5
 200043c:	300b883a 	mov	r5,r6
 2000440:	000d883a 	mov	r6,zero
 2000444:	01cff834 	movhi	r7,16352
 2000448:	2000aa00 	call	2000aa0 <__adddf3>
 200044c:	1009883a 	mov	r4,r2
 2000450:	180b883a 	mov	r5,r3
 2000454:	2005883a 	mov	r2,r4
 2000458:	2807883a 	mov	r3,r5
 200045c:	1009883a 	mov	r4,r2
 2000460:	180b883a 	mov	r5,r3
 2000464:	200056c0 	call	200056c <__fixunsdfsi>
 2000468:	80800415 	stw	r2,16(r16)
	return 0;
 200046c:	0005883a 	mov	r2,zero
}
 2000470:	e037883a 	mov	sp,fp
 2000474:	dfc00217 	ldw	ra,8(sp)
 2000478:	df000117 	ldw	fp,4(sp)
 200047c:	dc000017 	ldw	r16,0(sp)
 2000480:	dec00304 	addi	sp,sp,12
 2000484:	f800283a 	ret

02000488 <main>:
 *         Name:  main
 *  Description:  
 * =====================================================================================
 */
int main(void)
{
 2000488:	defff104 	addi	sp,sp,-60
 200048c:	dfc00e15 	stw	ra,56(sp)
 2000490:	df000d15 	stw	fp,52(sp)
 2000494:	df000d04 	addi	fp,sp,52
	unsigned char buffer[50]="Hello FPGA!\n";
 2000498:	00c08034 	movhi	r3,512
 200049c:	18d58804 	addi	r3,r3,22048
 20004a0:	18800017 	ldw	r2,0(r3)
 20004a4:	e0bff315 	stw	r2,-52(fp)
 20004a8:	18800117 	ldw	r2,4(r3)
 20004ac:	e0bff415 	stw	r2,-48(fp)
 20004b0:	18800217 	ldw	r2,8(r3)
 20004b4:	e0bff515 	stw	r2,-44(fp)
 20004b8:	18800303 	ldbu	r2,12(r3)
 20004bc:	e0bff605 	stb	r2,-40(fp)
 20004c0:	e13ff644 	addi	r4,fp,-39
 20004c4:	01800944 	movi	r6,37
 20004c8:	000b883a 	mov	r5,zero
 20004cc:	20014e80 	call	20014e8 <memset>


	uart.init();
 20004d0:	00808034 	movhi	r2,512
 20004d4:	1095ed04 	addi	r2,r2,22452
 20004d8:	10803617 	ldw	r2,216(r2)
 20004dc:	103ee83a 	callr	r2

	while(1){		
		if(uart.receive_flag){
 20004e0:	00808034 	movhi	r2,512
 20004e4:	1095ed04 	addi	r2,r2,22452
 20004e8:	10800017 	ldw	r2,0(r2)
 20004ec:	1005003a 	cmpeq	r2,r2,zero
 20004f0:	1000141e 	bne	r2,zero,2000544 <main+0xbc>
			memset(buffer,0,50);// clear buffer
 20004f4:	e03ff315 	stw	zero,-52(fp)
 20004f8:	e03ff415 	stw	zero,-48(fp)
 20004fc:	e03ff515 	stw	zero,-44(fp)
 2000500:	e03ff615 	stw	zero,-40(fp)
 2000504:	e03ff715 	stw	zero,-36(fp)
 2000508:	e03ff815 	stw	zero,-32(fp)
 200050c:	e03ff915 	stw	zero,-28(fp)
 2000510:	e03ffa15 	stw	zero,-24(fp)
 2000514:	e03ffb15 	stw	zero,-20(fp)
 2000518:	e03ffc15 	stw	zero,-16(fp)
 200051c:	e03ffd15 	stw	zero,-12(fp)
 2000520:	e03ffe15 	stw	zero,-8(fp)
 2000524:	e03fff0d 	sth	zero,-4(fp)

			strcpy(buffer,uart.receive_buffer);//copy uart.receive_buffer to buffer
 2000528:	e13ff304 	addi	r4,fp,-52
 200052c:	01408034 	movhi	r5,512
 2000530:	2955ef04 	addi	r5,r5,22460
 2000534:	20015800 	call	2001580 <strcpy>

			uart.receive_flag = 0;//clear flags
 2000538:	00808034 	movhi	r2,512
 200053c:	1095ed04 	addi	r2,r2,22452
 2000540:	10000015 	stw	zero,0(r2)
		}
		uart.send_string(sizeof(buffer),buffer);
 2000544:	00808034 	movhi	r2,512
 2000548:	1095ed04 	addi	r2,r2,22452
 200054c:	10803517 	ldw	r2,212(r2)
 2000550:	01000c84 	movi	r4,50
 2000554:	e17ff304 	addi	r5,fp,-52
 2000558:	103ee83a 	callr	r2

		usleep(500000);
 200055c:	01000234 	movhi	r4,8
 2000560:	21284804 	addi	r4,r4,-24288
 2000564:	20019440 	call	2001944 <usleep>
	}
 2000568:	003fdd06 	br	20004e0 <main+0x58>

0200056c <__fixunsdfsi>:
 200056c:	defffb04 	addi	sp,sp,-20
 2000570:	dc400115 	stw	r17,4(sp)
 2000574:	dc000015 	stw	r16,0(sp)
 2000578:	04507834 	movhi	r17,16864
 200057c:	0021883a 	mov	r16,zero
 2000580:	800d883a 	mov	r6,r16
 2000584:	880f883a 	mov	r7,r17
 2000588:	dcc00315 	stw	r19,12(sp)
 200058c:	dc800215 	stw	r18,8(sp)
 2000590:	2827883a 	mov	r19,r5
 2000594:	2025883a 	mov	r18,r4
 2000598:	dfc00415 	stw	ra,16(sp)
 200059c:	2000b140 	call	2000b14 <__gedf2>
 20005a0:	000d883a 	mov	r6,zero
 20005a4:	880f883a 	mov	r7,r17
 20005a8:	980b883a 	mov	r5,r19
 20005ac:	9009883a 	mov	r4,r18
 20005b0:	10000d16 	blt	r2,zero,20005e8 <__fixunsdfsi+0x7c>
 20005b4:	2000a200 	call	2000a20 <__subdf3>
 20005b8:	180b883a 	mov	r5,r3
 20005bc:	1009883a 	mov	r4,r2
 20005c0:	2000b9c0 	call	2000b9c <__fixdfsi>
 20005c4:	00e00034 	movhi	r3,32768
 20005c8:	10c5883a 	add	r2,r2,r3
 20005cc:	dfc00417 	ldw	ra,16(sp)
 20005d0:	dcc00317 	ldw	r19,12(sp)
 20005d4:	dc800217 	ldw	r18,8(sp)
 20005d8:	dc400117 	ldw	r17,4(sp)
 20005dc:	dc000017 	ldw	r16,0(sp)
 20005e0:	dec00504 	addi	sp,sp,20
 20005e4:	f800283a 	ret
 20005e8:	980b883a 	mov	r5,r19
 20005ec:	9009883a 	mov	r4,r18
 20005f0:	2000b9c0 	call	2000b9c <__fixdfsi>
 20005f4:	dfc00417 	ldw	ra,16(sp)
 20005f8:	dcc00317 	ldw	r19,12(sp)
 20005fc:	dc800217 	ldw	r18,8(sp)
 2000600:	dc400117 	ldw	r17,4(sp)
 2000604:	dc000017 	ldw	r16,0(sp)
 2000608:	dec00504 	addi	sp,sp,20
 200060c:	f800283a 	ret

02000610 <_fpadd_parts>:
 2000610:	defff804 	addi	sp,sp,-32
 2000614:	dcc00315 	stw	r19,12(sp)
 2000618:	2027883a 	mov	r19,r4
 200061c:	21000017 	ldw	r4,0(r4)
 2000620:	00c00044 	movi	r3,1
 2000624:	dd400515 	stw	r21,20(sp)
 2000628:	dd000415 	stw	r20,16(sp)
 200062c:	ddc00715 	stw	r23,28(sp)
 2000630:	dd800615 	stw	r22,24(sp)
 2000634:	dc800215 	stw	r18,8(sp)
 2000638:	dc400115 	stw	r17,4(sp)
 200063c:	dc000015 	stw	r16,0(sp)
 2000640:	282b883a 	mov	r21,r5
 2000644:	3029883a 	mov	r20,r6
 2000648:	1900632e 	bgeu	r3,r4,20007d8 <_fpadd_parts+0x1c8>
 200064c:	28800017 	ldw	r2,0(r5)
 2000650:	1880812e 	bgeu	r3,r2,2000858 <_fpadd_parts+0x248>
 2000654:	00c00104 	movi	r3,4
 2000658:	20c0dc26 	beq	r4,r3,20009cc <_fpadd_parts+0x3bc>
 200065c:	10c07e26 	beq	r2,r3,2000858 <_fpadd_parts+0x248>
 2000660:	00c00084 	movi	r3,2
 2000664:	10c06726 	beq	r2,r3,2000804 <_fpadd_parts+0x1f4>
 2000668:	20c07b26 	beq	r4,r3,2000858 <_fpadd_parts+0x248>
 200066c:	9dc00217 	ldw	r23,8(r19)
 2000670:	28c00217 	ldw	r3,8(r5)
 2000674:	9c400317 	ldw	r17,12(r19)
 2000678:	2bc00317 	ldw	r15,12(r5)
 200067c:	b8cdc83a 	sub	r6,r23,r3
 2000680:	9c800417 	ldw	r18,16(r19)
 2000684:	2c000417 	ldw	r16,16(r5)
 2000688:	3009883a 	mov	r4,r6
 200068c:	30009716 	blt	r6,zero,20008ec <_fpadd_parts+0x2dc>
 2000690:	00800fc4 	movi	r2,63
 2000694:	11806b16 	blt	r2,r6,2000844 <_fpadd_parts+0x234>
 2000698:	0100a40e 	bge	zero,r4,200092c <_fpadd_parts+0x31c>
 200069c:	35bff804 	addi	r22,r6,-32
 20006a0:	b000bc16 	blt	r22,zero,2000994 <_fpadd_parts+0x384>
 20006a4:	8596d83a 	srl	r11,r16,r22
 20006a8:	0019883a 	mov	r12,zero
 20006ac:	0013883a 	mov	r9,zero
 20006b0:	01000044 	movi	r4,1
 20006b4:	0015883a 	mov	r10,zero
 20006b8:	b000be16 	blt	r22,zero,20009b4 <_fpadd_parts+0x3a4>
 20006bc:	2590983a 	sll	r8,r4,r22
 20006c0:	000f883a 	mov	r7,zero
 20006c4:	00bfffc4 	movi	r2,-1
 20006c8:	3889883a 	add	r4,r7,r2
 20006cc:	408b883a 	add	r5,r8,r2
 20006d0:	21cd803a 	cmpltu	r6,r4,r7
 20006d4:	314b883a 	add	r5,r6,r5
 20006d8:	7904703a 	and	r2,r15,r4
 20006dc:	8146703a 	and	r3,r16,r5
 20006e0:	10c4b03a 	or	r2,r2,r3
 20006e4:	10000226 	beq	r2,zero,20006f0 <_fpadd_parts+0xe0>
 20006e8:	02400044 	movi	r9,1
 20006ec:	0015883a 	mov	r10,zero
 20006f0:	5a5eb03a 	or	r15,r11,r9
 20006f4:	62a0b03a 	or	r16,r12,r10
 20006f8:	99400117 	ldw	r5,4(r19)
 20006fc:	a8800117 	ldw	r2,4(r21)
 2000700:	28806e26 	beq	r5,r2,20008bc <_fpadd_parts+0x2ac>
 2000704:	28006626 	beq	r5,zero,20008a0 <_fpadd_parts+0x290>
 2000708:	7c45c83a 	sub	r2,r15,r17
 200070c:	7889803a 	cmpltu	r4,r15,r2
 2000710:	8487c83a 	sub	r3,r16,r18
 2000714:	1909c83a 	sub	r4,r3,r4
 2000718:	100d883a 	mov	r6,r2
 200071c:	200f883a 	mov	r7,r4
 2000720:	38007716 	blt	r7,zero,2000900 <_fpadd_parts+0x2f0>
 2000724:	a5c00215 	stw	r23,8(r20)
 2000728:	a1c00415 	stw	r7,16(r20)
 200072c:	a0000115 	stw	zero,4(r20)
 2000730:	a1800315 	stw	r6,12(r20)
 2000734:	a2000317 	ldw	r8,12(r20)
 2000738:	a2400417 	ldw	r9,16(r20)
 200073c:	00bfffc4 	movi	r2,-1
 2000740:	408b883a 	add	r5,r8,r2
 2000744:	2a09803a 	cmpltu	r4,r5,r8
 2000748:	488d883a 	add	r6,r9,r2
 200074c:	01c40034 	movhi	r7,4096
 2000750:	39ffffc4 	addi	r7,r7,-1
 2000754:	218d883a 	add	r6,r4,r6
 2000758:	39801736 	bltu	r7,r6,20007b8 <_fpadd_parts+0x1a8>
 200075c:	31c06526 	beq	r6,r7,20008f4 <_fpadd_parts+0x2e4>
 2000760:	a3000217 	ldw	r12,8(r20)
 2000764:	4209883a 	add	r4,r8,r8
 2000768:	00bfffc4 	movi	r2,-1
 200076c:	220f803a 	cmpltu	r7,r4,r8
 2000770:	4a4b883a 	add	r5,r9,r9
 2000774:	394f883a 	add	r7,r7,r5
 2000778:	2095883a 	add	r10,r4,r2
 200077c:	3897883a 	add	r11,r7,r2
 2000780:	510d803a 	cmpltu	r6,r10,r4
 2000784:	6099883a 	add	r12,r12,r2
 2000788:	32d7883a 	add	r11,r6,r11
 200078c:	00840034 	movhi	r2,4096
 2000790:	10bfffc4 	addi	r2,r2,-1
 2000794:	2011883a 	mov	r8,r4
 2000798:	3813883a 	mov	r9,r7
 200079c:	a1000315 	stw	r4,12(r20)
 20007a0:	a1c00415 	stw	r7,16(r20)
 20007a4:	a3000215 	stw	r12,8(r20)
 20007a8:	12c00336 	bltu	r2,r11,20007b8 <_fpadd_parts+0x1a8>
 20007ac:	58bfed1e 	bne	r11,r2,2000764 <_fpadd_parts+0x154>
 20007b0:	00bfff84 	movi	r2,-2
 20007b4:	12bfeb2e 	bgeu	r2,r10,2000764 <_fpadd_parts+0x154>
 20007b8:	a2800417 	ldw	r10,16(r20)
 20007bc:	008000c4 	movi	r2,3
 20007c0:	00c80034 	movhi	r3,8192
 20007c4:	18ffffc4 	addi	r3,r3,-1
 20007c8:	a2400317 	ldw	r9,12(r20)
 20007cc:	a0800015 	stw	r2,0(r20)
 20007d0:	1a802336 	bltu	r3,r10,2000860 <_fpadd_parts+0x250>
 20007d4:	a027883a 	mov	r19,r20
 20007d8:	9805883a 	mov	r2,r19
 20007dc:	ddc00717 	ldw	r23,28(sp)
 20007e0:	dd800617 	ldw	r22,24(sp)
 20007e4:	dd400517 	ldw	r21,20(sp)
 20007e8:	dd000417 	ldw	r20,16(sp)
 20007ec:	dcc00317 	ldw	r19,12(sp)
 20007f0:	dc800217 	ldw	r18,8(sp)
 20007f4:	dc400117 	ldw	r17,4(sp)
 20007f8:	dc000017 	ldw	r16,0(sp)
 20007fc:	dec00804 	addi	sp,sp,32
 2000800:	f800283a 	ret
 2000804:	20fff41e 	bne	r4,r3,20007d8 <_fpadd_parts+0x1c8>
 2000808:	31000015 	stw	r4,0(r6)
 200080c:	98800117 	ldw	r2,4(r19)
 2000810:	30800115 	stw	r2,4(r6)
 2000814:	98c00217 	ldw	r3,8(r19)
 2000818:	30c00215 	stw	r3,8(r6)
 200081c:	98800317 	ldw	r2,12(r19)
 2000820:	30800315 	stw	r2,12(r6)
 2000824:	98c00417 	ldw	r3,16(r19)
 2000828:	30c00415 	stw	r3,16(r6)
 200082c:	98800117 	ldw	r2,4(r19)
 2000830:	28c00117 	ldw	r3,4(r5)
 2000834:	3027883a 	mov	r19,r6
 2000838:	10c4703a 	and	r2,r2,r3
 200083c:	30800115 	stw	r2,4(r6)
 2000840:	003fe506 	br	20007d8 <_fpadd_parts+0x1c8>
 2000844:	1dc02616 	blt	r3,r23,20008e0 <_fpadd_parts+0x2d0>
 2000848:	0023883a 	mov	r17,zero
 200084c:	182f883a 	mov	r23,r3
 2000850:	0025883a 	mov	r18,zero
 2000854:	003fa806 	br	20006f8 <_fpadd_parts+0xe8>
 2000858:	a827883a 	mov	r19,r21
 200085c:	003fde06 	br	20007d8 <_fpadd_parts+0x1c8>
 2000860:	01800044 	movi	r6,1
 2000864:	500497fa 	slli	r2,r10,31
 2000868:	4808d07a 	srli	r4,r9,1
 200086c:	518ad83a 	srl	r5,r10,r6
 2000870:	a2000217 	ldw	r8,8(r20)
 2000874:	1108b03a 	or	r4,r2,r4
 2000878:	0007883a 	mov	r3,zero
 200087c:	4984703a 	and	r2,r9,r6
 2000880:	208cb03a 	or	r6,r4,r2
 2000884:	28ceb03a 	or	r7,r5,r3
 2000888:	42000044 	addi	r8,r8,1
 200088c:	a027883a 	mov	r19,r20
 2000890:	a1c00415 	stw	r7,16(r20)
 2000894:	a2000215 	stw	r8,8(r20)
 2000898:	a1800315 	stw	r6,12(r20)
 200089c:	003fce06 	br	20007d8 <_fpadd_parts+0x1c8>
 20008a0:	8bc5c83a 	sub	r2,r17,r15
 20008a4:	8889803a 	cmpltu	r4,r17,r2
 20008a8:	9407c83a 	sub	r3,r18,r16
 20008ac:	1909c83a 	sub	r4,r3,r4
 20008b0:	100d883a 	mov	r6,r2
 20008b4:	200f883a 	mov	r7,r4
 20008b8:	003f9906 	br	2000720 <_fpadd_parts+0x110>
 20008bc:	7c45883a 	add	r2,r15,r17
 20008c0:	13c9803a 	cmpltu	r4,r2,r15
 20008c4:	8487883a 	add	r3,r16,r18
 20008c8:	20c9883a 	add	r4,r4,r3
 20008cc:	a1400115 	stw	r5,4(r20)
 20008d0:	a5c00215 	stw	r23,8(r20)
 20008d4:	a0800315 	stw	r2,12(r20)
 20008d8:	a1000415 	stw	r4,16(r20)
 20008dc:	003fb606 	br	20007b8 <_fpadd_parts+0x1a8>
 20008e0:	001f883a 	mov	r15,zero
 20008e4:	0021883a 	mov	r16,zero
 20008e8:	003f8306 	br	20006f8 <_fpadd_parts+0xe8>
 20008ec:	018dc83a 	sub	r6,zero,r6
 20008f0:	003f6706 	br	2000690 <_fpadd_parts+0x80>
 20008f4:	00bfff84 	movi	r2,-2
 20008f8:	117faf36 	bltu	r2,r5,20007b8 <_fpadd_parts+0x1a8>
 20008fc:	003f9806 	br	2000760 <_fpadd_parts+0x150>
 2000900:	0005883a 	mov	r2,zero
 2000904:	1189c83a 	sub	r4,r2,r6
 2000908:	1105803a 	cmpltu	r2,r2,r4
 200090c:	01cbc83a 	sub	r5,zero,r7
 2000910:	2885c83a 	sub	r2,r5,r2
 2000914:	01800044 	movi	r6,1
 2000918:	a1800115 	stw	r6,4(r20)
 200091c:	a5c00215 	stw	r23,8(r20)
 2000920:	a1000315 	stw	r4,12(r20)
 2000924:	a0800415 	stw	r2,16(r20)
 2000928:	003f8206 	br	2000734 <_fpadd_parts+0x124>
 200092c:	203f7226 	beq	r4,zero,20006f8 <_fpadd_parts+0xe8>
 2000930:	35bff804 	addi	r22,r6,-32
 2000934:	b9af883a 	add	r23,r23,r6
 2000938:	b0003116 	blt	r22,zero,2000a00 <_fpadd_parts+0x3f0>
 200093c:	959ad83a 	srl	r13,r18,r22
 2000940:	001d883a 	mov	r14,zero
 2000944:	000f883a 	mov	r7,zero
 2000948:	01000044 	movi	r4,1
 200094c:	0011883a 	mov	r8,zero
 2000950:	b0002516 	blt	r22,zero,20009e8 <_fpadd_parts+0x3d8>
 2000954:	2594983a 	sll	r10,r4,r22
 2000958:	0013883a 	mov	r9,zero
 200095c:	00bfffc4 	movi	r2,-1
 2000960:	4889883a 	add	r4,r9,r2
 2000964:	508b883a 	add	r5,r10,r2
 2000968:	224d803a 	cmpltu	r6,r4,r9
 200096c:	314b883a 	add	r5,r6,r5
 2000970:	8904703a 	and	r2,r17,r4
 2000974:	9146703a 	and	r3,r18,r5
 2000978:	10c4b03a 	or	r2,r2,r3
 200097c:	10000226 	beq	r2,zero,2000988 <_fpadd_parts+0x378>
 2000980:	01c00044 	movi	r7,1
 2000984:	0011883a 	mov	r8,zero
 2000988:	69e2b03a 	or	r17,r13,r7
 200098c:	7224b03a 	or	r18,r14,r8
 2000990:	003f5906 	br	20006f8 <_fpadd_parts+0xe8>
 2000994:	8407883a 	add	r3,r16,r16
 2000998:	008007c4 	movi	r2,31
 200099c:	1185c83a 	sub	r2,r2,r6
 20009a0:	1886983a 	sll	r3,r3,r2
 20009a4:	7996d83a 	srl	r11,r15,r6
 20009a8:	8198d83a 	srl	r12,r16,r6
 20009ac:	1ad6b03a 	or	r11,r3,r11
 20009b0:	003f3e06 	br	20006ac <_fpadd_parts+0x9c>
 20009b4:	2006d07a 	srli	r3,r4,1
 20009b8:	008007c4 	movi	r2,31
 20009bc:	1185c83a 	sub	r2,r2,r6
 20009c0:	1890d83a 	srl	r8,r3,r2
 20009c4:	218e983a 	sll	r7,r4,r6
 20009c8:	003f3e06 	br	20006c4 <_fpadd_parts+0xb4>
 20009cc:	113f821e 	bne	r2,r4,20007d8 <_fpadd_parts+0x1c8>
 20009d0:	28c00117 	ldw	r3,4(r5)
 20009d4:	98800117 	ldw	r2,4(r19)
 20009d8:	10ff7f26 	beq	r2,r3,20007d8 <_fpadd_parts+0x1c8>
 20009dc:	04c08034 	movhi	r19,512
 20009e0:	9cd59504 	addi	r19,r19,22100
 20009e4:	003f7c06 	br	20007d8 <_fpadd_parts+0x1c8>
 20009e8:	2006d07a 	srli	r3,r4,1
 20009ec:	008007c4 	movi	r2,31
 20009f0:	1185c83a 	sub	r2,r2,r6
 20009f4:	1894d83a 	srl	r10,r3,r2
 20009f8:	2192983a 	sll	r9,r4,r6
 20009fc:	003fd706 	br	200095c <_fpadd_parts+0x34c>
 2000a00:	9487883a 	add	r3,r18,r18
 2000a04:	008007c4 	movi	r2,31
 2000a08:	1185c83a 	sub	r2,r2,r6
 2000a0c:	1886983a 	sll	r3,r3,r2
 2000a10:	899ad83a 	srl	r13,r17,r6
 2000a14:	919cd83a 	srl	r14,r18,r6
 2000a18:	1b5ab03a 	or	r13,r3,r13
 2000a1c:	003fc906 	br	2000944 <_fpadd_parts+0x334>

02000a20 <__subdf3>:
 2000a20:	deffea04 	addi	sp,sp,-88
 2000a24:	dcc01415 	stw	r19,80(sp)
 2000a28:	dcc00404 	addi	r19,sp,16
 2000a2c:	2011883a 	mov	r8,r4
 2000a30:	2813883a 	mov	r9,r5
 2000a34:	dc401315 	stw	r17,76(sp)
 2000a38:	d809883a 	mov	r4,sp
 2000a3c:	980b883a 	mov	r5,r19
 2000a40:	dc400904 	addi	r17,sp,36
 2000a44:	dfc01515 	stw	ra,84(sp)
 2000a48:	da400115 	stw	r9,4(sp)
 2000a4c:	d9c00315 	stw	r7,12(sp)
 2000a50:	da000015 	stw	r8,0(sp)
 2000a54:	d9800215 	stw	r6,8(sp)
 2000a58:	20012e80 	call	20012e8 <__unpack_d>
 2000a5c:	d9000204 	addi	r4,sp,8
 2000a60:	880b883a 	mov	r5,r17
 2000a64:	20012e80 	call	20012e8 <__unpack_d>
 2000a68:	d8800a17 	ldw	r2,40(sp)
 2000a6c:	880b883a 	mov	r5,r17
 2000a70:	9809883a 	mov	r4,r19
 2000a74:	d9800e04 	addi	r6,sp,56
 2000a78:	1080005c 	xori	r2,r2,1
 2000a7c:	d8800a15 	stw	r2,40(sp)
 2000a80:	20006100 	call	2000610 <_fpadd_parts>
 2000a84:	1009883a 	mov	r4,r2
 2000a88:	2000fd40 	call	2000fd4 <__pack_d>
 2000a8c:	dfc01517 	ldw	ra,84(sp)
 2000a90:	dcc01417 	ldw	r19,80(sp)
 2000a94:	dc401317 	ldw	r17,76(sp)
 2000a98:	dec01604 	addi	sp,sp,88
 2000a9c:	f800283a 	ret

02000aa0 <__adddf3>:
 2000aa0:	deffea04 	addi	sp,sp,-88
 2000aa4:	dcc01415 	stw	r19,80(sp)
 2000aa8:	dcc00404 	addi	r19,sp,16
 2000aac:	2011883a 	mov	r8,r4
 2000ab0:	2813883a 	mov	r9,r5
 2000ab4:	dc401315 	stw	r17,76(sp)
 2000ab8:	d809883a 	mov	r4,sp
 2000abc:	980b883a 	mov	r5,r19
 2000ac0:	dc400904 	addi	r17,sp,36
 2000ac4:	dfc01515 	stw	ra,84(sp)
 2000ac8:	da400115 	stw	r9,4(sp)
 2000acc:	d9c00315 	stw	r7,12(sp)
 2000ad0:	da000015 	stw	r8,0(sp)
 2000ad4:	d9800215 	stw	r6,8(sp)
 2000ad8:	20012e80 	call	20012e8 <__unpack_d>
 2000adc:	d9000204 	addi	r4,sp,8
 2000ae0:	880b883a 	mov	r5,r17
 2000ae4:	20012e80 	call	20012e8 <__unpack_d>
 2000ae8:	d9800e04 	addi	r6,sp,56
 2000aec:	9809883a 	mov	r4,r19
 2000af0:	880b883a 	mov	r5,r17
 2000af4:	20006100 	call	2000610 <_fpadd_parts>
 2000af8:	1009883a 	mov	r4,r2
 2000afc:	2000fd40 	call	2000fd4 <__pack_d>
 2000b00:	dfc01517 	ldw	ra,84(sp)
 2000b04:	dcc01417 	ldw	r19,80(sp)
 2000b08:	dc401317 	ldw	r17,76(sp)
 2000b0c:	dec01604 	addi	sp,sp,88
 2000b10:	f800283a 	ret

02000b14 <__gedf2>:
 2000b14:	deffef04 	addi	sp,sp,-68
 2000b18:	dc400f15 	stw	r17,60(sp)
 2000b1c:	dc400404 	addi	r17,sp,16
 2000b20:	2005883a 	mov	r2,r4
 2000b24:	2807883a 	mov	r3,r5
 2000b28:	dc000e15 	stw	r16,56(sp)
 2000b2c:	d809883a 	mov	r4,sp
 2000b30:	880b883a 	mov	r5,r17
 2000b34:	dc000904 	addi	r16,sp,36
 2000b38:	d8c00115 	stw	r3,4(sp)
 2000b3c:	d8800015 	stw	r2,0(sp)
 2000b40:	d9800215 	stw	r6,8(sp)
 2000b44:	dfc01015 	stw	ra,64(sp)
 2000b48:	d9c00315 	stw	r7,12(sp)
 2000b4c:	20012e80 	call	20012e8 <__unpack_d>
 2000b50:	d9000204 	addi	r4,sp,8
 2000b54:	800b883a 	mov	r5,r16
 2000b58:	20012e80 	call	20012e8 <__unpack_d>
 2000b5c:	d8800417 	ldw	r2,16(sp)
 2000b60:	00c00044 	movi	r3,1
 2000b64:	01bfffc4 	movi	r6,-1
 2000b68:	1880062e 	bgeu	r3,r2,2000b84 <__gedf2+0x70>
 2000b6c:	d8800917 	ldw	r2,36(sp)
 2000b70:	8809883a 	mov	r4,r17
 2000b74:	800b883a 	mov	r5,r16
 2000b78:	1880022e 	bgeu	r3,r2,2000b84 <__gedf2+0x70>
 2000b7c:	20014200 	call	2001420 <__fpcmp_parts_d>
 2000b80:	100d883a 	mov	r6,r2
 2000b84:	3005883a 	mov	r2,r6
 2000b88:	dfc01017 	ldw	ra,64(sp)
 2000b8c:	dc400f17 	ldw	r17,60(sp)
 2000b90:	dc000e17 	ldw	r16,56(sp)
 2000b94:	dec01104 	addi	sp,sp,68
 2000b98:	f800283a 	ret

02000b9c <__fixdfsi>:
 2000b9c:	defff804 	addi	sp,sp,-32
 2000ba0:	2005883a 	mov	r2,r4
 2000ba4:	2807883a 	mov	r3,r5
 2000ba8:	d809883a 	mov	r4,sp
 2000bac:	d9400204 	addi	r5,sp,8
 2000bb0:	d8c00115 	stw	r3,4(sp)
 2000bb4:	d8800015 	stw	r2,0(sp)
 2000bb8:	dfc00715 	stw	ra,28(sp)
 2000bbc:	20012e80 	call	20012e8 <__unpack_d>
 2000bc0:	d8c00217 	ldw	r3,8(sp)
 2000bc4:	00800084 	movi	r2,2
 2000bc8:	1880051e 	bne	r3,r2,2000be0 <__fixdfsi+0x44>
 2000bcc:	0007883a 	mov	r3,zero
 2000bd0:	1805883a 	mov	r2,r3
 2000bd4:	dfc00717 	ldw	ra,28(sp)
 2000bd8:	dec00804 	addi	sp,sp,32
 2000bdc:	f800283a 	ret
 2000be0:	00800044 	movi	r2,1
 2000be4:	10fff92e 	bgeu	r2,r3,2000bcc <__fixdfsi+0x30>
 2000be8:	00800104 	movi	r2,4
 2000bec:	18800426 	beq	r3,r2,2000c00 <__fixdfsi+0x64>
 2000bf0:	d8c00417 	ldw	r3,16(sp)
 2000bf4:	183ff516 	blt	r3,zero,2000bcc <__fixdfsi+0x30>
 2000bf8:	00800784 	movi	r2,30
 2000bfc:	10c0080e 	bge	r2,r3,2000c20 <__fixdfsi+0x84>
 2000c00:	d8800317 	ldw	r2,12(sp)
 2000c04:	1000121e 	bne	r2,zero,2000c50 <__fixdfsi+0xb4>
 2000c08:	00e00034 	movhi	r3,32768
 2000c0c:	18ffffc4 	addi	r3,r3,-1
 2000c10:	1805883a 	mov	r2,r3
 2000c14:	dfc00717 	ldw	ra,28(sp)
 2000c18:	dec00804 	addi	sp,sp,32
 2000c1c:	f800283a 	ret
 2000c20:	00800f04 	movi	r2,60
 2000c24:	10d1c83a 	sub	r8,r2,r3
 2000c28:	40bff804 	addi	r2,r8,-32
 2000c2c:	d9800517 	ldw	r6,20(sp)
 2000c30:	d9c00617 	ldw	r7,24(sp)
 2000c34:	10000816 	blt	r2,zero,2000c58 <__fixdfsi+0xbc>
 2000c38:	3888d83a 	srl	r4,r7,r2
 2000c3c:	d8800317 	ldw	r2,12(sp)
 2000c40:	2007883a 	mov	r3,r4
 2000c44:	103fe226 	beq	r2,zero,2000bd0 <__fixdfsi+0x34>
 2000c48:	0107c83a 	sub	r3,zero,r4
 2000c4c:	003fe006 	br	2000bd0 <__fixdfsi+0x34>
 2000c50:	00e00034 	movhi	r3,32768
 2000c54:	003fde06 	br	2000bd0 <__fixdfsi+0x34>
 2000c58:	39c7883a 	add	r3,r7,r7
 2000c5c:	008007c4 	movi	r2,31
 2000c60:	1205c83a 	sub	r2,r2,r8
 2000c64:	1886983a 	sll	r3,r3,r2
 2000c68:	3208d83a 	srl	r4,r6,r8
 2000c6c:	1908b03a 	or	r4,r3,r4
 2000c70:	003ff206 	br	2000c3c <__fixdfsi+0xa0>

02000c74 <__floatunsidf>:
 2000c74:	defff204 	addi	sp,sp,-56
 2000c78:	dfc00d15 	stw	ra,52(sp)
 2000c7c:	ddc00c15 	stw	r23,48(sp)
 2000c80:	dd800b15 	stw	r22,44(sp)
 2000c84:	dd400a15 	stw	r21,40(sp)
 2000c88:	dd000915 	stw	r20,36(sp)
 2000c8c:	dcc00815 	stw	r19,32(sp)
 2000c90:	dc800715 	stw	r18,28(sp)
 2000c94:	dc400615 	stw	r17,24(sp)
 2000c98:	dc000515 	stw	r16,20(sp)
 2000c9c:	d8000115 	stw	zero,4(sp)
 2000ca0:	20000f1e 	bne	r4,zero,2000ce0 <__floatunsidf+0x6c>
 2000ca4:	00800084 	movi	r2,2
 2000ca8:	d8800015 	stw	r2,0(sp)
 2000cac:	d809883a 	mov	r4,sp
 2000cb0:	2000fd40 	call	2000fd4 <__pack_d>
 2000cb4:	dfc00d17 	ldw	ra,52(sp)
 2000cb8:	ddc00c17 	ldw	r23,48(sp)
 2000cbc:	dd800b17 	ldw	r22,44(sp)
 2000cc0:	dd400a17 	ldw	r21,40(sp)
 2000cc4:	dd000917 	ldw	r20,36(sp)
 2000cc8:	dcc00817 	ldw	r19,32(sp)
 2000ccc:	dc800717 	ldw	r18,28(sp)
 2000cd0:	dc400617 	ldw	r17,24(sp)
 2000cd4:	dc000517 	ldw	r16,20(sp)
 2000cd8:	dec00e04 	addi	sp,sp,56
 2000cdc:	f800283a 	ret
 2000ce0:	008000c4 	movi	r2,3
 2000ce4:	00c00f04 	movi	r3,60
 2000ce8:	002f883a 	mov	r23,zero
 2000cec:	202d883a 	mov	r22,r4
 2000cf0:	d8800015 	stw	r2,0(sp)
 2000cf4:	d8c00215 	stw	r3,8(sp)
 2000cf8:	d9000315 	stw	r4,12(sp)
 2000cfc:	ddc00415 	stw	r23,16(sp)
 2000d00:	2000f540 	call	2000f54 <__clzsi2>
 2000d04:	12400744 	addi	r9,r2,29
 2000d08:	48000b16 	blt	r9,zero,2000d38 <__floatunsidf+0xc4>
 2000d0c:	483fe726 	beq	r9,zero,2000cac <__floatunsidf+0x38>
 2000d10:	10bfff44 	addi	r2,r2,-3
 2000d14:	10002e16 	blt	r2,zero,2000dd0 <__floatunsidf+0x15c>
 2000d18:	b0a2983a 	sll	r17,r22,r2
 2000d1c:	0021883a 	mov	r16,zero
 2000d20:	d8800217 	ldw	r2,8(sp)
 2000d24:	dc400415 	stw	r17,16(sp)
 2000d28:	dc000315 	stw	r16,12(sp)
 2000d2c:	1245c83a 	sub	r2,r2,r9
 2000d30:	d8800215 	stw	r2,8(sp)
 2000d34:	003fdd06 	br	2000cac <__floatunsidf+0x38>
 2000d38:	0255c83a 	sub	r10,zero,r9
 2000d3c:	51bff804 	addi	r6,r10,-32
 2000d40:	30001b16 	blt	r6,zero,2000db0 <__floatunsidf+0x13c>
 2000d44:	b9a8d83a 	srl	r20,r23,r6
 2000d48:	002b883a 	mov	r21,zero
 2000d4c:	000f883a 	mov	r7,zero
 2000d50:	01000044 	movi	r4,1
 2000d54:	0011883a 	mov	r8,zero
 2000d58:	30002516 	blt	r6,zero,2000df0 <__floatunsidf+0x17c>
 2000d5c:	21a6983a 	sll	r19,r4,r6
 2000d60:	0025883a 	mov	r18,zero
 2000d64:	00bfffc4 	movi	r2,-1
 2000d68:	9089883a 	add	r4,r18,r2
 2000d6c:	988b883a 	add	r5,r19,r2
 2000d70:	248d803a 	cmpltu	r6,r4,r18
 2000d74:	314b883a 	add	r5,r6,r5
 2000d78:	b104703a 	and	r2,r22,r4
 2000d7c:	b946703a 	and	r3,r23,r5
 2000d80:	10c4b03a 	or	r2,r2,r3
 2000d84:	10000226 	beq	r2,zero,2000d90 <__floatunsidf+0x11c>
 2000d88:	01c00044 	movi	r7,1
 2000d8c:	0011883a 	mov	r8,zero
 2000d90:	d9000217 	ldw	r4,8(sp)
 2000d94:	a1c4b03a 	or	r2,r20,r7
 2000d98:	aa06b03a 	or	r3,r21,r8
 2000d9c:	2249c83a 	sub	r4,r4,r9
 2000da0:	d8c00415 	stw	r3,16(sp)
 2000da4:	d9000215 	stw	r4,8(sp)
 2000da8:	d8800315 	stw	r2,12(sp)
 2000dac:	003fbf06 	br	2000cac <__floatunsidf+0x38>
 2000db0:	bdc7883a 	add	r3,r23,r23
 2000db4:	008007c4 	movi	r2,31
 2000db8:	1285c83a 	sub	r2,r2,r10
 2000dbc:	1886983a 	sll	r3,r3,r2
 2000dc0:	b2a8d83a 	srl	r20,r22,r10
 2000dc4:	baaad83a 	srl	r21,r23,r10
 2000dc8:	1d28b03a 	or	r20,r3,r20
 2000dcc:	003fdf06 	br	2000d4c <__floatunsidf+0xd8>
 2000dd0:	b006d07a 	srli	r3,r22,1
 2000dd4:	008007c4 	movi	r2,31
 2000dd8:	1245c83a 	sub	r2,r2,r9
 2000ddc:	1886d83a 	srl	r3,r3,r2
 2000de0:	ba62983a 	sll	r17,r23,r9
 2000de4:	b260983a 	sll	r16,r22,r9
 2000de8:	1c62b03a 	or	r17,r3,r17
 2000dec:	003fcc06 	br	2000d20 <__floatunsidf+0xac>
 2000df0:	2006d07a 	srli	r3,r4,1
 2000df4:	008007c4 	movi	r2,31
 2000df8:	1285c83a 	sub	r2,r2,r10
 2000dfc:	18a6d83a 	srl	r19,r3,r2
 2000e00:	22a4983a 	sll	r18,r4,r10
 2000e04:	003fd706 	br	2000d64 <__floatunsidf+0xf0>

02000e08 <udivmodsi4>:
 2000e08:	29001b2e 	bgeu	r5,r4,2000e78 <udivmodsi4+0x70>
 2000e0c:	28001a16 	blt	r5,zero,2000e78 <udivmodsi4+0x70>
 2000e10:	00800044 	movi	r2,1
 2000e14:	0007883a 	mov	r3,zero
 2000e18:	01c007c4 	movi	r7,31
 2000e1c:	00000306 	br	2000e2c <udivmodsi4+0x24>
 2000e20:	19c01326 	beq	r3,r7,2000e70 <udivmodsi4+0x68>
 2000e24:	18c00044 	addi	r3,r3,1
 2000e28:	28000416 	blt	r5,zero,2000e3c <udivmodsi4+0x34>
 2000e2c:	294b883a 	add	r5,r5,r5
 2000e30:	1085883a 	add	r2,r2,r2
 2000e34:	293ffa36 	bltu	r5,r4,2000e20 <udivmodsi4+0x18>
 2000e38:	10000d26 	beq	r2,zero,2000e70 <udivmodsi4+0x68>
 2000e3c:	0007883a 	mov	r3,zero
 2000e40:	21400236 	bltu	r4,r5,2000e4c <udivmodsi4+0x44>
 2000e44:	2149c83a 	sub	r4,r4,r5
 2000e48:	1886b03a 	or	r3,r3,r2
 2000e4c:	1004d07a 	srli	r2,r2,1
 2000e50:	280ad07a 	srli	r5,r5,1
 2000e54:	103ffa1e 	bne	r2,zero,2000e40 <udivmodsi4+0x38>
 2000e58:	30000226 	beq	r6,zero,2000e64 <udivmodsi4+0x5c>
 2000e5c:	2005883a 	mov	r2,r4
 2000e60:	f800283a 	ret
 2000e64:	1809883a 	mov	r4,r3
 2000e68:	2005883a 	mov	r2,r4
 2000e6c:	f800283a 	ret
 2000e70:	0007883a 	mov	r3,zero
 2000e74:	003ff806 	br	2000e58 <udivmodsi4+0x50>
 2000e78:	00800044 	movi	r2,1
 2000e7c:	0007883a 	mov	r3,zero
 2000e80:	003fef06 	br	2000e40 <udivmodsi4+0x38>

02000e84 <__divsi3>:
 2000e84:	defffe04 	addi	sp,sp,-8
 2000e88:	dc000015 	stw	r16,0(sp)
 2000e8c:	dfc00115 	stw	ra,4(sp)
 2000e90:	0021883a 	mov	r16,zero
 2000e94:	20000c16 	blt	r4,zero,2000ec8 <__divsi3+0x44>
 2000e98:	000d883a 	mov	r6,zero
 2000e9c:	28000e16 	blt	r5,zero,2000ed8 <__divsi3+0x54>
 2000ea0:	2000e080 	call	2000e08 <udivmodsi4>
 2000ea4:	1007883a 	mov	r3,r2
 2000ea8:	8005003a 	cmpeq	r2,r16,zero
 2000eac:	1000011e 	bne	r2,zero,2000eb4 <__divsi3+0x30>
 2000eb0:	00c7c83a 	sub	r3,zero,r3
 2000eb4:	1805883a 	mov	r2,r3
 2000eb8:	dfc00117 	ldw	ra,4(sp)
 2000ebc:	dc000017 	ldw	r16,0(sp)
 2000ec0:	dec00204 	addi	sp,sp,8
 2000ec4:	f800283a 	ret
 2000ec8:	0109c83a 	sub	r4,zero,r4
 2000ecc:	04000044 	movi	r16,1
 2000ed0:	000d883a 	mov	r6,zero
 2000ed4:	283ff20e 	bge	r5,zero,2000ea0 <__divsi3+0x1c>
 2000ed8:	014bc83a 	sub	r5,zero,r5
 2000edc:	8021003a 	cmpeq	r16,r16,zero
 2000ee0:	003fef06 	br	2000ea0 <__divsi3+0x1c>

02000ee4 <__modsi3>:
 2000ee4:	deffff04 	addi	sp,sp,-4
 2000ee8:	dfc00015 	stw	ra,0(sp)
 2000eec:	01800044 	movi	r6,1
 2000ef0:	2807883a 	mov	r3,r5
 2000ef4:	20000416 	blt	r4,zero,2000f08 <__modsi3+0x24>
 2000ef8:	28000c16 	blt	r5,zero,2000f2c <__modsi3+0x48>
 2000efc:	dfc00017 	ldw	ra,0(sp)
 2000f00:	dec00104 	addi	sp,sp,4
 2000f04:	2000e081 	jmpi	2000e08 <udivmodsi4>
 2000f08:	0109c83a 	sub	r4,zero,r4
 2000f0c:	28000b16 	blt	r5,zero,2000f3c <__modsi3+0x58>
 2000f10:	180b883a 	mov	r5,r3
 2000f14:	01800044 	movi	r6,1
 2000f18:	2000e080 	call	2000e08 <udivmodsi4>
 2000f1c:	0085c83a 	sub	r2,zero,r2
 2000f20:	dfc00017 	ldw	ra,0(sp)
 2000f24:	dec00104 	addi	sp,sp,4
 2000f28:	f800283a 	ret
 2000f2c:	014bc83a 	sub	r5,zero,r5
 2000f30:	dfc00017 	ldw	ra,0(sp)
 2000f34:	dec00104 	addi	sp,sp,4
 2000f38:	2000e081 	jmpi	2000e08 <udivmodsi4>
 2000f3c:	0147c83a 	sub	r3,zero,r5
 2000f40:	003ff306 	br	2000f10 <__modsi3+0x2c>

02000f44 <__udivsi3>:
 2000f44:	000d883a 	mov	r6,zero
 2000f48:	2000e081 	jmpi	2000e08 <udivmodsi4>

02000f4c <__umodsi3>:
 2000f4c:	01800044 	movi	r6,1
 2000f50:	2000e081 	jmpi	2000e08 <udivmodsi4>

02000f54 <__clzsi2>:
 2000f54:	00bfffd4 	movui	r2,65535
 2000f58:	11000e36 	bltu	r2,r4,2000f94 <__clzsi2+0x40>
 2000f5c:	00803fc4 	movi	r2,255
 2000f60:	01400204 	movi	r5,8
 2000f64:	0007883a 	mov	r3,zero
 2000f68:	11001036 	bltu	r2,r4,2000fac <__clzsi2+0x58>
 2000f6c:	000b883a 	mov	r5,zero
 2000f70:	20c6d83a 	srl	r3,r4,r3
 2000f74:	00808034 	movhi	r2,512
 2000f78:	10959a04 	addi	r2,r2,22120
 2000f7c:	1887883a 	add	r3,r3,r2
 2000f80:	18800003 	ldbu	r2,0(r3)
 2000f84:	00c00804 	movi	r3,32
 2000f88:	2885883a 	add	r2,r5,r2
 2000f8c:	1885c83a 	sub	r2,r3,r2
 2000f90:	f800283a 	ret
 2000f94:	01400404 	movi	r5,16
 2000f98:	00804034 	movhi	r2,256
 2000f9c:	10bfffc4 	addi	r2,r2,-1
 2000fa0:	2807883a 	mov	r3,r5
 2000fa4:	113ff22e 	bgeu	r2,r4,2000f70 <__clzsi2+0x1c>
 2000fa8:	01400604 	movi	r5,24
 2000fac:	2807883a 	mov	r3,r5
 2000fb0:	20c6d83a 	srl	r3,r4,r3
 2000fb4:	00808034 	movhi	r2,512
 2000fb8:	10959a04 	addi	r2,r2,22120
 2000fbc:	1887883a 	add	r3,r3,r2
 2000fc0:	18800003 	ldbu	r2,0(r3)
 2000fc4:	00c00804 	movi	r3,32
 2000fc8:	2885883a 	add	r2,r5,r2
 2000fcc:	1885c83a 	sub	r2,r3,r2
 2000fd0:	f800283a 	ret

02000fd4 <__pack_d>:
 2000fd4:	20c00017 	ldw	r3,0(r4)
 2000fd8:	defffd04 	addi	sp,sp,-12
 2000fdc:	dc000015 	stw	r16,0(sp)
 2000fe0:	dc800215 	stw	r18,8(sp)
 2000fe4:	dc400115 	stw	r17,4(sp)
 2000fe8:	00800044 	movi	r2,1
 2000fec:	22000317 	ldw	r8,12(r4)
 2000ff0:	001f883a 	mov	r15,zero
 2000ff4:	22400417 	ldw	r9,16(r4)
 2000ff8:	24000117 	ldw	r16,4(r4)
 2000ffc:	10c0552e 	bgeu	r2,r3,2001154 <__pack_d+0x180>
 2001000:	00800104 	movi	r2,4
 2001004:	18804f26 	beq	r3,r2,2001144 <__pack_d+0x170>
 2001008:	00800084 	movi	r2,2
 200100c:	18800226 	beq	r3,r2,2001018 <__pack_d+0x44>
 2001010:	4244b03a 	or	r2,r8,r9
 2001014:	10001a1e 	bne	r2,zero,2001080 <__pack_d+0xac>
 2001018:	000d883a 	mov	r6,zero
 200101c:	000f883a 	mov	r7,zero
 2001020:	0011883a 	mov	r8,zero
 2001024:	00800434 	movhi	r2,16
 2001028:	10bfffc4 	addi	r2,r2,-1
 200102c:	301d883a 	mov	r14,r6
 2001030:	3884703a 	and	r2,r7,r2
 2001034:	400a953a 	slli	r5,r8,20
 2001038:	79bffc2c 	andhi	r6,r15,65520
 200103c:	308cb03a 	or	r6,r6,r2
 2001040:	00e00434 	movhi	r3,32784
 2001044:	18ffffc4 	addi	r3,r3,-1
 2001048:	800497fa 	slli	r2,r16,31
 200104c:	30c6703a 	and	r3,r6,r3
 2001050:	1946b03a 	or	r3,r3,r5
 2001054:	01600034 	movhi	r5,32768
 2001058:	297fffc4 	addi	r5,r5,-1
 200105c:	194a703a 	and	r5,r3,r5
 2001060:	288ab03a 	or	r5,r5,r2
 2001064:	2807883a 	mov	r3,r5
 2001068:	7005883a 	mov	r2,r14
 200106c:	dc800217 	ldw	r18,8(sp)
 2001070:	dc400117 	ldw	r17,4(sp)
 2001074:	dc000017 	ldw	r16,0(sp)
 2001078:	dec00304 	addi	sp,sp,12
 200107c:	f800283a 	ret
 2001080:	21000217 	ldw	r4,8(r4)
 2001084:	00bf0084 	movi	r2,-1022
 2001088:	20803f16 	blt	r4,r2,2001188 <__pack_d+0x1b4>
 200108c:	0080ffc4 	movi	r2,1023
 2001090:	11002c16 	blt	r2,r4,2001144 <__pack_d+0x170>
 2001094:	00803fc4 	movi	r2,255
 2001098:	408c703a 	and	r6,r8,r2
 200109c:	00802004 	movi	r2,128
 20010a0:	0007883a 	mov	r3,zero
 20010a4:	000f883a 	mov	r7,zero
 20010a8:	2280ffc4 	addi	r10,r4,1023
 20010ac:	30801e26 	beq	r6,r2,2001128 <__pack_d+0x154>
 20010b0:	00801fc4 	movi	r2,127
 20010b4:	4089883a 	add	r4,r8,r2
 20010b8:	220d803a 	cmpltu	r6,r4,r8
 20010bc:	324d883a 	add	r6,r6,r9
 20010c0:	2011883a 	mov	r8,r4
 20010c4:	3013883a 	mov	r9,r6
 20010c8:	00880034 	movhi	r2,8192
 20010cc:	10bfffc4 	addi	r2,r2,-1
 20010d0:	12400d36 	bltu	r2,r9,2001108 <__pack_d+0x134>
 20010d4:	4804963a 	slli	r2,r9,24
 20010d8:	400cd23a 	srli	r6,r8,8
 20010dc:	480ed23a 	srli	r7,r9,8
 20010e0:	013fffc4 	movi	r4,-1
 20010e4:	118cb03a 	or	r6,r2,r6
 20010e8:	01400434 	movhi	r5,16
 20010ec:	297fffc4 	addi	r5,r5,-1
 20010f0:	3104703a 	and	r2,r6,r4
 20010f4:	3946703a 	and	r3,r7,r5
 20010f8:	5201ffcc 	andi	r8,r10,2047
 20010fc:	100d883a 	mov	r6,r2
 2001100:	180f883a 	mov	r7,r3
 2001104:	003fc706 	br	2001024 <__pack_d+0x50>
 2001108:	480897fa 	slli	r4,r9,31
 200110c:	4004d07a 	srli	r2,r8,1
 2001110:	4806d07a 	srli	r3,r9,1
 2001114:	52800044 	addi	r10,r10,1
 2001118:	2084b03a 	or	r2,r4,r2
 200111c:	1011883a 	mov	r8,r2
 2001120:	1813883a 	mov	r9,r3
 2001124:	003feb06 	br	20010d4 <__pack_d+0x100>
 2001128:	383fe11e 	bne	r7,zero,20010b0 <__pack_d+0xdc>
 200112c:	01004004 	movi	r4,256
 2001130:	4104703a 	and	r2,r8,r4
 2001134:	10c4b03a 	or	r2,r2,r3
 2001138:	103fe326 	beq	r2,zero,20010c8 <__pack_d+0xf4>
 200113c:	3005883a 	mov	r2,r6
 2001140:	003fdc06 	br	20010b4 <__pack_d+0xe0>
 2001144:	000d883a 	mov	r6,zero
 2001148:	000f883a 	mov	r7,zero
 200114c:	0201ffc4 	movi	r8,2047
 2001150:	003fb406 	br	2001024 <__pack_d+0x50>
 2001154:	0005883a 	mov	r2,zero
 2001158:	00c00234 	movhi	r3,8
 200115c:	408cb03a 	or	r6,r8,r2
 2001160:	48ceb03a 	or	r7,r9,r3
 2001164:	013fffc4 	movi	r4,-1
 2001168:	01400434 	movhi	r5,16
 200116c:	297fffc4 	addi	r5,r5,-1
 2001170:	3104703a 	and	r2,r6,r4
 2001174:	3946703a 	and	r3,r7,r5
 2001178:	100d883a 	mov	r6,r2
 200117c:	180f883a 	mov	r7,r3
 2001180:	0201ffc4 	movi	r8,2047
 2001184:	003fa706 	br	2001024 <__pack_d+0x50>
 2001188:	1109c83a 	sub	r4,r2,r4
 200118c:	00800e04 	movi	r2,56
 2001190:	11004316 	blt	r2,r4,20012a0 <__pack_d+0x2cc>
 2001194:	21fff804 	addi	r7,r4,-32
 2001198:	38004516 	blt	r7,zero,20012b0 <__pack_d+0x2dc>
 200119c:	49d8d83a 	srl	r12,r9,r7
 20011a0:	001b883a 	mov	r13,zero
 20011a4:	0023883a 	mov	r17,zero
 20011a8:	01400044 	movi	r5,1
 20011ac:	0025883a 	mov	r18,zero
 20011b0:	38004716 	blt	r7,zero,20012d0 <__pack_d+0x2fc>
 20011b4:	29d6983a 	sll	r11,r5,r7
 20011b8:	0015883a 	mov	r10,zero
 20011bc:	00bfffc4 	movi	r2,-1
 20011c0:	5089883a 	add	r4,r10,r2
 20011c4:	588b883a 	add	r5,r11,r2
 20011c8:	228d803a 	cmpltu	r6,r4,r10
 20011cc:	314b883a 	add	r5,r6,r5
 20011d0:	4104703a 	and	r2,r8,r4
 20011d4:	4946703a 	and	r3,r9,r5
 20011d8:	10c4b03a 	or	r2,r2,r3
 20011dc:	10000226 	beq	r2,zero,20011e8 <__pack_d+0x214>
 20011e0:	04400044 	movi	r17,1
 20011e4:	0025883a 	mov	r18,zero
 20011e8:	00803fc4 	movi	r2,255
 20011ec:	644eb03a 	or	r7,r12,r17
 20011f0:	3892703a 	and	r9,r7,r2
 20011f4:	00802004 	movi	r2,128
 20011f8:	6c90b03a 	or	r8,r13,r18
 20011fc:	0015883a 	mov	r10,zero
 2001200:	48801626 	beq	r9,r2,200125c <__pack_d+0x288>
 2001204:	01001fc4 	movi	r4,127
 2001208:	3905883a 	add	r2,r7,r4
 200120c:	11cd803a 	cmpltu	r6,r2,r7
 2001210:	320d883a 	add	r6,r6,r8
 2001214:	100f883a 	mov	r7,r2
 2001218:	00840034 	movhi	r2,4096
 200121c:	10bfffc4 	addi	r2,r2,-1
 2001220:	3011883a 	mov	r8,r6
 2001224:	0007883a 	mov	r3,zero
 2001228:	11801b36 	bltu	r2,r6,2001298 <__pack_d+0x2c4>
 200122c:	4004963a 	slli	r2,r8,24
 2001230:	3808d23a 	srli	r4,r7,8
 2001234:	400ad23a 	srli	r5,r8,8
 2001238:	1813883a 	mov	r9,r3
 200123c:	1108b03a 	or	r4,r2,r4
 2001240:	00bfffc4 	movi	r2,-1
 2001244:	00c00434 	movhi	r3,16
 2001248:	18ffffc4 	addi	r3,r3,-1
 200124c:	208c703a 	and	r6,r4,r2
 2001250:	28ce703a 	and	r7,r5,r3
 2001254:	4a01ffcc 	andi	r8,r9,2047
 2001258:	003f7206 	br	2001024 <__pack_d+0x50>
 200125c:	503fe91e 	bne	r10,zero,2001204 <__pack_d+0x230>
 2001260:	01004004 	movi	r4,256
 2001264:	3904703a 	and	r2,r7,r4
 2001268:	0007883a 	mov	r3,zero
 200126c:	10c4b03a 	or	r2,r2,r3
 2001270:	10000626 	beq	r2,zero,200128c <__pack_d+0x2b8>
 2001274:	3a45883a 	add	r2,r7,r9
 2001278:	11cd803a 	cmpltu	r6,r2,r7
 200127c:	320d883a 	add	r6,r6,r8
 2001280:	100f883a 	mov	r7,r2
 2001284:	3011883a 	mov	r8,r6
 2001288:	0007883a 	mov	r3,zero
 200128c:	00840034 	movhi	r2,4096
 2001290:	10bfffc4 	addi	r2,r2,-1
 2001294:	123fe52e 	bgeu	r2,r8,200122c <__pack_d+0x258>
 2001298:	00c00044 	movi	r3,1
 200129c:	003fe306 	br	200122c <__pack_d+0x258>
 20012a0:	0009883a 	mov	r4,zero
 20012a4:	0013883a 	mov	r9,zero
 20012a8:	000b883a 	mov	r5,zero
 20012ac:	003fe406 	br	2001240 <__pack_d+0x26c>
 20012b0:	4a47883a 	add	r3,r9,r9
 20012b4:	008007c4 	movi	r2,31
 20012b8:	1105c83a 	sub	r2,r2,r4
 20012bc:	1886983a 	sll	r3,r3,r2
 20012c0:	4118d83a 	srl	r12,r8,r4
 20012c4:	491ad83a 	srl	r13,r9,r4
 20012c8:	1b18b03a 	or	r12,r3,r12
 20012cc:	003fb506 	br	20011a4 <__pack_d+0x1d0>
 20012d0:	2806d07a 	srli	r3,r5,1
 20012d4:	008007c4 	movi	r2,31
 20012d8:	1105c83a 	sub	r2,r2,r4
 20012dc:	1896d83a 	srl	r11,r3,r2
 20012e0:	2914983a 	sll	r10,r5,r4
 20012e4:	003fb506 	br	20011bc <__pack_d+0x1e8>

020012e8 <__unpack_d>:
 20012e8:	20c00117 	ldw	r3,4(r4)
 20012ec:	22400017 	ldw	r9,0(r4)
 20012f0:	00800434 	movhi	r2,16
 20012f4:	10bfffc4 	addi	r2,r2,-1
 20012f8:	1808d53a 	srli	r4,r3,20
 20012fc:	180cd7fa 	srli	r6,r3,31
 2001300:	1894703a 	and	r10,r3,r2
 2001304:	2201ffcc 	andi	r8,r4,2047
 2001308:	281b883a 	mov	r13,r5
 200130c:	4817883a 	mov	r11,r9
 2001310:	29800115 	stw	r6,4(r5)
 2001314:	5019883a 	mov	r12,r10
 2001318:	40001e1e 	bne	r8,zero,2001394 <__unpack_d+0xac>
 200131c:	4a84b03a 	or	r2,r9,r10
 2001320:	10001926 	beq	r2,zero,2001388 <__unpack_d+0xa0>
 2001324:	4804d63a 	srli	r2,r9,24
 2001328:	500c923a 	slli	r6,r10,8
 200132c:	013f0084 	movi	r4,-1022
 2001330:	00c40034 	movhi	r3,4096
 2001334:	18ffffc4 	addi	r3,r3,-1
 2001338:	118cb03a 	or	r6,r2,r6
 200133c:	008000c4 	movi	r2,3
 2001340:	480a923a 	slli	r5,r9,8
 2001344:	68800015 	stw	r2,0(r13)
 2001348:	69000215 	stw	r4,8(r13)
 200134c:	19800b36 	bltu	r3,r6,200137c <__unpack_d+0x94>
 2001350:	200f883a 	mov	r7,r4
 2001354:	1811883a 	mov	r8,r3
 2001358:	2945883a 	add	r2,r5,r5
 200135c:	1149803a 	cmpltu	r4,r2,r5
 2001360:	3187883a 	add	r3,r6,r6
 2001364:	20c9883a 	add	r4,r4,r3
 2001368:	100b883a 	mov	r5,r2
 200136c:	200d883a 	mov	r6,r4
 2001370:	39ffffc4 	addi	r7,r7,-1
 2001374:	413ff82e 	bgeu	r8,r4,2001358 <__unpack_d+0x70>
 2001378:	69c00215 	stw	r7,8(r13)
 200137c:	69800415 	stw	r6,16(r13)
 2001380:	69400315 	stw	r5,12(r13)
 2001384:	f800283a 	ret
 2001388:	00800084 	movi	r2,2
 200138c:	28800015 	stw	r2,0(r5)
 2001390:	f800283a 	ret
 2001394:	0081ffc4 	movi	r2,2047
 2001398:	40800f26 	beq	r8,r2,20013d8 <__unpack_d+0xf0>
 200139c:	480cd63a 	srli	r6,r9,24
 20013a0:	5006923a 	slli	r3,r10,8
 20013a4:	4804923a 	slli	r2,r9,8
 20013a8:	0009883a 	mov	r4,zero
 20013ac:	30c6b03a 	or	r3,r6,r3
 20013b0:	01440034 	movhi	r5,4096
 20013b4:	110cb03a 	or	r6,r2,r4
 20013b8:	423f0044 	addi	r8,r8,-1023
 20013bc:	194eb03a 	or	r7,r3,r5
 20013c0:	008000c4 	movi	r2,3
 20013c4:	69c00415 	stw	r7,16(r13)
 20013c8:	6a000215 	stw	r8,8(r13)
 20013cc:	68800015 	stw	r2,0(r13)
 20013d0:	69800315 	stw	r6,12(r13)
 20013d4:	f800283a 	ret
 20013d8:	4a84b03a 	or	r2,r9,r10
 20013dc:	1000031e 	bne	r2,zero,20013ec <__unpack_d+0x104>
 20013e0:	00800104 	movi	r2,4
 20013e4:	28800015 	stw	r2,0(r5)
 20013e8:	f800283a 	ret
 20013ec:	0009883a 	mov	r4,zero
 20013f0:	01400234 	movhi	r5,8
 20013f4:	4904703a 	and	r2,r9,r4
 20013f8:	5146703a 	and	r3,r10,r5
 20013fc:	10c4b03a 	or	r2,r2,r3
 2001400:	10000526 	beq	r2,zero,2001418 <__unpack_d+0x130>
 2001404:	00800044 	movi	r2,1
 2001408:	68800015 	stw	r2,0(r13)
 200140c:	6b000415 	stw	r12,16(r13)
 2001410:	6ac00315 	stw	r11,12(r13)
 2001414:	f800283a 	ret
 2001418:	68000015 	stw	zero,0(r13)
 200141c:	003ffb06 	br	200140c <__unpack_d+0x124>

02001420 <__fpcmp_parts_d>:
 2001420:	21800017 	ldw	r6,0(r4)
 2001424:	00c00044 	movi	r3,1
 2001428:	19800a2e 	bgeu	r3,r6,2001454 <__fpcmp_parts_d+0x34>
 200142c:	28800017 	ldw	r2,0(r5)
 2001430:	1880082e 	bgeu	r3,r2,2001454 <__fpcmp_parts_d+0x34>
 2001434:	00c00104 	movi	r3,4
 2001438:	30c02626 	beq	r6,r3,20014d4 <__fpcmp_parts_d+0xb4>
 200143c:	10c02226 	beq	r2,r3,20014c8 <__fpcmp_parts_d+0xa8>
 2001440:	00c00084 	movi	r3,2
 2001444:	30c00526 	beq	r6,r3,200145c <__fpcmp_parts_d+0x3c>
 2001448:	10c0071e 	bne	r2,r3,2001468 <__fpcmp_parts_d+0x48>
 200144c:	20800117 	ldw	r2,4(r4)
 2001450:	1000091e 	bne	r2,zero,2001478 <__fpcmp_parts_d+0x58>
 2001454:	00800044 	movi	r2,1
 2001458:	f800283a 	ret
 200145c:	10c01a1e 	bne	r2,r3,20014c8 <__fpcmp_parts_d+0xa8>
 2001460:	0005883a 	mov	r2,zero
 2001464:	f800283a 	ret
 2001468:	22000117 	ldw	r8,4(r4)
 200146c:	28800117 	ldw	r2,4(r5)
 2001470:	40800326 	beq	r8,r2,2001480 <__fpcmp_parts_d+0x60>
 2001474:	403ff726 	beq	r8,zero,2001454 <__fpcmp_parts_d+0x34>
 2001478:	00bfffc4 	movi	r2,-1
 200147c:	f800283a 	ret
 2001480:	20c00217 	ldw	r3,8(r4)
 2001484:	28800217 	ldw	r2,8(r5)
 2001488:	10fffa16 	blt	r2,r3,2001474 <__fpcmp_parts_d+0x54>
 200148c:	18800916 	blt	r3,r2,20014b4 <__fpcmp_parts_d+0x94>
 2001490:	21c00417 	ldw	r7,16(r4)
 2001494:	28c00417 	ldw	r3,16(r5)
 2001498:	21800317 	ldw	r6,12(r4)
 200149c:	28800317 	ldw	r2,12(r5)
 20014a0:	19fff436 	bltu	r3,r7,2001474 <__fpcmp_parts_d+0x54>
 20014a4:	38c00526 	beq	r7,r3,20014bc <__fpcmp_parts_d+0x9c>
 20014a8:	38c00236 	bltu	r7,r3,20014b4 <__fpcmp_parts_d+0x94>
 20014ac:	19ffec1e 	bne	r3,r7,2001460 <__fpcmp_parts_d+0x40>
 20014b0:	30bfeb2e 	bgeu	r6,r2,2001460 <__fpcmp_parts_d+0x40>
 20014b4:	403fe71e 	bne	r8,zero,2001454 <__fpcmp_parts_d+0x34>
 20014b8:	003fef06 	br	2001478 <__fpcmp_parts_d+0x58>
 20014bc:	11bffa2e 	bgeu	r2,r6,20014a8 <__fpcmp_parts_d+0x88>
 20014c0:	403fe426 	beq	r8,zero,2001454 <__fpcmp_parts_d+0x34>
 20014c4:	003fec06 	br	2001478 <__fpcmp_parts_d+0x58>
 20014c8:	28800117 	ldw	r2,4(r5)
 20014cc:	103fe11e 	bne	r2,zero,2001454 <__fpcmp_parts_d+0x34>
 20014d0:	003fe906 	br	2001478 <__fpcmp_parts_d+0x58>
 20014d4:	11bfdd1e 	bne	r2,r6,200144c <__fpcmp_parts_d+0x2c>
 20014d8:	28c00117 	ldw	r3,4(r5)
 20014dc:	20800117 	ldw	r2,4(r4)
 20014e0:	1885c83a 	sub	r2,r3,r2
 20014e4:	f800283a 	ret

020014e8 <memset>:
 20014e8:	008000c4 	movi	r2,3
 20014ec:	29403fcc 	andi	r5,r5,255
 20014f0:	2007883a 	mov	r3,r4
 20014f4:	1180022e 	bgeu	r2,r6,2001500 <memset+0x18>
 20014f8:	2084703a 	and	r2,r4,r2
 20014fc:	10000826 	beq	r2,zero,2001520 <memset+0x38>
 2001500:	30000526 	beq	r6,zero,2001518 <memset+0x30>
 2001504:	2805883a 	mov	r2,r5
 2001508:	30cd883a 	add	r6,r6,r3
 200150c:	18800005 	stb	r2,0(r3)
 2001510:	18c00044 	addi	r3,r3,1
 2001514:	19bffd1e 	bne	r3,r6,200150c <memset+0x24>
 2001518:	2005883a 	mov	r2,r4
 200151c:	f800283a 	ret
 2001520:	2804923a 	slli	r2,r5,8
 2001524:	020003c4 	movi	r8,15
 2001528:	200f883a 	mov	r7,r4
 200152c:	2884b03a 	or	r2,r5,r2
 2001530:	1006943a 	slli	r3,r2,16
 2001534:	10c6b03a 	or	r3,r2,r3
 2001538:	41800a2e 	bgeu	r8,r6,2001564 <memset+0x7c>
 200153c:	4005883a 	mov	r2,r8
 2001540:	31bffc04 	addi	r6,r6,-16
 2001544:	38c00015 	stw	r3,0(r7)
 2001548:	38c00115 	stw	r3,4(r7)
 200154c:	38c00215 	stw	r3,8(r7)
 2001550:	38c00315 	stw	r3,12(r7)
 2001554:	39c00404 	addi	r7,r7,16
 2001558:	11bff936 	bltu	r2,r6,2001540 <memset+0x58>
 200155c:	008000c4 	movi	r2,3
 2001560:	1180052e 	bgeu	r2,r6,2001578 <memset+0x90>
 2001564:	31bfff04 	addi	r6,r6,-4
 2001568:	008000c4 	movi	r2,3
 200156c:	38c00015 	stw	r3,0(r7)
 2001570:	39c00104 	addi	r7,r7,4
 2001574:	11bffb36 	bltu	r2,r6,2001564 <memset+0x7c>
 2001578:	3807883a 	mov	r3,r7
 200157c:	003fe006 	br	2001500 <memset+0x18>

02001580 <strcpy>:
 2001580:	2904b03a 	or	r2,r5,r4
 2001584:	108000cc 	andi	r2,r2,3
 2001588:	10000826 	beq	r2,zero,20015ac <strcpy+0x2c>
 200158c:	2007883a 	mov	r3,r4
 2001590:	28800003 	ldbu	r2,0(r5)
 2001594:	29400044 	addi	r5,r5,1
 2001598:	18800005 	stb	r2,0(r3)
 200159c:	18c00044 	addi	r3,r3,1
 20015a0:	103ffb1e 	bne	r2,zero,2001590 <strcpy+0x10>
 20015a4:	2005883a 	mov	r2,r4
 20015a8:	f800283a 	ret
 20015ac:	29800017 	ldw	r6,0(r5)
 20015b0:	023fbff4 	movhi	r8,65279
 20015b4:	423fbfc4 	addi	r8,r8,-257
 20015b8:	02a02074 	movhi	r10,32897
 20015bc:	52a02004 	addi	r10,r10,-32640
 20015c0:	3205883a 	add	r2,r6,r8
 20015c4:	0186303a 	nor	r3,zero,r6
 20015c8:	10c4703a 	and	r2,r2,r3
 20015cc:	1284703a 	and	r2,r2,r10
 20015d0:	200f883a 	mov	r7,r4
 20015d4:	10000b1e 	bne	r2,zero,2001604 <strcpy+0x84>
 20015d8:	4013883a 	mov	r9,r8
 20015dc:	5011883a 	mov	r8,r10
 20015e0:	39800015 	stw	r6,0(r7)
 20015e4:	29400104 	addi	r5,r5,4
 20015e8:	29800017 	ldw	r6,0(r5)
 20015ec:	39c00104 	addi	r7,r7,4
 20015f0:	3245883a 	add	r2,r6,r9
 20015f4:	0186303a 	nor	r3,zero,r6
 20015f8:	10c4703a 	and	r2,r2,r3
 20015fc:	1204703a 	and	r2,r2,r8
 2001600:	103ff726 	beq	r2,zero,20015e0 <strcpy+0x60>
 2001604:	3807883a 	mov	r3,r7
 2001608:	003fe106 	br	2001590 <strcpy+0x10>

0200160c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200160c:	defff904 	addi	sp,sp,-28
 2001610:	dfc00615 	stw	ra,24(sp)
 2001614:	df000515 	stw	fp,20(sp)
 2001618:	df000504 	addi	fp,sp,20
 200161c:	e13ffc15 	stw	r4,-16(fp)
 2001620:	e17ffd15 	stw	r5,-12(fp)
 2001624:	e1bffe15 	stw	r6,-8(fp)
 2001628:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200162c:	e0800217 	ldw	r2,8(fp)
 2001630:	d8800015 	stw	r2,0(sp)
 2001634:	e13ffc17 	ldw	r4,-16(fp)
 2001638:	e17ffd17 	ldw	r5,-12(fp)
 200163c:	e1bffe17 	ldw	r6,-8(fp)
 2001640:	e1ffff17 	ldw	r7,-4(fp)
 2001644:	20017e00 	call	20017e0 <alt_iic_isr_register>
}  
 2001648:	e037883a 	mov	sp,fp
 200164c:	dfc00117 	ldw	ra,4(sp)
 2001650:	df000017 	ldw	fp,0(sp)
 2001654:	dec00204 	addi	sp,sp,8
 2001658:	f800283a 	ret

0200165c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 200165c:	defff904 	addi	sp,sp,-28
 2001660:	df000615 	stw	fp,24(sp)
 2001664:	df000604 	addi	fp,sp,24
 2001668:	e13ffe15 	stw	r4,-8(fp)
 200166c:	e17fff15 	stw	r5,-4(fp)
 2001670:	e0bfff17 	ldw	r2,-4(fp)
 2001674:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001678:	0005303a 	rdctl	r2,status
 200167c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001680:	e0fffb17 	ldw	r3,-20(fp)
 2001684:	00bfff84 	movi	r2,-2
 2001688:	1884703a 	and	r2,r3,r2
 200168c:	1001703a 	wrctl	status,r2
  
  return context;
 2001690:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2001694:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2001698:	e0fffc17 	ldw	r3,-16(fp)
 200169c:	00800044 	movi	r2,1
 20016a0:	10c4983a 	sll	r2,r2,r3
 20016a4:	1007883a 	mov	r3,r2
 20016a8:	00808034 	movhi	r2,512
 20016ac:	109c1704 	addi	r2,r2,28764
 20016b0:	10800017 	ldw	r2,0(r2)
 20016b4:	1886b03a 	or	r3,r3,r2
 20016b8:	00808034 	movhi	r2,512
 20016bc:	109c1704 	addi	r2,r2,28764
 20016c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20016c4:	00808034 	movhi	r2,512
 20016c8:	109c1704 	addi	r2,r2,28764
 20016cc:	10800017 	ldw	r2,0(r2)
 20016d0:	100170fa 	wrctl	ienable,r2
 20016d4:	e0bffd17 	ldw	r2,-12(fp)
 20016d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20016dc:	e0bffa17 	ldw	r2,-24(fp)
 20016e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20016e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 20016e8:	e037883a 	mov	sp,fp
 20016ec:	df000017 	ldw	fp,0(sp)
 20016f0:	dec00104 	addi	sp,sp,4
 20016f4:	f800283a 	ret

020016f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20016f8:	defff904 	addi	sp,sp,-28
 20016fc:	df000615 	stw	fp,24(sp)
 2001700:	df000604 	addi	fp,sp,24
 2001704:	e13ffe15 	stw	r4,-8(fp)
 2001708:	e17fff15 	stw	r5,-4(fp)
 200170c:	e0bfff17 	ldw	r2,-4(fp)
 2001710:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001714:	0005303a 	rdctl	r2,status
 2001718:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200171c:	e0fffb17 	ldw	r3,-20(fp)
 2001720:	00bfff84 	movi	r2,-2
 2001724:	1884703a 	and	r2,r3,r2
 2001728:	1001703a 	wrctl	status,r2
  
  return context;
 200172c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2001730:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 2001734:	e0fffc17 	ldw	r3,-16(fp)
 2001738:	00800044 	movi	r2,1
 200173c:	10c4983a 	sll	r2,r2,r3
 2001740:	0084303a 	nor	r2,zero,r2
 2001744:	1007883a 	mov	r3,r2
 2001748:	00808034 	movhi	r2,512
 200174c:	109c1704 	addi	r2,r2,28764
 2001750:	10800017 	ldw	r2,0(r2)
 2001754:	1886703a 	and	r3,r3,r2
 2001758:	00808034 	movhi	r2,512
 200175c:	109c1704 	addi	r2,r2,28764
 2001760:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2001764:	00808034 	movhi	r2,512
 2001768:	109c1704 	addi	r2,r2,28764
 200176c:	10800017 	ldw	r2,0(r2)
 2001770:	100170fa 	wrctl	ienable,r2
 2001774:	e0bffd17 	ldw	r2,-12(fp)
 2001778:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200177c:	e0bffa17 	ldw	r2,-24(fp)
 2001780:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2001784:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2001788:	e037883a 	mov	sp,fp
 200178c:	df000017 	ldw	fp,0(sp)
 2001790:	dec00104 	addi	sp,sp,4
 2001794:	f800283a 	ret

02001798 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2001798:	defffc04 	addi	sp,sp,-16
 200179c:	df000315 	stw	fp,12(sp)
 20017a0:	df000304 	addi	fp,sp,12
 20017a4:	e13ffe15 	stw	r4,-8(fp)
 20017a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20017ac:	000530fa 	rdctl	r2,ienable
 20017b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20017b4:	e0ffff17 	ldw	r3,-4(fp)
 20017b8:	00800044 	movi	r2,1
 20017bc:	10c4983a 	sll	r2,r2,r3
 20017c0:	1007883a 	mov	r3,r2
 20017c4:	e0bffd17 	ldw	r2,-12(fp)
 20017c8:	1884703a 	and	r2,r3,r2
 20017cc:	1004c03a 	cmpne	r2,r2,zero
}
 20017d0:	e037883a 	mov	sp,fp
 20017d4:	df000017 	ldw	fp,0(sp)
 20017d8:	dec00104 	addi	sp,sp,4
 20017dc:	f800283a 	ret

020017e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20017e0:	defff404 	addi	sp,sp,-48
 20017e4:	dfc00b15 	stw	ra,44(sp)
 20017e8:	df000a15 	stw	fp,40(sp)
 20017ec:	df000a04 	addi	fp,sp,40
 20017f0:	e13ffb15 	stw	r4,-20(fp)
 20017f4:	e17ffc15 	stw	r5,-16(fp)
 20017f8:	e1bffd15 	stw	r6,-12(fp)
 20017fc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2001800:	00bffa84 	movi	r2,-22
 2001804:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2001808:	e0bffc17 	ldw	r2,-16(fp)
 200180c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2001810:	e0bff917 	ldw	r2,-28(fp)
 2001814:	10800808 	cmpgei	r2,r2,32
 2001818:	1000291e 	bne	r2,zero,20018c0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200181c:	0005303a 	rdctl	r2,status
 2001820:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001824:	e0fff717 	ldw	r3,-36(fp)
 2001828:	00bfff84 	movi	r2,-2
 200182c:	1884703a 	and	r2,r3,r2
 2001830:	1001703a 	wrctl	status,r2
  
  return context;
 2001834:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2001838:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 200183c:	e0bff917 	ldw	r2,-28(fp)
 2001840:	00c08034 	movhi	r3,512
 2001844:	18dc1e04 	addi	r3,r3,28792
 2001848:	100490fa 	slli	r2,r2,3
 200184c:	10c7883a 	add	r3,r2,r3
 2001850:	e0bffd17 	ldw	r2,-12(fp)
 2001854:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2001858:	e0bff917 	ldw	r2,-28(fp)
 200185c:	00c08034 	movhi	r3,512
 2001860:	18dc1e04 	addi	r3,r3,28792
 2001864:	100490fa 	slli	r2,r2,3
 2001868:	10c5883a 	add	r2,r2,r3
 200186c:	10c00104 	addi	r3,r2,4
 2001870:	e0bffe17 	ldw	r2,-8(fp)
 2001874:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2001878:	e0bffd17 	ldw	r2,-12(fp)
 200187c:	1005003a 	cmpeq	r2,r2,zero
 2001880:	1000051e 	bne	r2,zero,2001898 <alt_iic_isr_register+0xb8>
 2001884:	e17ff917 	ldw	r5,-28(fp)
 2001888:	e13ffb17 	ldw	r4,-20(fp)
 200188c:	200165c0 	call	200165c <alt_ic_irq_enable>
 2001890:	e0bfff15 	stw	r2,-4(fp)
 2001894:	00000406 	br	20018a8 <alt_iic_isr_register+0xc8>
 2001898:	e17ff917 	ldw	r5,-28(fp)
 200189c:	e13ffb17 	ldw	r4,-20(fp)
 20018a0:	20016f80 	call	20016f8 <alt_ic_irq_disable>
 20018a4:	e0bfff15 	stw	r2,-4(fp)
 20018a8:	e0bfff17 	ldw	r2,-4(fp)
 20018ac:	e0bffa15 	stw	r2,-24(fp)
 20018b0:	e0bff817 	ldw	r2,-32(fp)
 20018b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20018b8:	e0bff617 	ldw	r2,-40(fp)
 20018bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20018c0:	e0bffa17 	ldw	r2,-24(fp)
}
 20018c4:	e037883a 	mov	sp,fp
 20018c8:	dfc00117 	ldw	ra,4(sp)
 20018cc:	df000017 	ldw	fp,0(sp)
 20018d0:	dec00204 	addi	sp,sp,8
 20018d4:	f800283a 	ret

020018d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20018d8:	defffd04 	addi	sp,sp,-12
 20018dc:	dfc00215 	stw	ra,8(sp)
 20018e0:	df000115 	stw	fp,4(sp)
 20018e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20018e8:	0009883a 	mov	r4,zero
 20018ec:	20019740 	call	2001974 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20018f0:	20019a80 	call	20019a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20018f4:	01008034 	movhi	r4,512
 20018f8:	2115da04 	addi	r4,r4,22376
 20018fc:	01408034 	movhi	r5,512
 2001900:	2955da04 	addi	r5,r5,22376
 2001904:	01808034 	movhi	r6,512
 2001908:	3195da04 	addi	r6,r6,22376
 200190c:	20046fc0 	call	20046fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2001910:	20044a00 	call	20044a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2001914:	01008034 	movhi	r4,512
 2001918:	21114104 	addi	r4,r4,17668
 200191c:	20051000 	call	2005100 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2001920:	d1200e17 	ldw	r4,-32712(gp)
 2001924:	d1600f17 	ldw	r5,-32708(gp)
 2001928:	d1a01017 	ldw	r6,-32704(gp)
 200192c:	20004880 	call	2000488 <main>
 2001930:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2001934:	01000044 	movi	r4,1
 2001938:	20042040 	call	2004204 <close>
  exit (result);
 200193c:	e13fff17 	ldw	r4,-4(fp)
 2001940:	20051140 	call	2005114 <exit>

02001944 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2001944:	defffd04 	addi	sp,sp,-12
 2001948:	dfc00215 	stw	ra,8(sp)
 200194c:	df000115 	stw	fp,4(sp)
 2001950:	df000104 	addi	fp,sp,4
 2001954:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2001958:	e13fff17 	ldw	r4,-4(fp)
 200195c:	20040b80 	call	20040b8 <alt_busy_sleep>
}
 2001960:	e037883a 	mov	sp,fp
 2001964:	dfc00117 	ldw	ra,4(sp)
 2001968:	df000017 	ldw	fp,0(sp)
 200196c:	dec00204 	addi	sp,sp,8
 2001970:	f800283a 	ret

02001974 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2001974:	defffd04 	addi	sp,sp,-12
 2001978:	dfc00215 	stw	ra,8(sp)
 200197c:	df000115 	stw	fp,4(sp)
 2001980:	df000104 	addi	fp,sp,4
 2001984:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 2001988:	2004c3c0 	call	2004c3c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200198c:	00800044 	movi	r2,1
 2001990:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2001994:	e037883a 	mov	sp,fp
 2001998:	dfc00117 	ldw	ra,4(sp)
 200199c:	df000017 	ldw	fp,0(sp)
 20019a0:	dec00204 	addi	sp,sp,8
 20019a4:	f800283a 	ret

020019a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20019a8:	defffe04 	addi	sp,sp,-8
 20019ac:	dfc00115 	stw	ra,4(sp)
 20019b0:	df000015 	stw	fp,0(sp)
 20019b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
 20019b8:	01008034 	movhi	r4,512
 20019bc:	21162504 	addi	r4,r4,22676
 20019c0:	2001a500 	call	2001a50 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 20019c4:	01008034 	movhi	r4,512
 20019c8:	21166104 	addi	r4,r4,22916
 20019cc:	000b883a 	mov	r5,zero
 20019d0:	000d883a 	mov	r6,zero
 20019d4:	200257c0 	call	200257c <altera_avalon_jtag_uart_init>
 20019d8:	01008034 	movhi	r4,512
 20019dc:	21165704 	addi	r4,r4,22876
 20019e0:	2001a180 	call	2001a18 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
 20019e4:	01008034 	movhi	r4,512
 20019e8:	211a7904 	addi	r4,r4,27108
 20019ec:	000b883a 	mov	r5,zero
 20019f0:	018000c4 	movi	r6,3
 20019f4:	2002fd80 	call	2002fd8 <altera_avalon_uart_init>
 20019f8:	01008034 	movhi	r4,512
 20019fc:	211a6f04 	addi	r4,r4,27068
 2001a00:	2001a180 	call	2001a18 <alt_dev_reg>
}
 2001a04:	e037883a 	mov	sp,fp
 2001a08:	dfc00117 	ldw	ra,4(sp)
 2001a0c:	df000017 	ldw	fp,0(sp)
 2001a10:	dec00204 	addi	sp,sp,8
 2001a14:	f800283a 	ret

02001a18 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2001a18:	defffd04 	addi	sp,sp,-12
 2001a1c:	dfc00215 	stw	ra,8(sp)
 2001a20:	df000115 	stw	fp,4(sp)
 2001a24:	df000104 	addi	fp,sp,4
 2001a28:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2001a2c:	e13fff17 	ldw	r4,-4(fp)
 2001a30:	01408034 	movhi	r5,512
 2001a34:	295c0d04 	addi	r5,r5,28724
 2001a38:	200438c0 	call	200438c <alt_dev_llist_insert>
}
 2001a3c:	e037883a 	mov	sp,fp
 2001a40:	dfc00117 	ldw	ra,4(sp)
 2001a44:	df000017 	ldw	fp,0(sp)
 2001a48:	dec00204 	addi	sp,sp,8
 2001a4c:	f800283a 	ret

02001a50 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2001a50:	defffc04 	addi	sp,sp,-16
 2001a54:	dfc00315 	stw	ra,12(sp)
 2001a58:	df000215 	stw	fp,8(sp)
 2001a5c:	df000204 	addi	fp,sp,8
 2001a60:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2001a64:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2001a68:	e13fff17 	ldw	r4,-4(fp)
 2001a6c:	2001adc0 	call	2001adc <alt_epcs_flash_query>
 2001a70:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2001a74:	e0bffe17 	ldw	r2,-8(fp)
 2001a78:	1004c03a 	cmpne	r2,r2,zero
 2001a7c:	1000031e 	bne	r2,zero,2001a8c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2001a80:	e13fff17 	ldw	r4,-4(fp)
 2001a84:	2001aa40 	call	2001aa4 <alt_flash_device_register>
 2001a88:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2001a8c:	e0bffe17 	ldw	r2,-8(fp)
}
 2001a90:	e037883a 	mov	sp,fp
 2001a94:	dfc00117 	ldw	ra,4(sp)
 2001a98:	df000017 	ldw	fp,0(sp)
 2001a9c:	dec00204 	addi	sp,sp,8
 2001aa0:	f800283a 	ret

02001aa4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2001aa4:	defffd04 	addi	sp,sp,-12
 2001aa8:	dfc00215 	stw	ra,8(sp)
 2001aac:	df000115 	stw	fp,4(sp)
 2001ab0:	df000104 	addi	fp,sp,4
 2001ab4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2001ab8:	e13fff17 	ldw	r4,-4(fp)
 2001abc:	01408034 	movhi	r5,512
 2001ac0:	295c1104 	addi	r5,r5,28740
 2001ac4:	200438c0 	call	200438c <alt_dev_llist_insert>
}
 2001ac8:	e037883a 	mov	sp,fp
 2001acc:	dfc00117 	ldw	ra,4(sp)
 2001ad0:	df000017 	ldw	fp,0(sp)
 2001ad4:	dec00204 	addi	sp,sp,8
 2001ad8:	f800283a 	ret

02001adc <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2001adc:	defffc04 	addi	sp,sp,-16
 2001ae0:	dfc00315 	stw	ra,12(sp)
 2001ae4:	df000215 	stw	fp,8(sp)
 2001ae8:	df000204 	addi	fp,sp,8
 2001aec:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2001af0:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2001af4:	e0bfff17 	ldw	r2,-4(fp)
 2001af8:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2001afc:	e0bfff17 	ldw	r2,-4(fp)
 2001b00:	11002d17 	ldw	r4,180(r2)
 2001b04:	2003dc80 	call	2003dc8 <epcs_read_electronic_signature>
 2001b08:	10c03fcc 	andi	r3,r2,255
 2001b0c:	e0bfff17 	ldw	r2,-4(fp)
 2001b10:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2001b14:	e0bfff17 	ldw	r2,-4(fp)
 2001b18:	10802f17 	ldw	r2,188(r2)
 2001b1c:	10800598 	cmpnei	r2,r2,22
 2001b20:	10000a1e 	bne	r2,zero,2001b4c <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2001b24:	e0ffff17 	ldw	r3,-4(fp)
 2001b28:	00802034 	movhi	r2,128
 2001b2c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 2001b30:	e0ffff17 	ldw	r3,-4(fp)
 2001b34:	00802004 	movi	r2,128
 2001b38:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2001b3c:	e0ffff17 	ldw	r3,-4(fp)
 2001b40:	00800074 	movhi	r2,1
 2001b44:	18801015 	stw	r2,64(r3)
 2001b48:	00007306 	br	2001d18 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2001b4c:	e0bfff17 	ldw	r2,-4(fp)
 2001b50:	10802f17 	ldw	r2,188(r2)
 2001b54:	10800518 	cmpnei	r2,r2,20
 2001b58:	10000a1e 	bne	r2,zero,2001b84 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2001b5c:	e0ffff17 	ldw	r3,-4(fp)
 2001b60:	00800834 	movhi	r2,32
 2001b64:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 2001b68:	e0ffff17 	ldw	r3,-4(fp)
 2001b6c:	00800804 	movi	r2,32
 2001b70:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2001b74:	e0ffff17 	ldw	r3,-4(fp)
 2001b78:	00800074 	movhi	r2,1
 2001b7c:	18801015 	stw	r2,64(r3)
 2001b80:	00006506 	br	2001d18 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2001b84:	e0bfff17 	ldw	r2,-4(fp)
 2001b88:	10802f17 	ldw	r2,188(r2)
 2001b8c:	108004d8 	cmpnei	r2,r2,19
 2001b90:	10000a1e 	bne	r2,zero,2001bbc <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2001b94:	e0ffff17 	ldw	r3,-4(fp)
 2001b98:	00800434 	movhi	r2,16
 2001b9c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 2001ba0:	e0ffff17 	ldw	r3,-4(fp)
 2001ba4:	00800404 	movi	r2,16
 2001ba8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2001bac:	e0ffff17 	ldw	r3,-4(fp)
 2001bb0:	00800074 	movhi	r2,1
 2001bb4:	18801015 	stw	r2,64(r3)
 2001bb8:	00005706 	br	2001d18 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 2001bbc:	e0bfff17 	ldw	r2,-4(fp)
 2001bc0:	10802f17 	ldw	r2,188(r2)
 2001bc4:	10800498 	cmpnei	r2,r2,18
 2001bc8:	10000a1e 	bne	r2,zero,2001bf4 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2001bcc:	e0ffff17 	ldw	r3,-4(fp)
 2001bd0:	00800234 	movhi	r2,8
 2001bd4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 2001bd8:	e0ffff17 	ldw	r3,-4(fp)
 2001bdc:	00800204 	movi	r2,8
 2001be0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2001be4:	e0ffff17 	ldw	r3,-4(fp)
 2001be8:	00800074 	movhi	r2,1
 2001bec:	18801015 	stw	r2,64(r3)
 2001bf0:	00004906 	br	2001d18 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2001bf4:	e0bfff17 	ldw	r2,-4(fp)
 2001bf8:	10802f17 	ldw	r2,188(r2)
 2001bfc:	10800418 	cmpnei	r2,r2,16
 2001c00:	10000a1e 	bne	r2,zero,2001c2c <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2001c04:	e0ffff17 	ldw	r3,-4(fp)
 2001c08:	008000b4 	movhi	r2,2
 2001c0c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 2001c10:	e0ffff17 	ldw	r3,-4(fp)
 2001c14:	00800104 	movi	r2,4
 2001c18:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 2001c1c:	e0ffff17 	ldw	r3,-4(fp)
 2001c20:	00a00014 	movui	r2,32768
 2001c24:	18801015 	stw	r2,64(r3)
 2001c28:	00003b06 	br	2001d18 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2001c2c:	e0bfff17 	ldw	r2,-4(fp)
 2001c30:	11002d17 	ldw	r4,180(r2)
 2001c34:	2003e340 	call	2003e34 <epcs_read_device_id>
 2001c38:	1007883a 	mov	r3,r2
 2001c3c:	e0bfff17 	ldw	r2,-4(fp)
 2001c40:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2001c44:	e0bfff17 	ldw	r2,-4(fp)
 2001c48:	10c02f17 	ldw	r3,188(r2)
 2001c4c:	00804034 	movhi	r2,256
 2001c50:	10bfffc4 	addi	r2,r2,-1
 2001c54:	1886703a 	and	r3,r3,r2
 2001c58:	00800874 	movhi	r2,33
 2001c5c:	10ae8604 	addi	r2,r2,-17896
 2001c60:	18800a1e 	bne	r3,r2,2001c8c <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2001c64:	e0ffff17 	ldw	r3,-4(fp)
 2001c68:	00804034 	movhi	r2,256
 2001c6c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2001c70:	e0ffff17 	ldw	r3,-4(fp)
 2001c74:	00804004 	movi	r2,256
 2001c78:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2001c7c:	e0ffff17 	ldw	r3,-4(fp)
 2001c80:	00800074 	movhi	r2,1
 2001c84:	18801015 	stw	r2,64(r3)
 2001c88:	00002306 	br	2001d18 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2001c8c:	e0bfff17 	ldw	r2,-4(fp)
 2001c90:	10802f17 	ldw	r2,188(r2)
 2001c94:	10803fcc 	andi	r2,r2,255
 2001c98:	10800618 	cmpnei	r2,r2,24
 2001c9c:	10000a1e 	bne	r2,zero,2001cc8 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2001ca0:	e0ffff17 	ldw	r3,-4(fp)
 2001ca4:	00804034 	movhi	r2,256
 2001ca8:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 2001cac:	e0ffff17 	ldw	r3,-4(fp)
 2001cb0:	00801004 	movi	r2,64
 2001cb4:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 2001cb8:	e0ffff17 	ldw	r3,-4(fp)
 2001cbc:	00800134 	movhi	r2,4
 2001cc0:	18801015 	stw	r2,64(r3)
 2001cc4:	00001406 	br	2001d18 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2001cc8:	e0bfff17 	ldw	r2,-4(fp)
 2001ccc:	10802f17 	ldw	r2,188(r2)
 2001cd0:	10803fcc 	andi	r2,r2,255
 2001cd4:	10800658 	cmpnei	r2,r2,25
 2001cd8:	10000d1e 	bne	r2,zero,2001d10 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2001cdc:	e0ffff17 	ldw	r3,-4(fp)
 2001ce0:	00808034 	movhi	r2,512
 2001ce4:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2001ce8:	e0ffff17 	ldw	r3,-4(fp)
 2001cec:	00808004 	movi	r2,512
 2001cf0:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2001cf4:	e0ffff17 	ldw	r3,-4(fp)
 2001cf8:	00800074 	movhi	r2,1
 2001cfc:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2001d00:	e0ffff17 	ldw	r3,-4(fp)
 2001d04:	00800044 	movi	r2,1
 2001d08:	18803115 	stw	r2,196(r3)
 2001d0c:	00000206 	br	2001d18 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2001d10:	00bffb44 	movi	r2,-19
 2001d14:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2001d18:	e0bfff17 	ldw	r2,-4(fp)
 2001d1c:	10800e17 	ldw	r2,56(r2)
 2001d20:	1007883a 	mov	r3,r2
 2001d24:	e0bfff17 	ldw	r2,-4(fp)
 2001d28:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 2001d2c:	e0ffff17 	ldw	r3,-4(fp)
 2001d30:	00800044 	movi	r2,1
 2001d34:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 2001d38:	e0bfff17 	ldw	r2,-4(fp)
 2001d3c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2001d40:	e0ffff17 	ldw	r3,-4(fp)
 2001d44:	00804004 	movi	r2,256
 2001d48:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2001d4c:	e0bffe17 	ldw	r2,-8(fp)
}
 2001d50:	e037883a 	mov	sp,fp
 2001d54:	dfc00117 	ldw	ra,4(sp)
 2001d58:	df000017 	ldw	fp,0(sp)
 2001d5c:	dec00204 	addi	sp,sp,8
 2001d60:	f800283a 	ret

02001d64 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2001d64:	deffeb04 	addi	sp,sp,-84
 2001d68:	dfc01415 	stw	ra,80(sp)
 2001d6c:	df001315 	stw	fp,76(sp)
 2001d70:	df001304 	addi	fp,sp,76
 2001d74:	e13ff915 	stw	r4,-28(fp)
 2001d78:	e17ffa15 	stw	r5,-24(fp)
 2001d7c:	e1bffb15 	stw	r6,-20(fp)
 2001d80:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2001d84:	00800804 	movi	r2,32
 2001d88:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 2001d8c:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 2001d90:	00002c06 	br	2001e44 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2001d94:	e0bff017 	ldw	r2,-64(fp)
 2001d98:	e0bfff15 	stw	r2,-4(fp)
 2001d9c:	e0fffc17 	ldw	r3,-16(fp)
 2001da0:	e0fffe15 	stw	r3,-8(fp)
 2001da4:	e0bfff17 	ldw	r2,-4(fp)
 2001da8:	e0fffe17 	ldw	r3,-8(fp)
 2001dac:	10c0022e 	bgeu	r2,r3,2001db8 <alt_epcs_flash_memcmp+0x54>
 2001db0:	e0bfff17 	ldw	r2,-4(fp)
 2001db4:	e0bffe15 	stw	r2,-8(fp)
 2001db8:	e0fffe17 	ldw	r3,-8(fp)
 2001dbc:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2001dc0:	e0fffb17 	ldw	r3,-20(fp)
 2001dc4:	e0bfef17 	ldw	r2,-68(fp)
 2001dc8:	188b883a 	add	r5,r3,r2
 2001dcc:	e1bff104 	addi	r6,fp,-60
 2001dd0:	e13ff917 	ldw	r4,-28(fp)
 2001dd4:	e1ffee17 	ldw	r7,-72(fp)
 2001dd8:	200239c0 	call	200239c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2001ddc:	1004403a 	cmpge	r2,r2,zero
 2001de0:	1000031e 	bne	r2,zero,2001df0 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2001de4:	00bfffc4 	movi	r2,-1
 2001de8:	e0bffd15 	stw	r2,-12(fp)
 2001dec:	00001906 	br	2001e54 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2001df0:	e0fffa17 	ldw	r3,-24(fp)
 2001df4:	e0bfef17 	ldw	r2,-68(fp)
 2001df8:	1889883a 	add	r4,r3,r2
 2001dfc:	e1bfee17 	ldw	r6,-72(fp)
 2001e00:	e17ff104 	addi	r5,fp,-60
 2001e04:	200514c0 	call	200514c <memcmp>
 2001e08:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 2001e0c:	e0bfed17 	ldw	r2,-76(fp)
 2001e10:	1005003a 	cmpeq	r2,r2,zero
 2001e14:	1000031e 	bne	r2,zero,2001e24 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 2001e18:	e0ffed17 	ldw	r3,-76(fp)
 2001e1c:	e0fffd15 	stw	r3,-12(fp)
 2001e20:	00000c06 	br	2001e54 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 2001e24:	e0ffee17 	ldw	r3,-72(fp)
 2001e28:	e0bffc17 	ldw	r2,-16(fp)
 2001e2c:	10c5c83a 	sub	r2,r2,r3
 2001e30:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 2001e34:	e0ffef17 	ldw	r3,-68(fp)
 2001e38:	e0bfee17 	ldw	r2,-72(fp)
 2001e3c:	1885883a 	add	r2,r3,r2
 2001e40:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2001e44:	e0bffc17 	ldw	r2,-16(fp)
 2001e48:	1004c03a 	cmpne	r2,r2,zero
 2001e4c:	103fd11e 	bne	r2,zero,2001d94 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2001e50:	e03ffd15 	stw	zero,-12(fp)
 2001e54:	e0bffd17 	ldw	r2,-12(fp)
}
 2001e58:	e037883a 	mov	sp,fp
 2001e5c:	dfc00117 	ldw	ra,4(sp)
 2001e60:	df000017 	ldw	fp,0(sp)
 2001e64:	dec00204 	addi	sp,sp,8
 2001e68:	f800283a 	ret

02001e6c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2001e6c:	defff204 	addi	sp,sp,-56
 2001e70:	dfc00d15 	stw	ra,52(sp)
 2001e74:	df000c15 	stw	fp,48(sp)
 2001e78:	df000c04 	addi	fp,sp,48
 2001e7c:	e13ffa15 	stw	r4,-24(fp)
 2001e80:	e17ffb15 	stw	r5,-20(fp)
 2001e84:	e1bffc15 	stw	r6,-16(fp)
 2001e88:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 2001e8c:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2001e90:	e03ff815 	stw	zero,-32(fp)
 2001e94:	00008b06 	br	20020c4 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2001e98:	e0bff817 	ldw	r2,-32(fp)
 2001e9c:	e0fffa17 	ldw	r3,-24(fp)
 2001ea0:	1004913a 	slli	r2,r2,4
 2001ea4:	10c5883a 	add	r2,r2,r3
 2001ea8:	10800d04 	addi	r2,r2,52
 2001eac:	10c00017 	ldw	r3,0(r2)
 2001eb0:	e0bffb17 	ldw	r2,-20(fp)
 2001eb4:	10c08016 	blt	r2,r3,20020b8 <alt_epcs_flash_write+0x24c>
 2001eb8:	e0bff817 	ldw	r2,-32(fp)
 2001ebc:	e0fffa17 	ldw	r3,-24(fp)
 2001ec0:	1004913a 	slli	r2,r2,4
 2001ec4:	10c5883a 	add	r2,r2,r3
 2001ec8:	10800d04 	addi	r2,r2,52
 2001ecc:	11000017 	ldw	r4,0(r2)
 2001ed0:	e0bff817 	ldw	r2,-32(fp)
 2001ed4:	e0fffa17 	ldw	r3,-24(fp)
 2001ed8:	1004913a 	slli	r2,r2,4
 2001edc:	10c5883a 	add	r2,r2,r3
 2001ee0:	10800e04 	addi	r2,r2,56
 2001ee4:	10800017 	ldw	r2,0(r2)
 2001ee8:	2087883a 	add	r3,r4,r2
 2001eec:	e0bffb17 	ldw	r2,-20(fp)
 2001ef0:	10c0710e 	bge	r2,r3,20020b8 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2001ef4:	e0bff817 	ldw	r2,-32(fp)
 2001ef8:	e0fffa17 	ldw	r3,-24(fp)
 2001efc:	1004913a 	slli	r2,r2,4
 2001f00:	10c5883a 	add	r2,r2,r3
 2001f04:	10800d04 	addi	r2,r2,52
 2001f08:	10800017 	ldw	r2,0(r2)
 2001f0c:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2001f10:	e03ff715 	stw	zero,-36(fp)
 2001f14:	00006006 	br	2002098 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 2001f18:	e0fffb17 	ldw	r3,-20(fp)
 2001f1c:	e0bff517 	ldw	r2,-44(fp)
 2001f20:	18805116 	blt	r3,r2,2002068 <alt_epcs_flash_write+0x1fc>
 2001f24:	e0bff817 	ldw	r2,-32(fp)
 2001f28:	e0fffa17 	ldw	r3,-24(fp)
 2001f2c:	1004913a 	slli	r2,r2,4
 2001f30:	10c5883a 	add	r2,r2,r3
 2001f34:	10801004 	addi	r2,r2,64
 2001f38:	10c00017 	ldw	r3,0(r2)
 2001f3c:	e0bff517 	ldw	r2,-44(fp)
 2001f40:	1887883a 	add	r3,r3,r2
 2001f44:	e0bffb17 	ldw	r2,-20(fp)
 2001f48:	10c0470e 	bge	r2,r3,2002068 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2001f4c:	e0bff817 	ldw	r2,-32(fp)
 2001f50:	e0fffa17 	ldw	r3,-24(fp)
 2001f54:	1004913a 	slli	r2,r2,4
 2001f58:	10c5883a 	add	r2,r2,r3
 2001f5c:	10801004 	addi	r2,r2,64
 2001f60:	10c00017 	ldw	r3,0(r2)
 2001f64:	e0bff517 	ldw	r2,-44(fp)
 2001f68:	1887883a 	add	r3,r3,r2
 2001f6c:	e0bffb17 	ldw	r2,-20(fp)
 2001f70:	1885c83a 	sub	r2,r3,r2
 2001f74:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2001f78:	e0bff617 	ldw	r2,-40(fp)
 2001f7c:	e0bfff15 	stw	r2,-4(fp)
 2001f80:	e0fffd17 	ldw	r3,-12(fp)
 2001f84:	e0fffe15 	stw	r3,-8(fp)
 2001f88:	e0bfff17 	ldw	r2,-4(fp)
 2001f8c:	e0fffe17 	ldw	r3,-8(fp)
 2001f90:	10c0020e 	bge	r2,r3,2001f9c <alt_epcs_flash_write+0x130>
 2001f94:	e0bfff17 	ldw	r2,-4(fp)
 2001f98:	e0bffe15 	stw	r2,-8(fp)
 2001f9c:	e0fffe17 	ldw	r3,-8(fp)
 2001fa0:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2001fa4:	e1fff617 	ldw	r7,-40(fp)
 2001fa8:	e13ffa17 	ldw	r4,-24(fp)
 2001fac:	e17ffc17 	ldw	r5,-16(fp)
 2001fb0:	e1bffb17 	ldw	r6,-20(fp)
 2001fb4:	2001d640 	call	2001d64 <alt_epcs_flash_memcmp>
 2001fb8:	1005003a 	cmpeq	r2,r2,zero
 2001fbc:	1000131e 	bne	r2,zero,200200c <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2001fc0:	e0bffa17 	ldw	r2,-24(fp)
 2001fc4:	10800817 	ldw	r2,32(r2)
 2001fc8:	e13ffa17 	ldw	r4,-24(fp)
 2001fcc:	e17ff517 	ldw	r5,-44(fp)
 2001fd0:	103ee83a 	callr	r2
 2001fd4:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 2001fd8:	e0bff917 	ldw	r2,-28(fp)
 2001fdc:	1004c03a 	cmpne	r2,r2,zero
 2001fe0:	10000a1e 	bne	r2,zero,200200c <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 2001fe4:	e0bffa17 	ldw	r2,-24(fp)
 2001fe8:	10c00917 	ldw	r3,36(r2)
 2001fec:	e0bff617 	ldw	r2,-40(fp)
 2001ff0:	d8800015 	stw	r2,0(sp)
 2001ff4:	e13ffa17 	ldw	r4,-24(fp)
 2001ff8:	e17ff517 	ldw	r5,-44(fp)
 2001ffc:	e1bffb17 	ldw	r6,-20(fp)
 2002000:	e1fffc17 	ldw	r7,-16(fp)
 2002004:	183ee83a 	callr	r3
 2002008:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 200200c:	e0fffd17 	ldw	r3,-12(fp)
 2002010:	e0bff617 	ldw	r2,-40(fp)
 2002014:	18802f26 	beq	r3,r2,20020d4 <alt_epcs_flash_write+0x268>
 2002018:	e0bff917 	ldw	r2,-28(fp)
 200201c:	1004c03a 	cmpne	r2,r2,zero
 2002020:	10002c1e 	bne	r2,zero,20020d4 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 2002024:	e0fffd17 	ldw	r3,-12(fp)
 2002028:	e0bff617 	ldw	r2,-40(fp)
 200202c:	1885c83a 	sub	r2,r3,r2
 2002030:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2002034:	e0bff817 	ldw	r2,-32(fp)
 2002038:	e0fffa17 	ldw	r3,-24(fp)
 200203c:	1004913a 	slli	r2,r2,4
 2002040:	10c5883a 	add	r2,r2,r3
 2002044:	10801004 	addi	r2,r2,64
 2002048:	10c00017 	ldw	r3,0(r2)
 200204c:	e0bff517 	ldw	r2,-44(fp)
 2002050:	1885883a 	add	r2,r3,r2
 2002054:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2002058:	e0fffc17 	ldw	r3,-16(fp)
 200205c:	e0bff617 	ldw	r2,-40(fp)
 2002060:	1885883a 	add	r2,r3,r2
 2002064:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2002068:	e0bff817 	ldw	r2,-32(fp)
 200206c:	e0fffa17 	ldw	r3,-24(fp)
 2002070:	1004913a 	slli	r2,r2,4
 2002074:	10c5883a 	add	r2,r2,r3
 2002078:	10801004 	addi	r2,r2,64
 200207c:	10c00017 	ldw	r3,0(r2)
 2002080:	e0bff517 	ldw	r2,-44(fp)
 2002084:	10c5883a 	add	r2,r2,r3
 2002088:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200208c:	e0bff717 	ldw	r2,-36(fp)
 2002090:	10800044 	addi	r2,r2,1
 2002094:	e0bff715 	stw	r2,-36(fp)
 2002098:	e0bff817 	ldw	r2,-32(fp)
 200209c:	e0fffa17 	ldw	r3,-24(fp)
 20020a0:	1004913a 	slli	r2,r2,4
 20020a4:	10c5883a 	add	r2,r2,r3
 20020a8:	10800f04 	addi	r2,r2,60
 20020ac:	10c00017 	ldw	r3,0(r2)
 20020b0:	e0bff717 	ldw	r2,-36(fp)
 20020b4:	10ff9816 	blt	r2,r3,2001f18 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 20020b8:	e0bff817 	ldw	r2,-32(fp)
 20020bc:	10800044 	addi	r2,r2,1
 20020c0:	e0bff815 	stw	r2,-32(fp)
 20020c4:	e0bffa17 	ldw	r2,-24(fp)
 20020c8:	10c00c17 	ldw	r3,48(r2)
 20020cc:	e0bff817 	ldw	r2,-32(fp)
 20020d0:	10ff7116 	blt	r2,r3,2001e98 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 20020d4:	e0bff917 	ldw	r2,-28(fp)
}
 20020d8:	e037883a 	mov	sp,fp
 20020dc:	dfc00117 	ldw	ra,4(sp)
 20020e0:	df000017 	ldw	fp,0(sp)
 20020e4:	dec00204 	addi	sp,sp,8
 20020e8:	f800283a 	ret

020020ec <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 20020ec:	defffa04 	addi	sp,sp,-24
 20020f0:	df000515 	stw	fp,20(sp)
 20020f4:	df000504 	addi	fp,sp,20
 20020f8:	e13ffd15 	stw	r4,-12(fp)
 20020fc:	e17ffe15 	stw	r5,-8(fp)
 2002100:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2002104:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2002108:	e0bffd17 	ldw	r2,-12(fp)
 200210c:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 2002110:	e0bffb17 	ldw	r2,-20(fp)
 2002114:	10c00c17 	ldw	r3,48(r2)
 2002118:	e0bfff17 	ldw	r2,-4(fp)
 200211c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2002120:	e0bffb17 	ldw	r2,-20(fp)
 2002124:	10800c17 	ldw	r2,48(r2)
 2002128:	1004c03a 	cmpne	r2,r2,zero
 200212c:	1000031e 	bne	r2,zero,200213c <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 2002130:	00bffec4 	movi	r2,-5
 2002134:	e0bffc15 	stw	r2,-16(fp)
 2002138:	00000b06 	br	2002168 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 200213c:	e0bffb17 	ldw	r2,-20(fp)
 2002140:	10800c17 	ldw	r2,48(r2)
 2002144:	10800250 	cmplti	r2,r2,9
 2002148:	1000031e 	bne	r2,zero,2002158 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 200214c:	00bffd04 	movi	r2,-12
 2002150:	e0bffc15 	stw	r2,-16(fp)
 2002154:	00000406 	br	2002168 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 2002158:	e0bffb17 	ldw	r2,-20(fp)
 200215c:	10c00d04 	addi	r3,r2,52
 2002160:	e0bffe17 	ldw	r2,-8(fp)
 2002164:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2002168:	e0bffc17 	ldw	r2,-16(fp)
}
 200216c:	e037883a 	mov	sp,fp
 2002170:	df000017 	ldw	fp,0(sp)
 2002174:	dec00104 	addi	sp,sp,4
 2002178:	f800283a 	ret

0200217c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 200217c:	defffa04 	addi	sp,sp,-24
 2002180:	dfc00515 	stw	ra,20(sp)
 2002184:	df000415 	stw	fp,16(sp)
 2002188:	df000404 	addi	fp,sp,16
 200218c:	e13ffe15 	stw	r4,-8(fp)
 2002190:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2002194:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2002198:	e0bffe17 	ldw	r2,-8(fp)
 200219c:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 20021a0:	e13ffe17 	ldw	r4,-8(fp)
 20021a4:	e17fff17 	ldw	r5,-4(fp)
 20021a8:	20021ec0 	call	20021ec <alt_epcs_test_address>
 20021ac:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 20021b0:	e0bffd17 	ldw	r2,-12(fp)
 20021b4:	1004803a 	cmplt	r2,r2,zero
 20021b8:	1000061e 	bne	r2,zero,20021d4 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 20021bc:	e0bffc17 	ldw	r2,-16(fp)
 20021c0:	11002d17 	ldw	r4,180(r2)
 20021c4:	e17fff17 	ldw	r5,-4(fp)
 20021c8:	e0bffc17 	ldw	r2,-16(fp)
 20021cc:	11803117 	ldw	r6,196(r2)
 20021d0:	20038f00 	call	20038f0 <epcs_sector_erase>
  }
  return ret_code;
 20021d4:	e0bffd17 	ldw	r2,-12(fp)
}
 20021d8:	e037883a 	mov	sp,fp
 20021dc:	dfc00117 	ldw	ra,4(sp)
 20021e0:	df000017 	ldw	fp,0(sp)
 20021e4:	dec00204 	addi	sp,sp,8
 20021e8:	f800283a 	ret

020021ec <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 20021ec:	defff904 	addi	sp,sp,-28
 20021f0:	df000615 	stw	fp,24(sp)
 20021f4:	df000604 	addi	fp,sp,24
 20021f8:	e13ffe15 	stw	r4,-8(fp)
 20021fc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2002200:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2002204:	e0bffe17 	ldw	r2,-8(fp)
 2002208:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 200220c:	e0bffc17 	ldw	r2,-16(fp)
 2002210:	10800c17 	ldw	r2,48(r2)
 2002214:	10bfffc4 	addi	r2,r2,-1
 2002218:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200221c:	e0bffb17 	ldw	r2,-20(fp)
 2002220:	e0fffc17 	ldw	r3,-16(fp)
 2002224:	1004913a 	slli	r2,r2,4
 2002228:	10c5883a 	add	r2,r2,r3
 200222c:	10800d04 	addi	r2,r2,52
 2002230:	11000017 	ldw	r4,0(r2)
 2002234:	e0bffb17 	ldw	r2,-20(fp)
 2002238:	e0fffc17 	ldw	r3,-16(fp)
 200223c:	1004913a 	slli	r2,r2,4
 2002240:	10c5883a 	add	r2,r2,r3
 2002244:	10800e04 	addi	r2,r2,56
 2002248:	10800017 	ldw	r2,0(r2)
 200224c:	2085883a 	add	r2,r4,r2
 2002250:	10bfffc4 	addi	r2,r2,-1
 2002254:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 2002258:	e0ffff17 	ldw	r3,-4(fp)
 200225c:	e0bffa17 	ldw	r2,-24(fp)
 2002260:	10c0022e 	bgeu	r2,r3,200226c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2002264:	00bffec4 	movi	r2,-5
 2002268:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 200226c:	e0bffd17 	ldw	r2,-12(fp)
}
 2002270:	e037883a 	mov	sp,fp
 2002274:	df000017 	ldw	fp,0(sp)
 2002278:	dec00104 	addi	sp,sp,4
 200227c:	f800283a 	ret

02002280 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2002280:	defff204 	addi	sp,sp,-56
 2002284:	dfc00d15 	stw	ra,52(sp)
 2002288:	df000c15 	stw	fp,48(sp)
 200228c:	df000c04 	addi	fp,sp,48
 2002290:	e13ffa15 	stw	r4,-24(fp)
 2002294:	e17ffb15 	stw	r5,-20(fp)
 2002298:	e1bffc15 	stw	r6,-16(fp)
 200229c:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20022a0:	e0bffa17 	ldw	r2,-24(fp)
 20022a4:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 20022a8:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 20022ac:	e13ffa17 	ldw	r4,-24(fp)
 20022b0:	e17ffc17 	ldw	r5,-16(fp)
 20022b4:	20021ec0 	call	20021ec <alt_epcs_test_address>
 20022b8:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 20022bc:	e0bff917 	ldw	r2,-28(fp)
 20022c0:	1004803a 	cmplt	r2,r2,zero
 20022c4:	10002f1e 	bne	r2,zero,2002384 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20022c8:	00002b06 	br	2002378 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 20022cc:	e0bff817 	ldw	r2,-32(fp)
 20022d0:	10c03017 	ldw	r3,192(r2)
 20022d4:	e0bffc17 	ldw	r2,-16(fp)
 20022d8:	1887883a 	add	r3,r3,r2
 20022dc:	e0bff817 	ldw	r2,-32(fp)
 20022e0:	10803017 	ldw	r2,192(r2)
 20022e4:	0085c83a 	sub	r2,zero,r2
 20022e8:	1884703a 	and	r2,r3,r2
 20022ec:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 20022f0:	e0fff517 	ldw	r3,-44(fp)
 20022f4:	e0bffc17 	ldw	r2,-16(fp)
 20022f8:	1885c83a 	sub	r2,r3,r2
 20022fc:	e0c00217 	ldw	r3,8(fp)
 2002300:	e0ffff15 	stw	r3,-4(fp)
 2002304:	e0bffe15 	stw	r2,-8(fp)
 2002308:	e0bfff17 	ldw	r2,-4(fp)
 200230c:	e0fffe17 	ldw	r3,-8(fp)
 2002310:	10c0020e 	bge	r2,r3,200231c <alt_epcs_flash_write_block+0x9c>
 2002314:	e0bfff17 	ldw	r2,-4(fp)
 2002318:	e0bffe15 	stw	r2,-8(fp)
 200231c:	e0fffe17 	ldw	r3,-8(fp)
 2002320:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2002324:	e0bff817 	ldw	r2,-32(fp)
 2002328:	11002d17 	ldw	r4,180(r2)
 200232c:	e0fffd17 	ldw	r3,-12(fp)
 2002330:	e0bff717 	ldw	r2,-36(fp)
 2002334:	188d883a 	add	r6,r3,r2
 2002338:	e0bff817 	ldw	r2,-32(fp)
 200233c:	10803117 	ldw	r2,196(r2)
 2002340:	d8800015 	stw	r2,0(sp)
 2002344:	e17ffc17 	ldw	r5,-16(fp)
 2002348:	e1fff617 	ldw	r7,-40(fp)
 200234c:	2003c580 	call	2003c58 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2002350:	e0c00217 	ldw	r3,8(fp)
 2002354:	e0bff617 	ldw	r2,-40(fp)
 2002358:	1885c83a 	sub	r2,r3,r2
 200235c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2002360:	e0fff717 	ldw	r3,-36(fp)
 2002364:	e0bff617 	ldw	r2,-40(fp)
 2002368:	1885883a 	add	r2,r3,r2
 200236c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2002370:	e0bff517 	ldw	r2,-44(fp)
 2002374:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2002378:	e0800217 	ldw	r2,8(fp)
 200237c:	1004c03a 	cmpne	r2,r2,zero
 2002380:	103fd21e 	bne	r2,zero,20022cc <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2002384:	e0bff917 	ldw	r2,-28(fp)
}
 2002388:	e037883a 	mov	sp,fp
 200238c:	dfc00117 	ldw	ra,4(sp)
 2002390:	df000017 	ldw	fp,0(sp)
 2002394:	dec00204 	addi	sp,sp,8
 2002398:	f800283a 	ret

0200239c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 200239c:	defff704 	addi	sp,sp,-36
 20023a0:	dfc00815 	stw	ra,32(sp)
 20023a4:	df000715 	stw	fp,28(sp)
 20023a8:	df000704 	addi	fp,sp,28
 20023ac:	e13ffc15 	stw	r4,-16(fp)
 20023b0:	e17ffd15 	stw	r5,-12(fp)
 20023b4:	e1bffe15 	stw	r6,-8(fp)
 20023b8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 20023bc:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20023c0:	e0bffc17 	ldw	r2,-16(fp)
 20023c4:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 20023c8:	e13ffc17 	ldw	r4,-16(fp)
 20023cc:	e17ffd17 	ldw	r5,-12(fp)
 20023d0:	20021ec0 	call	20021ec <alt_epcs_test_address>
 20023d4:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 20023d8:	e0bffb17 	ldw	r2,-20(fp)
 20023dc:	1004803a 	cmplt	r2,r2,zero
 20023e0:	10000e1e 	bne	r2,zero,200241c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 20023e4:	e0bffa17 	ldw	r2,-24(fp)
 20023e8:	11002d17 	ldw	r4,180(r2)
 20023ec:	e1bffe17 	ldw	r6,-8(fp)
 20023f0:	e0bffa17 	ldw	r2,-24(fp)
 20023f4:	10803117 	ldw	r2,196(r2)
 20023f8:	d8800015 	stw	r2,0(sp)
 20023fc:	e17ffd17 	ldw	r5,-12(fp)
 2002400:	e1ffff17 	ldw	r7,-4(fp)
 2002404:	2003a580 	call	2003a58 <epcs_read_buffer>
 2002408:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200240c:	e0fffb17 	ldw	r3,-20(fp)
 2002410:	e0bfff17 	ldw	r2,-4(fp)
 2002414:	1880011e 	bne	r3,r2,200241c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2002418:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 200241c:	e0bffb17 	ldw	r2,-20(fp)
}
 2002420:	e037883a 	mov	sp,fp
 2002424:	dfc00117 	ldw	ra,4(sp)
 2002428:	df000017 	ldw	fp,0(sp)
 200242c:	dec00204 	addi	sp,sp,8
 2002430:	f800283a 	ret

02002434 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2002434:	defffa04 	addi	sp,sp,-24
 2002438:	dfc00515 	stw	ra,20(sp)
 200243c:	df000415 	stw	fp,16(sp)
 2002440:	df000404 	addi	fp,sp,16
 2002444:	e13ffd15 	stw	r4,-12(fp)
 2002448:	e17ffe15 	stw	r5,-8(fp)
 200244c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2002450:	e0bffd17 	ldw	r2,-12(fp)
 2002454:	10800017 	ldw	r2,0(r2)
 2002458:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200245c:	e0bffc17 	ldw	r2,-16(fp)
 2002460:	11000a04 	addi	r4,r2,40
 2002464:	e0bffd17 	ldw	r2,-12(fp)
 2002468:	11c00217 	ldw	r7,8(r2)
 200246c:	e17ffe17 	ldw	r5,-8(fp)
 2002470:	e1bfff17 	ldw	r6,-4(fp)
 2002474:	2002a7c0 	call	2002a7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2002478:	e037883a 	mov	sp,fp
 200247c:	dfc00117 	ldw	ra,4(sp)
 2002480:	df000017 	ldw	fp,0(sp)
 2002484:	dec00204 	addi	sp,sp,8
 2002488:	f800283a 	ret

0200248c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200248c:	defffa04 	addi	sp,sp,-24
 2002490:	dfc00515 	stw	ra,20(sp)
 2002494:	df000415 	stw	fp,16(sp)
 2002498:	df000404 	addi	fp,sp,16
 200249c:	e13ffd15 	stw	r4,-12(fp)
 20024a0:	e17ffe15 	stw	r5,-8(fp)
 20024a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20024a8:	e0bffd17 	ldw	r2,-12(fp)
 20024ac:	10800017 	ldw	r2,0(r2)
 20024b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20024b4:	e0bffc17 	ldw	r2,-16(fp)
 20024b8:	11000a04 	addi	r4,r2,40
 20024bc:	e0bffd17 	ldw	r2,-12(fp)
 20024c0:	11c00217 	ldw	r7,8(r2)
 20024c4:	e17ffe17 	ldw	r5,-8(fp)
 20024c8:	e1bfff17 	ldw	r6,-4(fp)
 20024cc:	2002ca00 	call	2002ca0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20024d0:	e037883a 	mov	sp,fp
 20024d4:	dfc00117 	ldw	ra,4(sp)
 20024d8:	df000017 	ldw	fp,0(sp)
 20024dc:	dec00204 	addi	sp,sp,8
 20024e0:	f800283a 	ret

020024e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20024e4:	defffc04 	addi	sp,sp,-16
 20024e8:	dfc00315 	stw	ra,12(sp)
 20024ec:	df000215 	stw	fp,8(sp)
 20024f0:	df000204 	addi	fp,sp,8
 20024f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20024f8:	e0bfff17 	ldw	r2,-4(fp)
 20024fc:	10800017 	ldw	r2,0(r2)
 2002500:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2002504:	e0bffe17 	ldw	r2,-8(fp)
 2002508:	11000a04 	addi	r4,r2,40
 200250c:	e0bfff17 	ldw	r2,-4(fp)
 2002510:	11400217 	ldw	r5,8(r2)
 2002514:	20029140 	call	2002914 <altera_avalon_jtag_uart_close>
}
 2002518:	e037883a 	mov	sp,fp
 200251c:	dfc00117 	ldw	ra,4(sp)
 2002520:	df000017 	ldw	fp,0(sp)
 2002524:	dec00204 	addi	sp,sp,8
 2002528:	f800283a 	ret

0200252c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200252c:	defffa04 	addi	sp,sp,-24
 2002530:	dfc00515 	stw	ra,20(sp)
 2002534:	df000415 	stw	fp,16(sp)
 2002538:	df000404 	addi	fp,sp,16
 200253c:	e13ffd15 	stw	r4,-12(fp)
 2002540:	e17ffe15 	stw	r5,-8(fp)
 2002544:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2002548:	e0bffd17 	ldw	r2,-12(fp)
 200254c:	10800017 	ldw	r2,0(r2)
 2002550:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2002554:	e0bffc17 	ldw	r2,-16(fp)
 2002558:	11000a04 	addi	r4,r2,40
 200255c:	e17ffe17 	ldw	r5,-8(fp)
 2002560:	e1bfff17 	ldw	r6,-4(fp)
 2002564:	20029880 	call	2002988 <altera_avalon_jtag_uart_ioctl>
}
 2002568:	e037883a 	mov	sp,fp
 200256c:	dfc00117 	ldw	ra,4(sp)
 2002570:	df000017 	ldw	fp,0(sp)
 2002574:	dec00204 	addi	sp,sp,8
 2002578:	f800283a 	ret

0200257c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200257c:	defffa04 	addi	sp,sp,-24
 2002580:	dfc00515 	stw	ra,20(sp)
 2002584:	df000415 	stw	fp,16(sp)
 2002588:	df000404 	addi	fp,sp,16
 200258c:	e13ffd15 	stw	r4,-12(fp)
 2002590:	e17ffe15 	stw	r5,-8(fp)
 2002594:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2002598:	e0fffd17 	ldw	r3,-12(fp)
 200259c:	00800044 	movi	r2,1
 20025a0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20025a4:	e0bffd17 	ldw	r2,-12(fp)
 20025a8:	10800017 	ldw	r2,0(r2)
 20025ac:	11000104 	addi	r4,r2,4
 20025b0:	e0bffd17 	ldw	r2,-12(fp)
 20025b4:	10800817 	ldw	r2,32(r2)
 20025b8:	1007883a 	mov	r3,r2
 20025bc:	2005883a 	mov	r2,r4
 20025c0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20025c4:	e13ffe17 	ldw	r4,-8(fp)
 20025c8:	e17fff17 	ldw	r5,-4(fp)
 20025cc:	d8000015 	stw	zero,0(sp)
 20025d0:	01808034 	movhi	r6,512
 20025d4:	31898f04 	addi	r6,r6,9788
 20025d8:	e1fffd17 	ldw	r7,-12(fp)
 20025dc:	200160c0 	call	200160c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20025e0:	e0bffd17 	ldw	r2,-12(fp)
 20025e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 20025e8:	e0bffd17 	ldw	r2,-12(fp)
 20025ec:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20025f0:	00808034 	movhi	r2,512
 20025f4:	109c1b04 	addi	r2,r2,28780
 20025f8:	10800017 	ldw	r2,0(r2)
 20025fc:	100b883a 	mov	r5,r2
 2002600:	01808034 	movhi	r6,512
 2002604:	318a1904 	addi	r6,r6,10340
 2002608:	e1fffd17 	ldw	r7,-12(fp)
 200260c:	2003f640 	call	2003f64 <alt_alarm_start>
 2002610:	1004403a 	cmpge	r2,r2,zero
 2002614:	1000041e 	bne	r2,zero,2002628 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2002618:	e0fffd17 	ldw	r3,-12(fp)
 200261c:	00a00034 	movhi	r2,32768
 2002620:	10bfffc4 	addi	r2,r2,-1
 2002624:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2002628:	e037883a 	mov	sp,fp
 200262c:	dfc00117 	ldw	ra,4(sp)
 2002630:	df000017 	ldw	fp,0(sp)
 2002634:	dec00204 	addi	sp,sp,8
 2002638:	f800283a 	ret

0200263c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200263c:	defff804 	addi	sp,sp,-32
 2002640:	df000715 	stw	fp,28(sp)
 2002644:	df000704 	addi	fp,sp,28
 2002648:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200264c:	e0bfff17 	ldw	r2,-4(fp)
 2002650:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 2002654:	e0bffe17 	ldw	r2,-8(fp)
 2002658:	10800017 	ldw	r2,0(r2)
 200265c:	e0bffd15 	stw	r2,-12(fp)
 2002660:	00000006 	br	2002664 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2002664:	e0bffd17 	ldw	r2,-12(fp)
 2002668:	10800104 	addi	r2,r2,4
 200266c:	10800037 	ldwio	r2,0(r2)
 2002670:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2002674:	e0bffc17 	ldw	r2,-16(fp)
 2002678:	1080c00c 	andi	r2,r2,768
 200267c:	1005003a 	cmpeq	r2,r2,zero
 2002680:	1000741e 	bne	r2,zero,2002854 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2002684:	e0bffc17 	ldw	r2,-16(fp)
 2002688:	1080400c 	andi	r2,r2,256
 200268c:	1005003a 	cmpeq	r2,r2,zero
 2002690:	1000351e 	bne	r2,zero,2002768 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2002694:	00800074 	movhi	r2,1
 2002698:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200269c:	e0bffe17 	ldw	r2,-8(fp)
 20026a0:	10800a17 	ldw	r2,40(r2)
 20026a4:	10800044 	addi	r2,r2,1
 20026a8:	1081ffcc 	andi	r2,r2,2047
 20026ac:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 20026b0:	e0bffe17 	ldw	r2,-8(fp)
 20026b4:	10c00b17 	ldw	r3,44(r2)
 20026b8:	e0bffa17 	ldw	r2,-24(fp)
 20026bc:	18801626 	beq	r3,r2,2002718 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20026c0:	e0bffd17 	ldw	r2,-12(fp)
 20026c4:	10800037 	ldwio	r2,0(r2)
 20026c8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 20026cc:	e0bffb17 	ldw	r2,-20(fp)
 20026d0:	10a0000c 	andi	r2,r2,32768
 20026d4:	1005003a 	cmpeq	r2,r2,zero
 20026d8:	10000f1e 	bne	r2,zero,2002718 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20026dc:	e0bffe17 	ldw	r2,-8(fp)
 20026e0:	10c00a17 	ldw	r3,40(r2)
 20026e4:	e0bffb17 	ldw	r2,-20(fp)
 20026e8:	1009883a 	mov	r4,r2
 20026ec:	e0bffe17 	ldw	r2,-8(fp)
 20026f0:	1885883a 	add	r2,r3,r2
 20026f4:	10800e04 	addi	r2,r2,56
 20026f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20026fc:	e0bffe17 	ldw	r2,-8(fp)
 2002700:	10800a17 	ldw	r2,40(r2)
 2002704:	10800044 	addi	r2,r2,1
 2002708:	10c1ffcc 	andi	r3,r2,2047
 200270c:	e0bffe17 	ldw	r2,-8(fp)
 2002710:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2002714:	003fe106 	br	200269c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2002718:	e0bffb17 	ldw	r2,-20(fp)
 200271c:	10bfffec 	andhi	r2,r2,65535
 2002720:	1005003a 	cmpeq	r2,r2,zero
 2002724:	1000101e 	bne	r2,zero,2002768 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2002728:	e0bffe17 	ldw	r2,-8(fp)
 200272c:	10c00817 	ldw	r3,32(r2)
 2002730:	00bfff84 	movi	r2,-2
 2002734:	1886703a 	and	r3,r3,r2
 2002738:	e0bffe17 	ldw	r2,-8(fp)
 200273c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2002740:	e0bffd17 	ldw	r2,-12(fp)
 2002744:	11000104 	addi	r4,r2,4
 2002748:	e0bffe17 	ldw	r2,-8(fp)
 200274c:	10800817 	ldw	r2,32(r2)
 2002750:	1007883a 	mov	r3,r2
 2002754:	2005883a 	mov	r2,r4
 2002758:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200275c:	e0bffd17 	ldw	r2,-12(fp)
 2002760:	10800104 	addi	r2,r2,4
 2002764:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2002768:	e0bffc17 	ldw	r2,-16(fp)
 200276c:	1080800c 	andi	r2,r2,512
 2002770:	1005003a 	cmpeq	r2,r2,zero
 2002774:	103fbb1e 	bne	r2,zero,2002664 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2002778:	e0bffc17 	ldw	r2,-16(fp)
 200277c:	10bfffec 	andhi	r2,r2,65535
 2002780:	1004d43a 	srli	r2,r2,16
 2002784:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2002788:	00001506 	br	20027e0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200278c:	e13ffd17 	ldw	r4,-12(fp)
 2002790:	e0bffe17 	ldw	r2,-8(fp)
 2002794:	10c00d17 	ldw	r3,52(r2)
 2002798:	e0bffe17 	ldw	r2,-8(fp)
 200279c:	1885883a 	add	r2,r3,r2
 20027a0:	10820e04 	addi	r2,r2,2104
 20027a4:	10800003 	ldbu	r2,0(r2)
 20027a8:	10c03fcc 	andi	r3,r2,255
 20027ac:	18c0201c 	xori	r3,r3,128
 20027b0:	18ffe004 	addi	r3,r3,-128
 20027b4:	2005883a 	mov	r2,r4
 20027b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20027bc:	e0bffe17 	ldw	r2,-8(fp)
 20027c0:	10800d17 	ldw	r2,52(r2)
 20027c4:	10800044 	addi	r2,r2,1
 20027c8:	10c1ffcc 	andi	r3,r2,2047
 20027cc:	e0bffe17 	ldw	r2,-8(fp)
 20027d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 20027d4:	e0bff917 	ldw	r2,-28(fp)
 20027d8:	10bfffc4 	addi	r2,r2,-1
 20027dc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 20027e0:	e0bff917 	ldw	r2,-28(fp)
 20027e4:	1005003a 	cmpeq	r2,r2,zero
 20027e8:	1000051e 	bne	r2,zero,2002800 <altera_avalon_jtag_uart_irq+0x1c4>
 20027ec:	e0bffe17 	ldw	r2,-8(fp)
 20027f0:	10c00d17 	ldw	r3,52(r2)
 20027f4:	e0bffe17 	ldw	r2,-8(fp)
 20027f8:	10800c17 	ldw	r2,48(r2)
 20027fc:	18bfe31e 	bne	r3,r2,200278c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2002800:	e0bff917 	ldw	r2,-28(fp)
 2002804:	1005003a 	cmpeq	r2,r2,zero
 2002808:	103f961e 	bne	r2,zero,2002664 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200280c:	e0bffe17 	ldw	r2,-8(fp)
 2002810:	10c00817 	ldw	r3,32(r2)
 2002814:	00bfff44 	movi	r2,-3
 2002818:	1886703a 	and	r3,r3,r2
 200281c:	e0bffe17 	ldw	r2,-8(fp)
 2002820:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2002824:	e0bffe17 	ldw	r2,-8(fp)
 2002828:	10800017 	ldw	r2,0(r2)
 200282c:	11000104 	addi	r4,r2,4
 2002830:	e0bffe17 	ldw	r2,-8(fp)
 2002834:	10800817 	ldw	r2,32(r2)
 2002838:	1007883a 	mov	r3,r2
 200283c:	2005883a 	mov	r2,r4
 2002840:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2002844:	e0bffd17 	ldw	r2,-12(fp)
 2002848:	10800104 	addi	r2,r2,4
 200284c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2002850:	003f8406 	br	2002664 <altera_avalon_jtag_uart_irq+0x28>
}
 2002854:	e037883a 	mov	sp,fp
 2002858:	df000017 	ldw	fp,0(sp)
 200285c:	dec00104 	addi	sp,sp,4
 2002860:	f800283a 	ret

02002864 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2002864:	defffc04 	addi	sp,sp,-16
 2002868:	df000315 	stw	fp,12(sp)
 200286c:	df000304 	addi	fp,sp,12
 2002870:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2002874:	e0bfff17 	ldw	r2,-4(fp)
 2002878:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200287c:	e0bffe17 	ldw	r2,-8(fp)
 2002880:	10800017 	ldw	r2,0(r2)
 2002884:	10800104 	addi	r2,r2,4
 2002888:	10800037 	ldwio	r2,0(r2)
 200288c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2002890:	e0bffd17 	ldw	r2,-12(fp)
 2002894:	1081000c 	andi	r2,r2,1024
 2002898:	1005003a 	cmpeq	r2,r2,zero
 200289c:	10000c1e 	bne	r2,zero,20028d0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20028a0:	e0bffe17 	ldw	r2,-8(fp)
 20028a4:	10800017 	ldw	r2,0(r2)
 20028a8:	11000104 	addi	r4,r2,4
 20028ac:	e0bffe17 	ldw	r2,-8(fp)
 20028b0:	10800817 	ldw	r2,32(r2)
 20028b4:	10810014 	ori	r2,r2,1024
 20028b8:	1007883a 	mov	r3,r2
 20028bc:	2005883a 	mov	r2,r4
 20028c0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 20028c4:	e0bffe17 	ldw	r2,-8(fp)
 20028c8:	10000915 	stw	zero,36(r2)
 20028cc:	00000a06 	br	20028f8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 20028d0:	e0bffe17 	ldw	r2,-8(fp)
 20028d4:	10c00917 	ldw	r3,36(r2)
 20028d8:	00a00034 	movhi	r2,32768
 20028dc:	10bfff04 	addi	r2,r2,-4
 20028e0:	10c00536 	bltu	r2,r3,20028f8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 20028e4:	e0bffe17 	ldw	r2,-8(fp)
 20028e8:	10800917 	ldw	r2,36(r2)
 20028ec:	10c00044 	addi	r3,r2,1
 20028f0:	e0bffe17 	ldw	r2,-8(fp)
 20028f4:	10c00915 	stw	r3,36(r2)
 20028f8:	00808034 	movhi	r2,512
 20028fc:	109c1b04 	addi	r2,r2,28780
 2002900:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2002904:	e037883a 	mov	sp,fp
 2002908:	df000017 	ldw	fp,0(sp)
 200290c:	dec00104 	addi	sp,sp,4
 2002910:	f800283a 	ret

02002914 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2002914:	defffc04 	addi	sp,sp,-16
 2002918:	df000315 	stw	fp,12(sp)
 200291c:	df000304 	addi	fp,sp,12
 2002920:	e13ffd15 	stw	r4,-12(fp)
 2002924:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2002928:	00000706 	br	2002948 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 200292c:	e0bffe17 	ldw	r2,-8(fp)
 2002930:	1090000c 	andi	r2,r2,16384
 2002934:	1005003a 	cmpeq	r2,r2,zero
 2002938:	1000031e 	bne	r2,zero,2002948 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 200293c:	00bffd44 	movi	r2,-11
 2002940:	e0bfff15 	stw	r2,-4(fp)
 2002944:	00000b06 	br	2002974 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2002948:	e0bffd17 	ldw	r2,-12(fp)
 200294c:	10c00d17 	ldw	r3,52(r2)
 2002950:	e0bffd17 	ldw	r2,-12(fp)
 2002954:	10800c17 	ldw	r2,48(r2)
 2002958:	18800526 	beq	r3,r2,2002970 <altera_avalon_jtag_uart_close+0x5c>
 200295c:	e0bffd17 	ldw	r2,-12(fp)
 2002960:	10c00917 	ldw	r3,36(r2)
 2002964:	e0bffd17 	ldw	r2,-12(fp)
 2002968:	10800117 	ldw	r2,4(r2)
 200296c:	18bfef36 	bltu	r3,r2,200292c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2002970:	e03fff15 	stw	zero,-4(fp)
 2002974:	e0bfff17 	ldw	r2,-4(fp)
}
 2002978:	e037883a 	mov	sp,fp
 200297c:	df000017 	ldw	fp,0(sp)
 2002980:	dec00104 	addi	sp,sp,4
 2002984:	f800283a 	ret

02002988 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2002988:	defff804 	addi	sp,sp,-32
 200298c:	df000715 	stw	fp,28(sp)
 2002990:	df000704 	addi	fp,sp,28
 2002994:	e13ffb15 	stw	r4,-20(fp)
 2002998:	e17ffc15 	stw	r5,-16(fp)
 200299c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 20029a0:	00bff9c4 	movi	r2,-25
 20029a4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 20029a8:	e0bffc17 	ldw	r2,-16(fp)
 20029ac:	e0bfff15 	stw	r2,-4(fp)
 20029b0:	e0ffff17 	ldw	r3,-4(fp)
 20029b4:	189a8060 	cmpeqi	r2,r3,27137
 20029b8:	1000041e 	bne	r2,zero,20029cc <altera_avalon_jtag_uart_ioctl+0x44>
 20029bc:	e0ffff17 	ldw	r3,-4(fp)
 20029c0:	189a80a0 	cmpeqi	r2,r3,27138
 20029c4:	10001b1e 	bne	r2,zero,2002a34 <altera_avalon_jtag_uart_ioctl+0xac>
 20029c8:	00002706 	br	2002a68 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20029cc:	e0bffb17 	ldw	r2,-20(fp)
 20029d0:	10c00117 	ldw	r3,4(r2)
 20029d4:	00a00034 	movhi	r2,32768
 20029d8:	10bfffc4 	addi	r2,r2,-1
 20029dc:	18802226 	beq	r3,r2,2002a68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 20029e0:	e0bffd17 	ldw	r2,-12(fp)
 20029e4:	10800017 	ldw	r2,0(r2)
 20029e8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 20029ec:	e0bff917 	ldw	r2,-28(fp)
 20029f0:	10800090 	cmplti	r2,r2,2
 20029f4:	1000071e 	bne	r2,zero,2002a14 <altera_avalon_jtag_uart_ioctl+0x8c>
 20029f8:	e0fff917 	ldw	r3,-28(fp)
 20029fc:	00a00034 	movhi	r2,32768
 2002a00:	10bfffc4 	addi	r2,r2,-1
 2002a04:	18800326 	beq	r3,r2,2002a14 <altera_avalon_jtag_uart_ioctl+0x8c>
 2002a08:	e0bff917 	ldw	r2,-28(fp)
 2002a0c:	e0bffe15 	stw	r2,-8(fp)
 2002a10:	00000306 	br	2002a20 <altera_avalon_jtag_uart_ioctl+0x98>
 2002a14:	00e00034 	movhi	r3,32768
 2002a18:	18ffff84 	addi	r3,r3,-2
 2002a1c:	e0fffe15 	stw	r3,-8(fp)
 2002a20:	e0bffb17 	ldw	r2,-20(fp)
 2002a24:	e0fffe17 	ldw	r3,-8(fp)
 2002a28:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2002a2c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2002a30:	00000d06 	br	2002a68 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2002a34:	e0bffb17 	ldw	r2,-20(fp)
 2002a38:	10c00117 	ldw	r3,4(r2)
 2002a3c:	00a00034 	movhi	r2,32768
 2002a40:	10bfffc4 	addi	r2,r2,-1
 2002a44:	18800826 	beq	r3,r2,2002a68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2002a48:	e13ffd17 	ldw	r4,-12(fp)
 2002a4c:	e0bffb17 	ldw	r2,-20(fp)
 2002a50:	10c00917 	ldw	r3,36(r2)
 2002a54:	e0bffb17 	ldw	r2,-20(fp)
 2002a58:	10800117 	ldw	r2,4(r2)
 2002a5c:	1885803a 	cmpltu	r2,r3,r2
 2002a60:	20800015 	stw	r2,0(r4)
      rc = 0;
 2002a64:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2002a68:	e0bffa17 	ldw	r2,-24(fp)
}
 2002a6c:	e037883a 	mov	sp,fp
 2002a70:	df000017 	ldw	fp,0(sp)
 2002a74:	dec00104 	addi	sp,sp,4
 2002a78:	f800283a 	ret

02002a7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2002a7c:	defff204 	addi	sp,sp,-56
 2002a80:	dfc00d15 	stw	ra,52(sp)
 2002a84:	df000c15 	stw	fp,48(sp)
 2002a88:	df000c04 	addi	fp,sp,48
 2002a8c:	e13ffb15 	stw	r4,-20(fp)
 2002a90:	e17ffc15 	stw	r5,-16(fp)
 2002a94:	e1bffd15 	stw	r6,-12(fp)
 2002a98:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2002a9c:	e0bffc17 	ldw	r2,-16(fp)
 2002aa0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2002aa4:	00004806 	br	2002bc8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2002aa8:	e0bffb17 	ldw	r2,-20(fp)
 2002aac:	10800a17 	ldw	r2,40(r2)
 2002ab0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2002ab4:	e0bffb17 	ldw	r2,-20(fp)
 2002ab8:	10800b17 	ldw	r2,44(r2)
 2002abc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2002ac0:	e0fff717 	ldw	r3,-36(fp)
 2002ac4:	e0bff617 	ldw	r2,-40(fp)
 2002ac8:	18800536 	bltu	r3,r2,2002ae0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2002acc:	e0bff717 	ldw	r2,-36(fp)
 2002ad0:	e0fff617 	ldw	r3,-40(fp)
 2002ad4:	10c5c83a 	sub	r2,r2,r3
 2002ad8:	e0bff815 	stw	r2,-32(fp)
 2002adc:	00000406 	br	2002af0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2002ae0:	00820004 	movi	r2,2048
 2002ae4:	e0fff617 	ldw	r3,-40(fp)
 2002ae8:	10c5c83a 	sub	r2,r2,r3
 2002aec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2002af0:	e0bff817 	ldw	r2,-32(fp)
 2002af4:	1005003a 	cmpeq	r2,r2,zero
 2002af8:	10001f1e 	bne	r2,zero,2002b78 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2002afc:	e0fffd17 	ldw	r3,-12(fp)
 2002b00:	e0bff817 	ldw	r2,-32(fp)
 2002b04:	1880022e 	bgeu	r3,r2,2002b10 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2002b08:	e0bffd17 	ldw	r2,-12(fp)
 2002b0c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2002b10:	e0bffb17 	ldw	r2,-20(fp)
 2002b14:	10c00e04 	addi	r3,r2,56
 2002b18:	e0bff617 	ldw	r2,-40(fp)
 2002b1c:	1887883a 	add	r3,r3,r2
 2002b20:	e0bffa17 	ldw	r2,-24(fp)
 2002b24:	1009883a 	mov	r4,r2
 2002b28:	180b883a 	mov	r5,r3
 2002b2c:	e1bff817 	ldw	r6,-32(fp)
 2002b30:	20051c00 	call	20051c0 <memcpy>
      ptr   += n;
 2002b34:	e0fff817 	ldw	r3,-32(fp)
 2002b38:	e0bffa17 	ldw	r2,-24(fp)
 2002b3c:	10c5883a 	add	r2,r2,r3
 2002b40:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2002b44:	e0fffd17 	ldw	r3,-12(fp)
 2002b48:	e0bff817 	ldw	r2,-32(fp)
 2002b4c:	1885c83a 	sub	r2,r3,r2
 2002b50:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2002b54:	e0fff617 	ldw	r3,-40(fp)
 2002b58:	e0bff817 	ldw	r2,-32(fp)
 2002b5c:	1885883a 	add	r2,r3,r2
 2002b60:	10c1ffcc 	andi	r3,r2,2047
 2002b64:	e0bffb17 	ldw	r2,-20(fp)
 2002b68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2002b6c:	e0bffd17 	ldw	r2,-12(fp)
 2002b70:	10800048 	cmpgei	r2,r2,1
 2002b74:	103fcc1e 	bne	r2,zero,2002aa8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2002b78:	e0fffa17 	ldw	r3,-24(fp)
 2002b7c:	e0bffc17 	ldw	r2,-16(fp)
 2002b80:	1880141e 	bne	r3,r2,2002bd4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2002b84:	e0bffe17 	ldw	r2,-8(fp)
 2002b88:	1090000c 	andi	r2,r2,16384
 2002b8c:	1004c03a 	cmpne	r2,r2,zero
 2002b90:	1000101e 	bne	r2,zero,2002bd4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2002b94:	e0bffb17 	ldw	r2,-20(fp)
 2002b98:	10c00a17 	ldw	r3,40(r2)
 2002b9c:	e0bff717 	ldw	r2,-36(fp)
 2002ba0:	1880051e 	bne	r3,r2,2002bb8 <altera_avalon_jtag_uart_read+0x13c>
 2002ba4:	e0bffb17 	ldw	r2,-20(fp)
 2002ba8:	10c00917 	ldw	r3,36(r2)
 2002bac:	e0bffb17 	ldw	r2,-20(fp)
 2002bb0:	10800117 	ldw	r2,4(r2)
 2002bb4:	18bff736 	bltu	r3,r2,2002b94 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2002bb8:	e0bffb17 	ldw	r2,-20(fp)
 2002bbc:	10c00a17 	ldw	r3,40(r2)
 2002bc0:	e0bff717 	ldw	r2,-36(fp)
 2002bc4:	18800326 	beq	r3,r2,2002bd4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2002bc8:	e0bffd17 	ldw	r2,-12(fp)
 2002bcc:	10800048 	cmpgei	r2,r2,1
 2002bd0:	103fb51e 	bne	r2,zero,2002aa8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2002bd4:	e0fffa17 	ldw	r3,-24(fp)
 2002bd8:	e0bffc17 	ldw	r2,-16(fp)
 2002bdc:	18801926 	beq	r3,r2,2002c44 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002be0:	0005303a 	rdctl	r2,status
 2002be4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002be8:	e0fff517 	ldw	r3,-44(fp)
 2002bec:	00bfff84 	movi	r2,-2
 2002bf0:	1884703a 	and	r2,r3,r2
 2002bf4:	1001703a 	wrctl	status,r2
  
  return context;
 2002bf8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2002bfc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2002c00:	e0bffb17 	ldw	r2,-20(fp)
 2002c04:	10800817 	ldw	r2,32(r2)
 2002c08:	10c00054 	ori	r3,r2,1
 2002c0c:	e0bffb17 	ldw	r2,-20(fp)
 2002c10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2002c14:	e0bffb17 	ldw	r2,-20(fp)
 2002c18:	10800017 	ldw	r2,0(r2)
 2002c1c:	11000104 	addi	r4,r2,4
 2002c20:	e0bffb17 	ldw	r2,-20(fp)
 2002c24:	10800817 	ldw	r2,32(r2)
 2002c28:	1007883a 	mov	r3,r2
 2002c2c:	2005883a 	mov	r2,r4
 2002c30:	10c00035 	stwio	r3,0(r2)
 2002c34:	e0bff917 	ldw	r2,-28(fp)
 2002c38:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002c3c:	e0bff417 	ldw	r2,-48(fp)
 2002c40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2002c44:	e0fffa17 	ldw	r3,-24(fp)
 2002c48:	e0bffc17 	ldw	r2,-16(fp)
 2002c4c:	18800526 	beq	r3,r2,2002c64 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2002c50:	e0fffa17 	ldw	r3,-24(fp)
 2002c54:	e0bffc17 	ldw	r2,-16(fp)
 2002c58:	1887c83a 	sub	r3,r3,r2
 2002c5c:	e0ffff15 	stw	r3,-4(fp)
 2002c60:	00000906 	br	2002c88 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2002c64:	e0bffe17 	ldw	r2,-8(fp)
 2002c68:	1090000c 	andi	r2,r2,16384
 2002c6c:	1005003a 	cmpeq	r2,r2,zero
 2002c70:	1000031e 	bne	r2,zero,2002c80 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2002c74:	00bffd44 	movi	r2,-11
 2002c78:	e0bfff15 	stw	r2,-4(fp)
 2002c7c:	00000206 	br	2002c88 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2002c80:	00bffec4 	movi	r2,-5
 2002c84:	e0bfff15 	stw	r2,-4(fp)
 2002c88:	e0bfff17 	ldw	r2,-4(fp)
}
 2002c8c:	e037883a 	mov	sp,fp
 2002c90:	dfc00117 	ldw	ra,4(sp)
 2002c94:	df000017 	ldw	fp,0(sp)
 2002c98:	dec00204 	addi	sp,sp,8
 2002c9c:	f800283a 	ret

02002ca0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2002ca0:	defff204 	addi	sp,sp,-56
 2002ca4:	dfc00d15 	stw	ra,52(sp)
 2002ca8:	df000c15 	stw	fp,48(sp)
 2002cac:	df000c04 	addi	fp,sp,48
 2002cb0:	e13ffb15 	stw	r4,-20(fp)
 2002cb4:	e17ffc15 	stw	r5,-16(fp)
 2002cb8:	e1bffd15 	stw	r6,-12(fp)
 2002cbc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2002cc0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2002cc4:	e0bffc17 	ldw	r2,-16(fp)
 2002cc8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2002ccc:	00003a06 	br	2002db8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2002cd0:	e0bffb17 	ldw	r2,-20(fp)
 2002cd4:	10800c17 	ldw	r2,48(r2)
 2002cd8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 2002cdc:	e0bffb17 	ldw	r2,-20(fp)
 2002ce0:	10800d17 	ldw	r2,52(r2)
 2002ce4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2002ce8:	e0fffa17 	ldw	r3,-24(fp)
 2002cec:	e0bff917 	ldw	r2,-28(fp)
 2002cf0:	1880062e 	bgeu	r3,r2,2002d0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2002cf4:	e0fff917 	ldw	r3,-28(fp)
 2002cf8:	e0bffa17 	ldw	r2,-24(fp)
 2002cfc:	1885c83a 	sub	r2,r3,r2
 2002d00:	10bfffc4 	addi	r2,r2,-1
 2002d04:	e0bff815 	stw	r2,-32(fp)
 2002d08:	00000c06 	br	2002d3c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2002d0c:	e0bff917 	ldw	r2,-28(fp)
 2002d10:	1005003a 	cmpeq	r2,r2,zero
 2002d14:	1000051e 	bne	r2,zero,2002d2c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2002d18:	00820004 	movi	r2,2048
 2002d1c:	e0fffa17 	ldw	r3,-24(fp)
 2002d20:	10c5c83a 	sub	r2,r2,r3
 2002d24:	e0bff815 	stw	r2,-32(fp)
 2002d28:	00000406 	br	2002d3c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2002d2c:	0081ffc4 	movi	r2,2047
 2002d30:	e0fffa17 	ldw	r3,-24(fp)
 2002d34:	10c5c83a 	sub	r2,r2,r3
 2002d38:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2002d3c:	e0bff817 	ldw	r2,-32(fp)
 2002d40:	1005003a 	cmpeq	r2,r2,zero
 2002d44:	10001f1e 	bne	r2,zero,2002dc4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2002d48:	e0fffd17 	ldw	r3,-12(fp)
 2002d4c:	e0bff817 	ldw	r2,-32(fp)
 2002d50:	1880022e 	bgeu	r3,r2,2002d5c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2002d54:	e0bffd17 	ldw	r2,-12(fp)
 2002d58:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2002d5c:	e0bffb17 	ldw	r2,-20(fp)
 2002d60:	10c20e04 	addi	r3,r2,2104
 2002d64:	e0bffa17 	ldw	r2,-24(fp)
 2002d68:	1885883a 	add	r2,r3,r2
 2002d6c:	e0fffc17 	ldw	r3,-16(fp)
 2002d70:	1009883a 	mov	r4,r2
 2002d74:	180b883a 	mov	r5,r3
 2002d78:	e1bff817 	ldw	r6,-32(fp)
 2002d7c:	20051c00 	call	20051c0 <memcpy>
      ptr   += n;
 2002d80:	e0fff817 	ldw	r3,-32(fp)
 2002d84:	e0bffc17 	ldw	r2,-16(fp)
 2002d88:	10c5883a 	add	r2,r2,r3
 2002d8c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2002d90:	e0fffd17 	ldw	r3,-12(fp)
 2002d94:	e0bff817 	ldw	r2,-32(fp)
 2002d98:	1885c83a 	sub	r2,r3,r2
 2002d9c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2002da0:	e0fffa17 	ldw	r3,-24(fp)
 2002da4:	e0bff817 	ldw	r2,-32(fp)
 2002da8:	1885883a 	add	r2,r3,r2
 2002dac:	10c1ffcc 	andi	r3,r2,2047
 2002db0:	e0bffb17 	ldw	r2,-20(fp)
 2002db4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2002db8:	e0bffd17 	ldw	r2,-12(fp)
 2002dbc:	10800048 	cmpgei	r2,r2,1
 2002dc0:	103fc31e 	bne	r2,zero,2002cd0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002dc4:	0005303a 	rdctl	r2,status
 2002dc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002dcc:	e0fff517 	ldw	r3,-44(fp)
 2002dd0:	00bfff84 	movi	r2,-2
 2002dd4:	1884703a 	and	r2,r3,r2
 2002dd8:	1001703a 	wrctl	status,r2
  
  return context;
 2002ddc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2002de0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2002de4:	e0bffb17 	ldw	r2,-20(fp)
 2002de8:	10800817 	ldw	r2,32(r2)
 2002dec:	10c00094 	ori	r3,r2,2
 2002df0:	e0bffb17 	ldw	r2,-20(fp)
 2002df4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2002df8:	e0bffb17 	ldw	r2,-20(fp)
 2002dfc:	10800017 	ldw	r2,0(r2)
 2002e00:	11000104 	addi	r4,r2,4
 2002e04:	e0bffb17 	ldw	r2,-20(fp)
 2002e08:	10800817 	ldw	r2,32(r2)
 2002e0c:	1007883a 	mov	r3,r2
 2002e10:	2005883a 	mov	r2,r4
 2002e14:	10c00035 	stwio	r3,0(r2)
 2002e18:	e0bff717 	ldw	r2,-36(fp)
 2002e1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002e20:	e0bff417 	ldw	r2,-48(fp)
 2002e24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2002e28:	e0bffd17 	ldw	r2,-12(fp)
 2002e2c:	10800050 	cmplti	r2,r2,1
 2002e30:	1000111e 	bne	r2,zero,2002e78 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2002e34:	e0bffe17 	ldw	r2,-8(fp)
 2002e38:	1090000c 	andi	r2,r2,16384
 2002e3c:	1004c03a 	cmpne	r2,r2,zero
 2002e40:	1000101e 	bne	r2,zero,2002e84 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2002e44:	e0bffb17 	ldw	r2,-20(fp)
 2002e48:	10c00d17 	ldw	r3,52(r2)
 2002e4c:	e0bff917 	ldw	r2,-28(fp)
 2002e50:	1880051e 	bne	r3,r2,2002e68 <altera_avalon_jtag_uart_write+0x1c8>
 2002e54:	e0bffb17 	ldw	r2,-20(fp)
 2002e58:	10c00917 	ldw	r3,36(r2)
 2002e5c:	e0bffb17 	ldw	r2,-20(fp)
 2002e60:	10800117 	ldw	r2,4(r2)
 2002e64:	18bff736 	bltu	r3,r2,2002e44 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2002e68:	e0bffb17 	ldw	r2,-20(fp)
 2002e6c:	10c00d17 	ldw	r3,52(r2)
 2002e70:	e0bff917 	ldw	r2,-28(fp)
 2002e74:	18800326 	beq	r3,r2,2002e84 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 2002e78:	e0bffd17 	ldw	r2,-12(fp)
 2002e7c:	10800048 	cmpgei	r2,r2,1
 2002e80:	103fcd1e 	bne	r2,zero,2002db8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2002e84:	e0fffc17 	ldw	r3,-16(fp)
 2002e88:	e0bff617 	ldw	r2,-40(fp)
 2002e8c:	18800526 	beq	r3,r2,2002ea4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2002e90:	e0fffc17 	ldw	r3,-16(fp)
 2002e94:	e0bff617 	ldw	r2,-40(fp)
 2002e98:	1887c83a 	sub	r3,r3,r2
 2002e9c:	e0ffff15 	stw	r3,-4(fp)
 2002ea0:	00000906 	br	2002ec8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2002ea4:	e0bffe17 	ldw	r2,-8(fp)
 2002ea8:	1090000c 	andi	r2,r2,16384
 2002eac:	1005003a 	cmpeq	r2,r2,zero
 2002eb0:	1000031e 	bne	r2,zero,2002ec0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 2002eb4:	00bffd44 	movi	r2,-11
 2002eb8:	e0bfff15 	stw	r2,-4(fp)
 2002ebc:	00000206 	br	2002ec8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 2002ec0:	00bffec4 	movi	r2,-5
 2002ec4:	e0bfff15 	stw	r2,-4(fp)
 2002ec8:	e0bfff17 	ldw	r2,-4(fp)
}
 2002ecc:	e037883a 	mov	sp,fp
 2002ed0:	dfc00117 	ldw	ra,4(sp)
 2002ed4:	df000017 	ldw	fp,0(sp)
 2002ed8:	dec00204 	addi	sp,sp,8
 2002edc:	f800283a 	ret

02002ee0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2002ee0:	defffa04 	addi	sp,sp,-24
 2002ee4:	dfc00515 	stw	ra,20(sp)
 2002ee8:	df000415 	stw	fp,16(sp)
 2002eec:	df000404 	addi	fp,sp,16
 2002ef0:	e13ffd15 	stw	r4,-12(fp)
 2002ef4:	e17ffe15 	stw	r5,-8(fp)
 2002ef8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2002efc:	e0bffd17 	ldw	r2,-12(fp)
 2002f00:	10800017 	ldw	r2,0(r2)
 2002f04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2002f08:	e0bffc17 	ldw	r2,-16(fp)
 2002f0c:	11000a04 	addi	r4,r2,40
 2002f10:	e0bffd17 	ldw	r2,-12(fp)
 2002f14:	11c00217 	ldw	r7,8(r2)
 2002f18:	e17ffe17 	ldw	r5,-8(fp)
 2002f1c:	e1bfff17 	ldw	r6,-4(fp)
 2002f20:	20033d80 	call	20033d8 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2002f24:	e037883a 	mov	sp,fp
 2002f28:	dfc00117 	ldw	ra,4(sp)
 2002f2c:	df000017 	ldw	fp,0(sp)
 2002f30:	dec00204 	addi	sp,sp,8
 2002f34:	f800283a 	ret

02002f38 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2002f38:	defffa04 	addi	sp,sp,-24
 2002f3c:	dfc00515 	stw	ra,20(sp)
 2002f40:	df000415 	stw	fp,16(sp)
 2002f44:	df000404 	addi	fp,sp,16
 2002f48:	e13ffd15 	stw	r4,-12(fp)
 2002f4c:	e17ffe15 	stw	r5,-8(fp)
 2002f50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2002f54:	e0bffd17 	ldw	r2,-12(fp)
 2002f58:	10800017 	ldw	r2,0(r2)
 2002f5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 2002f60:	e0bffc17 	ldw	r2,-16(fp)
 2002f64:	11000a04 	addi	r4,r2,40
 2002f68:	e0bffd17 	ldw	r2,-12(fp)
 2002f6c:	11c00217 	ldw	r7,8(r2)
 2002f70:	e17ffe17 	ldw	r5,-8(fp)
 2002f74:	e1bfff17 	ldw	r6,-4(fp)
 2002f78:	20036680 	call	2003668 <altera_avalon_uart_write>
      fd->fd_flags);
}
 2002f7c:	e037883a 	mov	sp,fp
 2002f80:	dfc00117 	ldw	ra,4(sp)
 2002f84:	df000017 	ldw	fp,0(sp)
 2002f88:	dec00204 	addi	sp,sp,8
 2002f8c:	f800283a 	ret

02002f90 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2002f90:	defffc04 	addi	sp,sp,-16
 2002f94:	dfc00315 	stw	ra,12(sp)
 2002f98:	df000215 	stw	fp,8(sp)
 2002f9c:	df000204 	addi	fp,sp,8
 2002fa0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2002fa4:	e0bfff17 	ldw	r2,-4(fp)
 2002fa8:	10800017 	ldw	r2,0(r2)
 2002fac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 2002fb0:	e0bffe17 	ldw	r2,-8(fp)
 2002fb4:	11000a04 	addi	r4,r2,40
 2002fb8:	e0bfff17 	ldw	r2,-4(fp)
 2002fbc:	11400217 	ldw	r5,8(r2)
 2002fc0:	20033780 	call	2003378 <altera_avalon_uart_close>
}
 2002fc4:	e037883a 	mov	sp,fp
 2002fc8:	dfc00117 	ldw	ra,4(sp)
 2002fcc:	df000017 	ldw	fp,0(sp)
 2002fd0:	dec00204 	addi	sp,sp,8
 2002fd4:	f800283a 	ret

02002fd8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 2002fd8:	defff704 	addi	sp,sp,-36
 2002fdc:	dfc00815 	stw	ra,32(sp)
 2002fe0:	df000715 	stw	fp,28(sp)
 2002fe4:	df000704 	addi	fp,sp,28
 2002fe8:	e13ffc15 	stw	r4,-16(fp)
 2002fec:	e17ffd15 	stw	r5,-12(fp)
 2002ff0:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
 2002ff4:	e0bffc17 	ldw	r2,-16(fp)
 2002ff8:	10800017 	ldw	r2,0(r2)
 2002ffc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 2003000:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2003004:	1004c03a 	cmpne	r2,r2,zero
 2003008:	1000061e 	bne	r2,zero,2003024 <altera_avalon_uart_init+0x4c>
 200300c:	0005883a 	mov	r2,zero
 2003010:	1004c03a 	cmpne	r2,r2,zero
 2003014:	1000031e 	bne	r2,zero,2003024 <altera_avalon_uart_init+0x4c>
 2003018:	0005883a 	mov	r2,zero
 200301c:	1005003a 	cmpeq	r2,r2,zero
 2003020:	1000031e 	bne	r2,zero,2003030 <altera_avalon_uart_init+0x58>
 2003024:	00800044 	movi	r2,1
 2003028:	e0bfff15 	stw	r2,-4(fp)
 200302c:	00000106 	br	2003034 <altera_avalon_uart_init+0x5c>
 2003030:	e03fff15 	stw	zero,-4(fp)
 2003034:	e0bfff17 	ldw	r2,-4(fp)
 2003038:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 200303c:	e0bffa17 	ldw	r2,-24(fp)
 2003040:	1004c03a 	cmpne	r2,r2,zero
 2003044:	1000111e 	bne	r2,zero,200308c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 2003048:	e0fffc17 	ldw	r3,-16(fp)
 200304c:	00832004 	movi	r2,3200
 2003050:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2003054:	e0bffb17 	ldw	r2,-20(fp)
 2003058:	11000304 	addi	r4,r2,12
 200305c:	e0bffc17 	ldw	r2,-16(fp)
 2003060:	10800117 	ldw	r2,4(r2)
 2003064:	1007883a 	mov	r3,r2
 2003068:	2005883a 	mov	r2,r4
 200306c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 2003070:	d8000015 	stw	zero,0(sp)
 2003074:	e13ffd17 	ldw	r4,-12(fp)
 2003078:	e17ffe17 	ldw	r5,-8(fp)
 200307c:	01808034 	movhi	r6,512
 2003080:	318c2804 	addi	r6,r6,12448
 2003084:	e1fffc17 	ldw	r7,-16(fp)
 2003088:	200160c0 	call	200160c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 200308c:	e037883a 	mov	sp,fp
 2003090:	dfc00117 	ldw	ra,4(sp)
 2003094:	df000017 	ldw	fp,0(sp)
 2003098:	dec00204 	addi	sp,sp,8
 200309c:	f800283a 	ret

020030a0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 20030a0:	defffa04 	addi	sp,sp,-24
 20030a4:	dfc00515 	stw	ra,20(sp)
 20030a8:	df000415 	stw	fp,16(sp)
 20030ac:	df000404 	addi	fp,sp,16
 20030b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 20030b4:	e0bfff17 	ldw	r2,-4(fp)
 20030b8:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
 20030bc:	e0bffd17 	ldw	r2,-12(fp)
 20030c0:	10800017 	ldw	r2,0(r2)
 20030c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 20030c8:	e0bffc17 	ldw	r2,-16(fp)
 20030cc:	10800204 	addi	r2,r2,8
 20030d0:	10800037 	ldwio	r2,0(r2)
 20030d4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 20030d8:	e0bffc17 	ldw	r2,-16(fp)
 20030dc:	10800204 	addi	r2,r2,8
 20030e0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 20030e4:	e0bffc17 	ldw	r2,-16(fp)
 20030e8:	10800204 	addi	r2,r2,8
 20030ec:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 20030f0:	e0bffe17 	ldw	r2,-8(fp)
 20030f4:	1080200c 	andi	r2,r2,128
 20030f8:	1005003a 	cmpeq	r2,r2,zero
 20030fc:	1000031e 	bne	r2,zero,200310c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 2003100:	e13ffd17 	ldw	r4,-12(fp)
 2003104:	e17ffe17 	ldw	r5,-8(fp)
 2003108:	200313c0 	call	200313c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 200310c:	e0bffe17 	ldw	r2,-8(fp)
 2003110:	1081100c 	andi	r2,r2,1088
 2003114:	1005003a 	cmpeq	r2,r2,zero
 2003118:	1000031e 	bne	r2,zero,2003128 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 200311c:	e13ffd17 	ldw	r4,-12(fp)
 2003120:	e17ffe17 	ldw	r5,-8(fp)
 2003124:	200321c0 	call	200321c <altera_avalon_uart_txirq>
  }
  

}
 2003128:	e037883a 	mov	sp,fp
 200312c:	dfc00117 	ldw	ra,4(sp)
 2003130:	df000017 	ldw	fp,0(sp)
 2003134:	dec00204 	addi	sp,sp,8
 2003138:	f800283a 	ret

0200313c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200313c:	defffc04 	addi	sp,sp,-16
 2003140:	df000315 	stw	fp,12(sp)
 2003144:	df000304 	addi	fp,sp,12
 2003148:	e13ffe15 	stw	r4,-8(fp)
 200314c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 2003150:	e0bfff17 	ldw	r2,-4(fp)
 2003154:	108000cc 	andi	r2,r2,3
 2003158:	1004c03a 	cmpne	r2,r2,zero
 200315c:	10002b1e 	bne	r2,zero,200320c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 2003160:	e0bffe17 	ldw	r2,-8(fp)
 2003164:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2003168:	e0bffe17 	ldw	r2,-8(fp)
 200316c:	10800317 	ldw	r2,12(r2)
 2003170:	10800044 	addi	r2,r2,1
 2003174:	10800fcc 	andi	r2,r2,63
 2003178:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 200317c:	e0bffe17 	ldw	r2,-8(fp)
 2003180:	11000317 	ldw	r4,12(r2)
 2003184:	e0bffe17 	ldw	r2,-8(fp)
 2003188:	10800017 	ldw	r2,0(r2)
 200318c:	10800037 	ldwio	r2,0(r2)
 2003190:	1007883a 	mov	r3,r2
 2003194:	e0bffe17 	ldw	r2,-8(fp)
 2003198:	2085883a 	add	r2,r4,r2
 200319c:	10800704 	addi	r2,r2,28
 20031a0:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 20031a4:	e0fffe17 	ldw	r3,-8(fp)
 20031a8:	e0bffd17 	ldw	r2,-12(fp)
 20031ac:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20031b0:	e0bffe17 	ldw	r2,-8(fp)
 20031b4:	10800317 	ldw	r2,12(r2)
 20031b8:	10800044 	addi	r2,r2,1
 20031bc:	10800fcc 	andi	r2,r2,63
 20031c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 20031c4:	e0bffe17 	ldw	r2,-8(fp)
 20031c8:	10c00217 	ldw	r3,8(r2)
 20031cc:	e0bffd17 	ldw	r2,-12(fp)
 20031d0:	18800e1e 	bne	r3,r2,200320c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20031d4:	e0bffe17 	ldw	r2,-8(fp)
 20031d8:	10c00117 	ldw	r3,4(r2)
 20031dc:	00bfdfc4 	movi	r2,-129
 20031e0:	1886703a 	and	r3,r3,r2
 20031e4:	e0bffe17 	ldw	r2,-8(fp)
 20031e8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 20031ec:	e0bffe17 	ldw	r2,-8(fp)
 20031f0:	10800017 	ldw	r2,0(r2)
 20031f4:	11000304 	addi	r4,r2,12
 20031f8:	e0bffe17 	ldw	r2,-8(fp)
 20031fc:	10800117 	ldw	r2,4(r2)
 2003200:	1007883a 	mov	r3,r2
 2003204:	2005883a 	mov	r2,r4
 2003208:	10c00035 	stwio	r3,0(r2)
  }   
}
 200320c:	e037883a 	mov	sp,fp
 2003210:	df000017 	ldw	fp,0(sp)
 2003214:	dec00104 	addi	sp,sp,4
 2003218:	f800283a 	ret

0200321c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200321c:	defffd04 	addi	sp,sp,-12
 2003220:	df000215 	stw	fp,8(sp)
 2003224:	df000204 	addi	fp,sp,8
 2003228:	e13ffe15 	stw	r4,-8(fp)
 200322c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2003230:	e0bffe17 	ldw	r2,-8(fp)
 2003234:	10c00417 	ldw	r3,16(r2)
 2003238:	e0bffe17 	ldw	r2,-8(fp)
 200323c:	10800517 	ldw	r2,20(r2)
 2003240:	18803626 	beq	r3,r2,200331c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2003244:	e0bffe17 	ldw	r2,-8(fp)
 2003248:	10800617 	ldw	r2,24(r2)
 200324c:	1080008c 	andi	r2,r2,2
 2003250:	1005003a 	cmpeq	r2,r2,zero
 2003254:	1000041e 	bne	r2,zero,2003268 <altera_avalon_uart_txirq+0x4c>
 2003258:	e0bfff17 	ldw	r2,-4(fp)
 200325c:	1082000c 	andi	r2,r2,2048
 2003260:	1005003a 	cmpeq	r2,r2,zero
 2003264:	10001e1e 	bne	r2,zero,20032e0 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2003268:	e0bffe17 	ldw	r2,-8(fp)
 200326c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2003270:	e0bffe17 	ldw	r2,-8(fp)
 2003274:	10800017 	ldw	r2,0(r2)
 2003278:	11000104 	addi	r4,r2,4
 200327c:	e0bffe17 	ldw	r2,-8(fp)
 2003280:	10c00417 	ldw	r3,16(r2)
 2003284:	e0bffe17 	ldw	r2,-8(fp)
 2003288:	1885883a 	add	r2,r3,r2
 200328c:	10801704 	addi	r2,r2,92
 2003290:	10800003 	ldbu	r2,0(r2)
 2003294:	10c03fcc 	andi	r3,r2,255
 2003298:	2005883a 	mov	r2,r4
 200329c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 20032a0:	e0bffe17 	ldw	r2,-8(fp)
 20032a4:	10800417 	ldw	r2,16(r2)
 20032a8:	10c00044 	addi	r3,r2,1
 20032ac:	e0bffe17 	ldw	r2,-8(fp)
 20032b0:	10c00415 	stw	r3,16(r2)
 20032b4:	e0bffe17 	ldw	r2,-8(fp)
 20032b8:	10800417 	ldw	r2,16(r2)
 20032bc:	10c00fcc 	andi	r3,r2,63
 20032c0:	e0bffe17 	ldw	r2,-8(fp)
 20032c4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20032c8:	e0bffe17 	ldw	r2,-8(fp)
 20032cc:	10800117 	ldw	r2,4(r2)
 20032d0:	10c01014 	ori	r3,r2,64
 20032d4:	e0bffe17 	ldw	r2,-8(fp)
 20032d8:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20032dc:	00000f06 	br	200331c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 20032e0:	e0bffe17 	ldw	r2,-8(fp)
 20032e4:	10800017 	ldw	r2,0(r2)
 20032e8:	10800204 	addi	r2,r2,8
 20032ec:	10800037 	ldwio	r2,0(r2)
 20032f0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20032f4:	e0bfff17 	ldw	r2,-4(fp)
 20032f8:	1082000c 	andi	r2,r2,2048
 20032fc:	1004c03a 	cmpne	r2,r2,zero
 2003300:	1000061e 	bne	r2,zero,200331c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2003304:	e0bffe17 	ldw	r2,-8(fp)
 2003308:	10c00117 	ldw	r3,4(r2)
 200330c:	00bfefc4 	movi	r2,-65
 2003310:	1886703a 	and	r3,r3,r2
 2003314:	e0bffe17 	ldw	r2,-8(fp)
 2003318:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 200331c:	e0bffe17 	ldw	r2,-8(fp)
 2003320:	10c00417 	ldw	r3,16(r2)
 2003324:	e0bffe17 	ldw	r2,-8(fp)
 2003328:	10800517 	ldw	r2,20(r2)
 200332c:	1880061e 	bne	r3,r2,2003348 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2003330:	e0bffe17 	ldw	r2,-8(fp)
 2003334:	10c00117 	ldw	r3,4(r2)
 2003338:	00beefc4 	movi	r2,-1089
 200333c:	1886703a 	and	r3,r3,r2
 2003340:	e0bffe17 	ldw	r2,-8(fp)
 2003344:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2003348:	e0bffe17 	ldw	r2,-8(fp)
 200334c:	10800017 	ldw	r2,0(r2)
 2003350:	11000304 	addi	r4,r2,12
 2003354:	e0bffe17 	ldw	r2,-8(fp)
 2003358:	10800117 	ldw	r2,4(r2)
 200335c:	1007883a 	mov	r3,r2
 2003360:	2005883a 	mov	r2,r4
 2003364:	10c00035 	stwio	r3,0(r2)
}
 2003368:	e037883a 	mov	sp,fp
 200336c:	df000017 	ldw	fp,0(sp)
 2003370:	dec00104 	addi	sp,sp,4
 2003374:	f800283a 	ret

02003378 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2003378:	defffc04 	addi	sp,sp,-16
 200337c:	df000315 	stw	fp,12(sp)
 2003380:	df000304 	addi	fp,sp,12
 2003384:	e13ffd15 	stw	r4,-12(fp)
 2003388:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200338c:	00000706 	br	20033ac <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2003390:	e0bffe17 	ldw	r2,-8(fp)
 2003394:	1090000c 	andi	r2,r2,16384
 2003398:	1005003a 	cmpeq	r2,r2,zero
 200339c:	1000031e 	bne	r2,zero,20033ac <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
 20033a0:	00bffd44 	movi	r2,-11
 20033a4:	e0bfff15 	stw	r2,-4(fp)
 20033a8:	00000606 	br	20033c4 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20033ac:	e0bffd17 	ldw	r2,-12(fp)
 20033b0:	10c00417 	ldw	r3,16(r2)
 20033b4:	e0bffd17 	ldw	r2,-12(fp)
 20033b8:	10800517 	ldw	r2,20(r2)
 20033bc:	18bff41e 	bne	r3,r2,2003390 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20033c0:	e03fff15 	stw	zero,-4(fp)
 20033c4:	e0bfff17 	ldw	r2,-4(fp)
}
 20033c8:	e037883a 	mov	sp,fp
 20033cc:	df000017 	ldw	fp,0(sp)
 20033d0:	dec00104 	addi	sp,sp,4
 20033d4:	f800283a 	ret

020033d8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 20033d8:	defff004 	addi	sp,sp,-64
 20033dc:	dfc00f15 	stw	ra,60(sp)
 20033e0:	df000e15 	stw	fp,56(sp)
 20033e4:	df000e04 	addi	fp,sp,56
 20033e8:	e13ffb15 	stw	r4,-20(fp)
 20033ec:	e17ffc15 	stw	r5,-16(fp)
 20033f0:	e1bffd15 	stw	r6,-12(fp)
 20033f4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 20033f8:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
 20033fc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 2003400:	e0bffe17 	ldw	r2,-8(fp)
 2003404:	1090000c 	andi	r2,r2,16384
 2003408:	1005003a 	cmpeq	r2,r2,zero
 200340c:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 2003410:	e0bffb17 	ldw	r2,-20(fp)
 2003414:	10800217 	ldw	r2,8(r2)
 2003418:	10800044 	addi	r2,r2,1
 200341c:	10800fcc 	andi	r2,r2,63
 2003420:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2003424:	00001906 	br	200348c <altera_avalon_uart_read+0xb4>
    {
      count++;
 2003428:	e0bff617 	ldw	r2,-40(fp)
 200342c:	10800044 	addi	r2,r2,1
 2003430:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 2003434:	e0bffb17 	ldw	r2,-20(fp)
 2003438:	10c00217 	ldw	r3,8(r2)
 200343c:	e0bffb17 	ldw	r2,-20(fp)
 2003440:	1885883a 	add	r2,r3,r2
 2003444:	10800704 	addi	r2,r2,28
 2003448:	10800003 	ldbu	r2,0(r2)
 200344c:	1007883a 	mov	r3,r2
 2003450:	e0bffc17 	ldw	r2,-16(fp)
 2003454:	10c00005 	stb	r3,0(r2)
 2003458:	e0bffc17 	ldw	r2,-16(fp)
 200345c:	10800044 	addi	r2,r2,1
 2003460:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 2003464:	e0bffb17 	ldw	r2,-20(fp)
 2003468:	10800217 	ldw	r2,8(r2)
 200346c:	10c00044 	addi	r3,r2,1
 2003470:	e0bffb17 	ldw	r2,-20(fp)
 2003474:	10c00215 	stw	r3,8(r2)
 2003478:	e0bffb17 	ldw	r2,-20(fp)
 200347c:	10800217 	ldw	r2,8(r2)
 2003480:	10c00fcc 	andi	r3,r2,63
 2003484:	e0bffb17 	ldw	r2,-20(fp)
 2003488:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200348c:	e0fff617 	ldw	r3,-40(fp)
 2003490:	e0bffd17 	ldw	r2,-12(fp)
 2003494:	1880050e 	bge	r3,r2,20034ac <altera_avalon_uart_read+0xd4>
 2003498:	e0bffb17 	ldw	r2,-20(fp)
 200349c:	10c00217 	ldw	r3,8(r2)
 20034a0:	e0bffb17 	ldw	r2,-20(fp)
 20034a4:	10800317 	ldw	r2,12(r2)
 20034a8:	18bfdf1e 	bne	r3,r2,2003428 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 20034ac:	e0bff617 	ldw	r2,-40(fp)
 20034b0:	1004c03a 	cmpne	r2,r2,zero
 20034b4:	1000271e 	bne	r2,zero,2003554 <altera_avalon_uart_read+0x17c>
 20034b8:	e0bffb17 	ldw	r2,-20(fp)
 20034bc:	10c00217 	ldw	r3,8(r2)
 20034c0:	e0bffb17 	ldw	r2,-20(fp)
 20034c4:	10800317 	ldw	r2,12(r2)
 20034c8:	1880221e 	bne	r3,r2,2003554 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
 20034cc:	e0bff917 	ldw	r2,-28(fp)
 20034d0:	1004c03a 	cmpne	r2,r2,zero
 20034d4:	1000061e 	bne	r2,zero,20034f0 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 20034d8:	20036080 	call	2003608 <alt_get_errno>
 20034dc:	00c002c4 	movi	r3,11
 20034e0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 20034e4:	00800044 	movi	r2,1
 20034e8:	e0bff705 	stb	r2,-36(fp)
        break;
 20034ec:	00001f06 	br	200356c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20034f0:	0005303a 	rdctl	r2,status
 20034f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20034f8:	e0fff517 	ldw	r3,-44(fp)
 20034fc:	00bfff84 	movi	r2,-2
 2003500:	1884703a 	and	r2,r3,r2
 2003504:	1001703a 	wrctl	status,r2
  
  return context;
 2003508:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 200350c:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2003510:	e0bffb17 	ldw	r2,-20(fp)
 2003514:	10800117 	ldw	r2,4(r2)
 2003518:	10c02014 	ori	r3,r2,128
 200351c:	e0bffb17 	ldw	r2,-20(fp)
 2003520:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2003524:	e0bffb17 	ldw	r2,-20(fp)
 2003528:	10800017 	ldw	r2,0(r2)
 200352c:	11000304 	addi	r4,r2,12
 2003530:	e0bffb17 	ldw	r2,-20(fp)
 2003534:	10800117 	ldw	r2,4(r2)
 2003538:	1007883a 	mov	r3,r2
 200353c:	2005883a 	mov	r2,r4
 2003540:	10c00035 	stwio	r3,0(r2)
 2003544:	e0bffa17 	ldw	r2,-24(fp)
 2003548:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200354c:	e0bff417 	ldw	r2,-48(fp)
 2003550:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 2003554:	e0bff617 	ldw	r2,-40(fp)
 2003558:	1004c03a 	cmpne	r2,r2,zero
 200355c:	1000031e 	bne	r2,zero,200356c <altera_avalon_uart_read+0x194>
 2003560:	e0bffd17 	ldw	r2,-12(fp)
 2003564:	1004c03a 	cmpne	r2,r2,zero
 2003568:	103fc81e 	bne	r2,zero,200348c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200356c:	0005303a 	rdctl	r2,status
 2003570:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003574:	e0fff317 	ldw	r3,-52(fp)
 2003578:	00bfff84 	movi	r2,-2
 200357c:	1884703a 	and	r2,r3,r2
 2003580:	1001703a 	wrctl	status,r2
  
  return context;
 2003584:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2003588:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200358c:	e0bffb17 	ldw	r2,-20(fp)
 2003590:	10800117 	ldw	r2,4(r2)
 2003594:	10c02014 	ori	r3,r2,128
 2003598:	e0bffb17 	ldw	r2,-20(fp)
 200359c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20035a0:	e0bffb17 	ldw	r2,-20(fp)
 20035a4:	10800017 	ldw	r2,0(r2)
 20035a8:	11000304 	addi	r4,r2,12
 20035ac:	e0bffb17 	ldw	r2,-20(fp)
 20035b0:	10800117 	ldw	r2,4(r2)
 20035b4:	1007883a 	mov	r3,r2
 20035b8:	2005883a 	mov	r2,r4
 20035bc:	10c00035 	stwio	r3,0(r2)
 20035c0:	e0bffa17 	ldw	r2,-24(fp)
 20035c4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20035c8:	e0bff217 	ldw	r2,-56(fp)
 20035cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 20035d0:	e0bff703 	ldbu	r2,-36(fp)
 20035d4:	1005003a 	cmpeq	r2,r2,zero
 20035d8:	1000031e 	bne	r2,zero,20035e8 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
 20035dc:	00bffd04 	movi	r2,-12
 20035e0:	e0bfff15 	stw	r2,-4(fp)
 20035e4:	00000206 	br	20035f0 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
 20035e8:	e0bff617 	ldw	r2,-40(fp)
 20035ec:	e0bfff15 	stw	r2,-4(fp)
 20035f0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 20035f4:	e037883a 	mov	sp,fp
 20035f8:	dfc00117 	ldw	ra,4(sp)
 20035fc:	df000017 	ldw	fp,0(sp)
 2003600:	dec00204 	addi	sp,sp,8
 2003604:	f800283a 	ret

02003608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003608:	defffd04 	addi	sp,sp,-12
 200360c:	dfc00215 	stw	ra,8(sp)
 2003610:	df000115 	stw	fp,4(sp)
 2003614:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003618:	00808034 	movhi	r2,512
 200361c:	109c1004 	addi	r2,r2,28736
 2003620:	10800017 	ldw	r2,0(r2)
 2003624:	1005003a 	cmpeq	r2,r2,zero
 2003628:	1000061e 	bne	r2,zero,2003644 <alt_get_errno+0x3c>
 200362c:	00808034 	movhi	r2,512
 2003630:	109c1004 	addi	r2,r2,28736
 2003634:	10800017 	ldw	r2,0(r2)
 2003638:	103ee83a 	callr	r2
 200363c:	e0bfff15 	stw	r2,-4(fp)
 2003640:	00000306 	br	2003650 <alt_get_errno+0x48>
 2003644:	00808034 	movhi	r2,512
 2003648:	109c1d04 	addi	r2,r2,28788
 200364c:	e0bfff15 	stw	r2,-4(fp)
 2003650:	e0bfff17 	ldw	r2,-4(fp)
}
 2003654:	e037883a 	mov	sp,fp
 2003658:	dfc00117 	ldw	ra,4(sp)
 200365c:	df000017 	ldw	fp,0(sp)
 2003660:	dec00204 	addi	sp,sp,8
 2003664:	f800283a 	ret

02003668 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 2003668:	defff204 	addi	sp,sp,-56
 200366c:	dfc00d15 	stw	ra,52(sp)
 2003670:	df000c15 	stw	fp,48(sp)
 2003674:	df000c04 	addi	fp,sp,48
 2003678:	e13ffc15 	stw	r4,-16(fp)
 200367c:	e17ffd15 	stw	r5,-12(fp)
 2003680:	e1bffe15 	stw	r6,-8(fp)
 2003684:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 2003688:	e0bffe17 	ldw	r2,-8(fp)
 200368c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2003690:	e0bfff17 	ldw	r2,-4(fp)
 2003694:	1090000c 	andi	r2,r2,16384
 2003698:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 200369c:	00004006 	br	20037a0 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20036a0:	e0bffc17 	ldw	r2,-16(fp)
 20036a4:	10800517 	ldw	r2,20(r2)
 20036a8:	10800044 	addi	r2,r2,1
 20036ac:	10800fcc 	andi	r2,r2,63
 20036b0:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 20036b4:	e0bffc17 	ldw	r2,-16(fp)
 20036b8:	10c00417 	ldw	r3,16(r2)
 20036bc:	e0bff917 	ldw	r2,-28(fp)
 20036c0:	1880251e 	bne	r3,r2,2003758 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
 20036c4:	e0bffa17 	ldw	r2,-24(fp)
 20036c8:	1005003a 	cmpeq	r2,r2,zero
 20036cc:	1000051e 	bne	r2,zero,20036e4 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 20036d0:	20038300 	call	2003830 <alt_get_errno>
 20036d4:	1007883a 	mov	r3,r2
 20036d8:	008002c4 	movi	r2,11
 20036dc:	18800015 	stw	r2,0(r3)
        break;
 20036e0:	00003206 	br	20037ac <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20036e4:	0005303a 	rdctl	r2,status
 20036e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20036ec:	e0fff717 	ldw	r3,-36(fp)
 20036f0:	00bfff84 	movi	r2,-2
 20036f4:	1884703a 	and	r2,r3,r2
 20036f8:	1001703a 	wrctl	status,r2
  
  return context;
 20036fc:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2003700:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2003704:	e0bffc17 	ldw	r2,-16(fp)
 2003708:	10800117 	ldw	r2,4(r2)
 200370c:	10c11014 	ori	r3,r2,1088
 2003710:	e0bffc17 	ldw	r2,-16(fp)
 2003714:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2003718:	e0bffc17 	ldw	r2,-16(fp)
 200371c:	10800017 	ldw	r2,0(r2)
 2003720:	11000304 	addi	r4,r2,12
 2003724:	e0bffc17 	ldw	r2,-16(fp)
 2003728:	10800117 	ldw	r2,4(r2)
 200372c:	1007883a 	mov	r3,r2
 2003730:	2005883a 	mov	r2,r4
 2003734:	10c00035 	stwio	r3,0(r2)
 2003738:	e0bffb17 	ldw	r2,-20(fp)
 200373c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003740:	e0bff617 	ldw	r2,-40(fp)
 2003744:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 2003748:	e0bffc17 	ldw	r2,-16(fp)
 200374c:	10c00417 	ldw	r3,16(r2)
 2003750:	e0bff917 	ldw	r2,-28(fp)
 2003754:	18bffc26 	beq	r3,r2,2003748 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
 2003758:	e0bff817 	ldw	r2,-32(fp)
 200375c:	10bfffc4 	addi	r2,r2,-1
 2003760:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 2003764:	e0bffc17 	ldw	r2,-16(fp)
 2003768:	10c00517 	ldw	r3,20(r2)
 200376c:	e0bffd17 	ldw	r2,-12(fp)
 2003770:	10800003 	ldbu	r2,0(r2)
 2003774:	1009883a 	mov	r4,r2
 2003778:	e0bffc17 	ldw	r2,-16(fp)
 200377c:	1885883a 	add	r2,r3,r2
 2003780:	10801704 	addi	r2,r2,92
 2003784:	11000005 	stb	r4,0(r2)
 2003788:	e0bffd17 	ldw	r2,-12(fp)
 200378c:	10800044 	addi	r2,r2,1
 2003790:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 2003794:	e0fffc17 	ldw	r3,-16(fp)
 2003798:	e0bff917 	ldw	r2,-28(fp)
 200379c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20037a0:	e0bff817 	ldw	r2,-32(fp)
 20037a4:	1004c03a 	cmpne	r2,r2,zero
 20037a8:	103fbd1e 	bne	r2,zero,20036a0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20037ac:	0005303a 	rdctl	r2,status
 20037b0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20037b4:	e0fff517 	ldw	r3,-44(fp)
 20037b8:	00bfff84 	movi	r2,-2
 20037bc:	1884703a 	and	r2,r3,r2
 20037c0:	1001703a 	wrctl	status,r2
  
  return context;
 20037c4:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 20037c8:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20037cc:	e0bffc17 	ldw	r2,-16(fp)
 20037d0:	10800117 	ldw	r2,4(r2)
 20037d4:	10c11014 	ori	r3,r2,1088
 20037d8:	e0bffc17 	ldw	r2,-16(fp)
 20037dc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20037e0:	e0bffc17 	ldw	r2,-16(fp)
 20037e4:	10800017 	ldw	r2,0(r2)
 20037e8:	11000304 	addi	r4,r2,12
 20037ec:	e0bffc17 	ldw	r2,-16(fp)
 20037f0:	10800117 	ldw	r2,4(r2)
 20037f4:	1007883a 	mov	r3,r2
 20037f8:	2005883a 	mov	r2,r4
 20037fc:	10c00035 	stwio	r3,0(r2)
 2003800:	e0bffb17 	ldw	r2,-20(fp)
 2003804:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003808:	e0bff417 	ldw	r2,-48(fp)
 200380c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 2003810:	e0fffe17 	ldw	r3,-8(fp)
 2003814:	e0bff817 	ldw	r2,-32(fp)
 2003818:	1885c83a 	sub	r2,r3,r2
}
 200381c:	e037883a 	mov	sp,fp
 2003820:	dfc00117 	ldw	ra,4(sp)
 2003824:	df000017 	ldw	fp,0(sp)
 2003828:	dec00204 	addi	sp,sp,8
 200382c:	f800283a 	ret

02003830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003830:	defffd04 	addi	sp,sp,-12
 2003834:	dfc00215 	stw	ra,8(sp)
 2003838:	df000115 	stw	fp,4(sp)
 200383c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003840:	00808034 	movhi	r2,512
 2003844:	109c1004 	addi	r2,r2,28736
 2003848:	10800017 	ldw	r2,0(r2)
 200384c:	1005003a 	cmpeq	r2,r2,zero
 2003850:	1000061e 	bne	r2,zero,200386c <alt_get_errno+0x3c>
 2003854:	00808034 	movhi	r2,512
 2003858:	109c1004 	addi	r2,r2,28736
 200385c:	10800017 	ldw	r2,0(r2)
 2003860:	103ee83a 	callr	r2
 2003864:	e0bfff15 	stw	r2,-4(fp)
 2003868:	00000306 	br	2003878 <alt_get_errno+0x48>
 200386c:	00808034 	movhi	r2,512
 2003870:	109c1d04 	addi	r2,r2,28788
 2003874:	e0bfff15 	stw	r2,-4(fp)
 2003878:	e0bfff17 	ldw	r2,-4(fp)
}
 200387c:	e037883a 	mov	sp,fp
 2003880:	dfc00117 	ldw	ra,4(sp)
 2003884:	df000017 	ldw	fp,0(sp)
 2003888:	dec00204 	addi	sp,sp,8
 200388c:	f800283a 	ret

02003890 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2003890:	defff904 	addi	sp,sp,-28
 2003894:	dfc00615 	stw	ra,24(sp)
 2003898:	df000515 	stw	fp,20(sp)
 200389c:	df000504 	addi	fp,sp,20
 20038a0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 20038a4:	00800144 	movi	r2,5
 20038a8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 20038ac:	00800044 	movi	r2,1
 20038b0:	d8800015 	stw	r2,0(sp)
 20038b4:	e0bffe44 	addi	r2,fp,-7
 20038b8:	d8800115 	stw	r2,4(sp)
 20038bc:	d8000215 	stw	zero,8(sp)
 20038c0:	e13fff17 	ldw	r4,-4(fp)
 20038c4:	000b883a 	mov	r5,zero
 20038c8:	01800044 	movi	r6,1
 20038cc:	e1fffe04 	addi	r7,fp,-8
 20038d0:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 20038d4:	e0bffe43 	ldbu	r2,-7(fp)
 20038d8:	10803fcc 	andi	r2,r2,255
}
 20038dc:	e037883a 	mov	sp,fp
 20038e0:	dfc00117 	ldw	ra,4(sp)
 20038e4:	df000017 	ldw	fp,0(sp)
 20038e8:	dec00204 	addi	sp,sp,8
 20038ec:	f800283a 	ret

020038f0 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 20038f0:	defff604 	addi	sp,sp,-40
 20038f4:	dfc00915 	stw	ra,36(sp)
 20038f8:	df000815 	stw	fp,32(sp)
 20038fc:	df000804 	addi	fp,sp,32
 2003900:	e13ffd15 	stw	r4,-12(fp)
 2003904:	e17ffe15 	stw	r5,-8(fp)
 2003908:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 200390c:	e0bfff17 	ldw	r2,-4(fp)
 2003910:	1005003a 	cmpeq	r2,r2,zero
 2003914:	1000121e 	bne	r2,zero,2003960 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2003918:	00bff604 	movi	r2,-40
 200391c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2003920:	e0bffe17 	ldw	r2,-8(fp)
 2003924:	1004d63a 	srli	r2,r2,24
 2003928:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 200392c:	e0bffe17 	ldw	r2,-8(fp)
 2003930:	1004d43a 	srli	r2,r2,16
 2003934:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2003938:	e0bffe17 	ldw	r2,-8(fp)
 200393c:	1004d23a 	srli	r2,r2,8
 2003940:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2003944:	e0bffe17 	ldw	r2,-8(fp)
 2003948:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 200394c:	00800144 	movi	r2,5
 2003950:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2003954:	e13ffd17 	ldw	r4,-12(fp)
 2003958:	2003eb40 	call	2003eb4 <epcs_enter_4_bytes_mode>
 200395c:	00000c06 	br	2003990 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 2003960:	00bff604 	movi	r2,-40
 2003964:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2003968:	e0bffe17 	ldw	r2,-8(fp)
 200396c:	1004d43a 	srli	r2,r2,16
 2003970:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2003974:	e0bffe17 	ldw	r2,-8(fp)
 2003978:	1004d23a 	srli	r2,r2,8
 200397c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2003980:	e0bffe17 	ldw	r2,-8(fp)
 2003984:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2003988:	00800104 	movi	r2,4
 200398c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2003990:	e13ffd17 	ldw	r4,-12(fp)
 2003994:	2003ba40 	call	2003ba4 <epcs_write_enable>

  alt_avalon_spi_command(
 2003998:	e1bffb03 	ldbu	r6,-20(fp)
 200399c:	e1fffb44 	addi	r7,fp,-19
 20039a0:	d8000015 	stw	zero,0(sp)
 20039a4:	d8000115 	stw	zero,4(sp)
 20039a8:	d8000215 	stw	zero,8(sp)
 20039ac:	e13ffd17 	ldw	r4,-12(fp)
 20039b0:	000b883a 	mov	r5,zero
 20039b4:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 20039b8:	e13ffd17 	ldw	r4,-12(fp)
 20039bc:	20039e80 	call	20039e8 <epcs_await_wip_released>

  if(four_bytes_mode)
 20039c0:	e0bfff17 	ldw	r2,-4(fp)
 20039c4:	1005003a 	cmpeq	r2,r2,zero
 20039c8:	1000021e 	bne	r2,zero,20039d4 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 20039cc:	e13ffd17 	ldw	r4,-12(fp)
 20039d0:	2003f0c0 	call	2003f0c <epcs_exit_4_bytes_mode>
  }
}
 20039d4:	e037883a 	mov	sp,fp
 20039d8:	dfc00117 	ldw	ra,4(sp)
 20039dc:	df000017 	ldw	fp,0(sp)
 20039e0:	dec00204 	addi	sp,sp,8
 20039e4:	f800283a 	ret

020039e8 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 20039e8:	defffd04 	addi	sp,sp,-12
 20039ec:	dfc00215 	stw	ra,8(sp)
 20039f0:	df000115 	stw	fp,4(sp)
 20039f4:	df000104 	addi	fp,sp,4
 20039f8:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 20039fc:	e13fff17 	ldw	r4,-4(fp)
 2003a00:	2003a200 	call	2003a20 <epcs_test_wip>
 2003a04:	1004c03a 	cmpne	r2,r2,zero
 2003a08:	103ffc1e 	bne	r2,zero,20039fc <epcs_await_wip_released+0x14>
  {
  }
}
 2003a0c:	e037883a 	mov	sp,fp
 2003a10:	dfc00117 	ldw	ra,4(sp)
 2003a14:	df000017 	ldw	fp,0(sp)
 2003a18:	dec00204 	addi	sp,sp,8
 2003a1c:	f800283a 	ret

02003a20 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2003a20:	defffd04 	addi	sp,sp,-12
 2003a24:	dfc00215 	stw	ra,8(sp)
 2003a28:	df000115 	stw	fp,4(sp)
 2003a2c:	df000104 	addi	fp,sp,4
 2003a30:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2003a34:	e13fff17 	ldw	r4,-4(fp)
 2003a38:	20038900 	call	2003890 <epcs_read_status_register>
 2003a3c:	10803fcc 	andi	r2,r2,255
 2003a40:	1080004c 	andi	r2,r2,1
}
 2003a44:	e037883a 	mov	sp,fp
 2003a48:	dfc00117 	ldw	ra,4(sp)
 2003a4c:	df000017 	ldw	fp,0(sp)
 2003a50:	dec00204 	addi	sp,sp,8
 2003a54:	f800283a 	ret

02003a58 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2003a58:	defff404 	addi	sp,sp,-48
 2003a5c:	dfc00b15 	stw	ra,44(sp)
 2003a60:	df000a15 	stw	fp,40(sp)
 2003a64:	df000a04 	addi	fp,sp,40
 2003a68:	e13ffc15 	stw	r4,-16(fp)
 2003a6c:	e17ffd15 	stw	r5,-12(fp)
 2003a70:	e1bffe15 	stw	r6,-8(fp)
 2003a74:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2003a78:	008000c4 	movi	r2,3
 2003a7c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2003a80:	e0800217 	ldw	r2,8(fp)
 2003a84:	1005003a 	cmpeq	r2,r2,zero
 2003a88:	10001c1e 	bne	r2,zero,2003afc <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2003a8c:	e0bffd17 	ldw	r2,-12(fp)
 2003a90:	1005d63a 	srai	r2,r2,24
 2003a94:	1007883a 	mov	r3,r2
 2003a98:	00bfffc4 	movi	r2,-1
 2003a9c:	1884703a 	and	r2,r3,r2
 2003aa0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2003aa4:	e0bffd17 	ldw	r2,-12(fp)
 2003aa8:	1005d43a 	srai	r2,r2,16
 2003aac:	1007883a 	mov	r3,r2
 2003ab0:	00bfffc4 	movi	r2,-1
 2003ab4:	1884703a 	and	r2,r3,r2
 2003ab8:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2003abc:	e0bffd17 	ldw	r2,-12(fp)
 2003ac0:	1005d23a 	srai	r2,r2,8
 2003ac4:	1007883a 	mov	r3,r2
 2003ac8:	00bfffc4 	movi	r2,-1
 2003acc:	1884703a 	and	r2,r3,r2
 2003ad0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2003ad4:	e0bffd17 	ldw	r2,-12(fp)
 2003ad8:	1007883a 	mov	r3,r2
 2003adc:	00bfffc4 	movi	r2,-1
 2003ae0:	1884703a 	and	r2,r3,r2
 2003ae4:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2003ae8:	00800144 	movi	r2,5
 2003aec:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2003af0:	e13ffc17 	ldw	r4,-16(fp)
 2003af4:	2003eb40 	call	2003eb4 <epcs_enter_4_bytes_mode>
 2003af8:	00001306 	br	2003b48 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2003afc:	e0bffd17 	ldw	r2,-12(fp)
 2003b00:	1005d43a 	srai	r2,r2,16
 2003b04:	1007883a 	mov	r3,r2
 2003b08:	00bfffc4 	movi	r2,-1
 2003b0c:	1884703a 	and	r2,r3,r2
 2003b10:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2003b14:	e0bffd17 	ldw	r2,-12(fp)
 2003b18:	1005d23a 	srai	r2,r2,8
 2003b1c:	1007883a 	mov	r3,r2
 2003b20:	00bfffc4 	movi	r2,-1
 2003b24:	1884703a 	and	r2,r3,r2
 2003b28:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2003b2c:	e0bffd17 	ldw	r2,-12(fp)
 2003b30:	1007883a 	mov	r3,r2
 2003b34:	00bfffc4 	movi	r2,-1
 2003b38:	1884703a 	and	r2,r3,r2
 2003b3c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2003b40:	00800104 	movi	r2,4
 2003b44:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2003b48:	e13ffc17 	ldw	r4,-16(fp)
 2003b4c:	20039e80 	call	20039e8 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2003b50:	e0bfff17 	ldw	r2,-4(fp)
 2003b54:	e1fffa04 	addi	r7,fp,-24
 2003b58:	d8800015 	stw	r2,0(sp)
 2003b5c:	e0bffe17 	ldw	r2,-8(fp)
 2003b60:	d8800115 	stw	r2,4(sp)
 2003b64:	d8000215 	stw	zero,8(sp)
 2003b68:	e13ffc17 	ldw	r4,-16(fp)
 2003b6c:	000b883a 	mov	r5,zero
 2003b70:	e1bff917 	ldw	r6,-28(fp)
 2003b74:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2003b78:	e0800217 	ldw	r2,8(fp)
 2003b7c:	1005003a 	cmpeq	r2,r2,zero
 2003b80:	1000021e 	bne	r2,zero,2003b8c <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 2003b84:	e13ffc17 	ldw	r4,-16(fp)
 2003b88:	2003f0c0 	call	2003f0c <epcs_exit_4_bytes_mode>
  }

  return length;
 2003b8c:	e0bfff17 	ldw	r2,-4(fp)
}
 2003b90:	e037883a 	mov	sp,fp
 2003b94:	dfc00117 	ldw	ra,4(sp)
 2003b98:	df000017 	ldw	fp,0(sp)
 2003b9c:	dec00204 	addi	sp,sp,8
 2003ba0:	f800283a 	ret

02003ba4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2003ba4:	defff904 	addi	sp,sp,-28
 2003ba8:	dfc00615 	stw	ra,24(sp)
 2003bac:	df000515 	stw	fp,20(sp)
 2003bb0:	df000504 	addi	fp,sp,20
 2003bb4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2003bb8:	00800184 	movi	r2,6
 2003bbc:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2003bc0:	d8000015 	stw	zero,0(sp)
 2003bc4:	d8000115 	stw	zero,4(sp)
 2003bc8:	d8000215 	stw	zero,8(sp)
 2003bcc:	e13fff17 	ldw	r4,-4(fp)
 2003bd0:	000b883a 	mov	r5,zero
 2003bd4:	01800044 	movi	r6,1
 2003bd8:	e1fffe04 	addi	r7,fp,-8
 2003bdc:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2003be0:	e037883a 	mov	sp,fp
 2003be4:	dfc00117 	ldw	ra,4(sp)
 2003be8:	df000017 	ldw	fp,0(sp)
 2003bec:	dec00204 	addi	sp,sp,8
 2003bf0:	f800283a 	ret

02003bf4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2003bf4:	defff804 	addi	sp,sp,-32
 2003bf8:	dfc00715 	stw	ra,28(sp)
 2003bfc:	df000615 	stw	fp,24(sp)
 2003c00:	df000604 	addi	fp,sp,24
 2003c04:	e13ffe15 	stw	r4,-8(fp)
 2003c08:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2003c0c:	00800044 	movi	r2,1
 2003c10:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2003c14:	e0bfff03 	ldbu	r2,-4(fp)
 2003c18:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2003c1c:	d8000015 	stw	zero,0(sp)
 2003c20:	d8000115 	stw	zero,4(sp)
 2003c24:	d8000215 	stw	zero,8(sp)
 2003c28:	e13ffe17 	ldw	r4,-8(fp)
 2003c2c:	000b883a 	mov	r5,zero
 2003c30:	01800084 	movi	r6,2
 2003c34:	e1fffd04 	addi	r7,fp,-12
 2003c38:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2003c3c:	e13ffe17 	ldw	r4,-8(fp)
 2003c40:	20039e80 	call	20039e8 <epcs_await_wip_released>
}
 2003c44:	e037883a 	mov	sp,fp
 2003c48:	dfc00117 	ldw	ra,4(sp)
 2003c4c:	df000017 	ldw	fp,0(sp)
 2003c50:	dec00204 	addi	sp,sp,8
 2003c54:	f800283a 	ret

02003c58 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2003c58:	defff404 	addi	sp,sp,-48
 2003c5c:	dfc00b15 	stw	ra,44(sp)
 2003c60:	df000a15 	stw	fp,40(sp)
 2003c64:	df000a04 	addi	fp,sp,40
 2003c68:	e13ffc15 	stw	r4,-16(fp)
 2003c6c:	e17ffd15 	stw	r5,-12(fp)
 2003c70:	e1bffe15 	stw	r6,-8(fp)
 2003c74:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2003c78:	00800084 	movi	r2,2
 2003c7c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2003c80:	e0800217 	ldw	r2,8(fp)
 2003c84:	1005003a 	cmpeq	r2,r2,zero
 2003c88:	10001c1e 	bne	r2,zero,2003cfc <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2003c8c:	e0bffd17 	ldw	r2,-12(fp)
 2003c90:	1005d63a 	srai	r2,r2,24
 2003c94:	1007883a 	mov	r3,r2
 2003c98:	00bfffc4 	movi	r2,-1
 2003c9c:	1884703a 	and	r2,r3,r2
 2003ca0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2003ca4:	e0bffd17 	ldw	r2,-12(fp)
 2003ca8:	1005d43a 	srai	r2,r2,16
 2003cac:	1007883a 	mov	r3,r2
 2003cb0:	00bfffc4 	movi	r2,-1
 2003cb4:	1884703a 	and	r2,r3,r2
 2003cb8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2003cbc:	e0bffd17 	ldw	r2,-12(fp)
 2003cc0:	1005d23a 	srai	r2,r2,8
 2003cc4:	1007883a 	mov	r3,r2
 2003cc8:	00bfffc4 	movi	r2,-1
 2003ccc:	1884703a 	and	r2,r3,r2
 2003cd0:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2003cd4:	e0bffd17 	ldw	r2,-12(fp)
 2003cd8:	1007883a 	mov	r3,r2
 2003cdc:	00bfffc4 	movi	r2,-1
 2003ce0:	1884703a 	and	r2,r3,r2
 2003ce4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2003ce8:	00800144 	movi	r2,5
 2003cec:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2003cf0:	e13ffc17 	ldw	r4,-16(fp)
 2003cf4:	2003eb40 	call	2003eb4 <epcs_enter_4_bytes_mode>
 2003cf8:	00001306 	br	2003d48 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2003cfc:	e0bffd17 	ldw	r2,-12(fp)
 2003d00:	1005d43a 	srai	r2,r2,16
 2003d04:	1007883a 	mov	r3,r2
 2003d08:	00bfffc4 	movi	r2,-1
 2003d0c:	1884703a 	and	r2,r3,r2
 2003d10:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2003d14:	e0bffd17 	ldw	r2,-12(fp)
 2003d18:	1005d23a 	srai	r2,r2,8
 2003d1c:	1007883a 	mov	r3,r2
 2003d20:	00bfffc4 	movi	r2,-1
 2003d24:	1884703a 	and	r2,r3,r2
 2003d28:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2003d2c:	e0bffd17 	ldw	r2,-12(fp)
 2003d30:	1007883a 	mov	r3,r2
 2003d34:	00bfffc4 	movi	r2,-1
 2003d38:	1884703a 	and	r2,r3,r2
 2003d3c:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2003d40:	00800104 	movi	r2,4
 2003d44:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2003d48:	e13ffc17 	ldw	r4,-16(fp)
 2003d4c:	2003ba40 	call	2003ba4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2003d50:	e1fffa04 	addi	r7,fp,-24
 2003d54:	d8000015 	stw	zero,0(sp)
 2003d58:	d8000115 	stw	zero,4(sp)
 2003d5c:	00800044 	movi	r2,1
 2003d60:	d8800215 	stw	r2,8(sp)
 2003d64:	e13ffc17 	ldw	r4,-16(fp)
 2003d68:	000b883a 	mov	r5,zero
 2003d6c:	e1bff917 	ldw	r6,-28(fp)
 2003d70:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2003d74:	e1bfff17 	ldw	r6,-4(fp)
 2003d78:	d8000015 	stw	zero,0(sp)
 2003d7c:	d8000115 	stw	zero,4(sp)
 2003d80:	d8000215 	stw	zero,8(sp)
 2003d84:	e13ffc17 	ldw	r4,-16(fp)
 2003d88:	000b883a 	mov	r5,zero
 2003d8c:	e1fffe17 	ldw	r7,-8(fp)
 2003d90:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2003d94:	e13ffc17 	ldw	r4,-16(fp)
 2003d98:	20039e80 	call	20039e8 <epcs_await_wip_released>

  if(four_bytes_mode)
 2003d9c:	e0800217 	ldw	r2,8(fp)
 2003da0:	1005003a 	cmpeq	r2,r2,zero
 2003da4:	1000021e 	bne	r2,zero,2003db0 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 2003da8:	e13ffc17 	ldw	r4,-16(fp)
 2003dac:	2003f0c0 	call	2003f0c <epcs_exit_4_bytes_mode>
  }

  return length;
 2003db0:	e0bfff17 	ldw	r2,-4(fp)
}
 2003db4:	e037883a 	mov	sp,fp
 2003db8:	dfc00117 	ldw	ra,4(sp)
 2003dbc:	df000017 	ldw	fp,0(sp)
 2003dc0:	dec00204 	addi	sp,sp,8
 2003dc4:	f800283a 	ret

02003dc8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2003dc8:	defff804 	addi	sp,sp,-32
 2003dcc:	dfc00715 	stw	ra,28(sp)
 2003dd0:	df000615 	stw	fp,24(sp)
 2003dd4:	df000604 	addi	fp,sp,24
 2003dd8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2003ddc:	00bfeac4 	movi	r2,-85
 2003de0:	e0bffd05 	stb	r2,-12(fp)
 2003de4:	e03ffd45 	stb	zero,-11(fp)
 2003de8:	e03ffd85 	stb	zero,-10(fp)
 2003dec:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2003df0:	00800044 	movi	r2,1
 2003df4:	d8800015 	stw	r2,0(sp)
 2003df8:	e0bffe04 	addi	r2,fp,-8
 2003dfc:	d8800115 	stw	r2,4(sp)
 2003e00:	d8000215 	stw	zero,8(sp)
 2003e04:	e13fff17 	ldw	r4,-4(fp)
 2003e08:	000b883a 	mov	r5,zero
 2003e0c:	01800104 	movi	r6,4
 2003e10:	e1fffd04 	addi	r7,fp,-12
 2003e14:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2003e18:	e0bffe03 	ldbu	r2,-8(fp)
 2003e1c:	10803fcc 	andi	r2,r2,255
}
 2003e20:	e037883a 	mov	sp,fp
 2003e24:	dfc00117 	ldw	ra,4(sp)
 2003e28:	df000017 	ldw	fp,0(sp)
 2003e2c:	dec00204 	addi	sp,sp,8
 2003e30:	f800283a 	ret

02003e34 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2003e34:	defff904 	addi	sp,sp,-28
 2003e38:	dfc00615 	stw	ra,24(sp)
 2003e3c:	df000515 	stw	fp,20(sp)
 2003e40:	df000504 	addi	fp,sp,20
 2003e44:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2003e48:	00bfe7c4 	movi	r2,-97
 2003e4c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2003e50:	008000c4 	movi	r2,3
 2003e54:	d8800015 	stw	r2,0(sp)
 2003e58:	e0bffe44 	addi	r2,fp,-7
 2003e5c:	d8800115 	stw	r2,4(sp)
 2003e60:	d8000215 	stw	zero,8(sp)
 2003e64:	e13fff17 	ldw	r4,-4(fp)
 2003e68:	000b883a 	mov	r5,zero
 2003e6c:	01800044 	movi	r6,1
 2003e70:	e1fffe04 	addi	r7,fp,-8
 2003e74:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2003e78:	e0bffe43 	ldbu	r2,-7(fp)
 2003e7c:	10803fcc 	andi	r2,r2,255
 2003e80:	1006943a 	slli	r3,r2,16
 2003e84:	e0bffe83 	ldbu	r2,-6(fp)
 2003e88:	10803fcc 	andi	r2,r2,255
 2003e8c:	1004923a 	slli	r2,r2,8
 2003e90:	1886b03a 	or	r3,r3,r2
 2003e94:	e0bffec3 	ldbu	r2,-5(fp)
 2003e98:	10803fcc 	andi	r2,r2,255
 2003e9c:	1884b03a 	or	r2,r3,r2
}
 2003ea0:	e037883a 	mov	sp,fp
 2003ea4:	dfc00117 	ldw	ra,4(sp)
 2003ea8:	df000017 	ldw	fp,0(sp)
 2003eac:	dec00204 	addi	sp,sp,8
 2003eb0:	f800283a 	ret

02003eb4 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2003eb4:	defff904 	addi	sp,sp,-28
 2003eb8:	dfc00615 	stw	ra,24(sp)
 2003ebc:	df000515 	stw	fp,20(sp)
 2003ec0:	df000504 	addi	fp,sp,20
 2003ec4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2003ec8:	00bfedc4 	movi	r2,-73
 2003ecc:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2003ed0:	e13fff17 	ldw	r4,-4(fp)
 2003ed4:	2003ba40 	call	2003ba4 <epcs_write_enable>

  alt_avalon_spi_command(
 2003ed8:	d8000015 	stw	zero,0(sp)
 2003edc:	d8000115 	stw	zero,4(sp)
 2003ee0:	d8000215 	stw	zero,8(sp)
 2003ee4:	e13fff17 	ldw	r4,-4(fp)
 2003ee8:	000b883a 	mov	r5,zero
 2003eec:	01800044 	movi	r6,1
 2003ef0:	e1fffe04 	addi	r7,fp,-8
 2003ef4:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2003ef8:	e037883a 	mov	sp,fp
 2003efc:	dfc00117 	ldw	ra,4(sp)
 2003f00:	df000017 	ldw	fp,0(sp)
 2003f04:	dec00204 	addi	sp,sp,8
 2003f08:	f800283a 	ret

02003f0c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2003f0c:	defff904 	addi	sp,sp,-28
 2003f10:	dfc00615 	stw	ra,24(sp)
 2003f14:	df000515 	stw	fp,20(sp)
 2003f18:	df000504 	addi	fp,sp,20
 2003f1c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2003f20:	00bffa44 	movi	r2,-23
 2003f24:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2003f28:	e13fff17 	ldw	r4,-4(fp)
 2003f2c:	2003ba40 	call	2003ba4 <epcs_write_enable>

  alt_avalon_spi_command(
 2003f30:	d8000015 	stw	zero,0(sp)
 2003f34:	d8000115 	stw	zero,4(sp)
 2003f38:	d8000215 	stw	zero,8(sp)
 2003f3c:	e13fff17 	ldw	r4,-4(fp)
 2003f40:	000b883a 	mov	r5,zero
 2003f44:	01800044 	movi	r6,1
 2003f48:	e1fffe04 	addi	r7,fp,-8
 2003f4c:	2004c5c0 	call	2004c5c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2003f50:	e037883a 	mov	sp,fp
 2003f54:	dfc00117 	ldw	ra,4(sp)
 2003f58:	df000017 	ldw	fp,0(sp)
 2003f5c:	dec00204 	addi	sp,sp,8
 2003f60:	f800283a 	ret

02003f64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2003f64:	defff404 	addi	sp,sp,-48
 2003f68:	df000b15 	stw	fp,44(sp)
 2003f6c:	df000b04 	addi	fp,sp,44
 2003f70:	e13ffb15 	stw	r4,-20(fp)
 2003f74:	e17ffc15 	stw	r5,-16(fp)
 2003f78:	e1bffd15 	stw	r6,-12(fp)
 2003f7c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2003f80:	e03ff915 	stw	zero,-28(fp)
 2003f84:	00808034 	movhi	r2,512
 2003f88:	109c1b04 	addi	r2,r2,28780
 2003f8c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2003f90:	1005003a 	cmpeq	r2,r2,zero
 2003f94:	1000411e 	bne	r2,zero,200409c <alt_alarm_start+0x138>
  {
    if (alarm)
 2003f98:	e0bffb17 	ldw	r2,-20(fp)
 2003f9c:	1005003a 	cmpeq	r2,r2,zero
 2003fa0:	10003b1e 	bne	r2,zero,2004090 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2003fa4:	e0fffb17 	ldw	r3,-20(fp)
 2003fa8:	e0bffd17 	ldw	r2,-12(fp)
 2003fac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2003fb0:	e0fffb17 	ldw	r3,-20(fp)
 2003fb4:	e0bffe17 	ldw	r2,-8(fp)
 2003fb8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003fbc:	0005303a 	rdctl	r2,status
 2003fc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003fc4:	e0fff817 	ldw	r3,-32(fp)
 2003fc8:	00bfff84 	movi	r2,-2
 2003fcc:	1884703a 	and	r2,r3,r2
 2003fd0:	1001703a 	wrctl	status,r2
  
  return context;
 2003fd4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2003fd8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2003fdc:	00808034 	movhi	r2,512
 2003fe0:	109c1c04 	addi	r2,r2,28784
 2003fe4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2003fe8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2003fec:	e0fffc17 	ldw	r3,-16(fp)
 2003ff0:	e0bff917 	ldw	r2,-28(fp)
 2003ff4:	1885883a 	add	r2,r3,r2
 2003ff8:	10c00044 	addi	r3,r2,1
 2003ffc:	e0bffb17 	ldw	r2,-20(fp)
 2004000:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2004004:	e0bffb17 	ldw	r2,-20(fp)
 2004008:	10c00217 	ldw	r3,8(r2)
 200400c:	e0bff917 	ldw	r2,-28(fp)
 2004010:	1880042e 	bgeu	r3,r2,2004024 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2004014:	e0fffb17 	ldw	r3,-20(fp)
 2004018:	00800044 	movi	r2,1
 200401c:	18800405 	stb	r2,16(r3)
 2004020:	00000206 	br	200402c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2004024:	e0bffb17 	ldw	r2,-20(fp)
 2004028:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200402c:	e0fffb17 	ldw	r3,-20(fp)
 2004030:	00808034 	movhi	r2,512
 2004034:	109c1304 	addi	r2,r2,28748
 2004038:	e0bff615 	stw	r2,-40(fp)
 200403c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2004040:	e0fff717 	ldw	r3,-36(fp)
 2004044:	e0bff617 	ldw	r2,-40(fp)
 2004048:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200404c:	e0bff617 	ldw	r2,-40(fp)
 2004050:	10c00017 	ldw	r3,0(r2)
 2004054:	e0bff717 	ldw	r2,-36(fp)
 2004058:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200405c:	e0bff617 	ldw	r2,-40(fp)
 2004060:	10c00017 	ldw	r3,0(r2)
 2004064:	e0bff717 	ldw	r2,-36(fp)
 2004068:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200406c:	e0fff617 	ldw	r3,-40(fp)
 2004070:	e0bff717 	ldw	r2,-36(fp)
 2004074:	18800015 	stw	r2,0(r3)
 2004078:	e0bffa17 	ldw	r2,-24(fp)
 200407c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004080:	e0bff517 	ldw	r2,-44(fp)
 2004084:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2004088:	e03fff15 	stw	zero,-4(fp)
 200408c:	00000506 	br	20040a4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 2004090:	00bffa84 	movi	r2,-22
 2004094:	e0bfff15 	stw	r2,-4(fp)
 2004098:	00000206 	br	20040a4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 200409c:	00bfde84 	movi	r2,-134
 20040a0:	e0bfff15 	stw	r2,-4(fp)
 20040a4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 20040a8:	e037883a 	mov	sp,fp
 20040ac:	df000017 	ldw	fp,0(sp)
 20040b0:	dec00104 	addi	sp,sp,4
 20040b4:	f800283a 	ret

020040b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 20040b8:	defffa04 	addi	sp,sp,-24
 20040bc:	dfc00515 	stw	ra,20(sp)
 20040c0:	df000415 	stw	fp,16(sp)
 20040c4:	df000404 	addi	fp,sp,16
 20040c8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 20040cc:	008000c4 	movi	r2,3
 20040d0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 20040d4:	e0fffc17 	ldw	r3,-16(fp)
 20040d8:	008003f4 	movhi	r2,15
 20040dc:	10909004 	addi	r2,r2,16960
 20040e0:	188b383a 	mul	r5,r3,r2
 20040e4:	01017db4 	movhi	r4,1526
 20040e8:	21384004 	addi	r4,r4,-7936
 20040ec:	2000f440 	call	2000f44 <__udivsi3>
 20040f0:	100b883a 	mov	r5,r2
 20040f4:	01200034 	movhi	r4,32768
 20040f8:	213fffc4 	addi	r4,r4,-1
 20040fc:	2000f440 	call	2000f44 <__udivsi3>
 2004100:	100b883a 	mov	r5,r2
 2004104:	e13fff17 	ldw	r4,-4(fp)
 2004108:	2000f440 	call	2000f44 <__udivsi3>
 200410c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2004110:	e0bffd17 	ldw	r2,-12(fp)
 2004114:	1005003a 	cmpeq	r2,r2,zero
 2004118:	1000281e 	bne	r2,zero,20041bc <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 200411c:	e03ffe15 	stw	zero,-8(fp)
 2004120:	00001606 	br	200417c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2004124:	00a00034 	movhi	r2,32768
 2004128:	10bfffc4 	addi	r2,r2,-1
 200412c:	10bfffc4 	addi	r2,r2,-1
 2004130:	103ffe1e 	bne	r2,zero,200412c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2004134:	e0fffc17 	ldw	r3,-16(fp)
 2004138:	008003f4 	movhi	r2,15
 200413c:	10909004 	addi	r2,r2,16960
 2004140:	188b383a 	mul	r5,r3,r2
 2004144:	01017db4 	movhi	r4,1526
 2004148:	21384004 	addi	r4,r4,-7936
 200414c:	2000f440 	call	2000f44 <__udivsi3>
 2004150:	100b883a 	mov	r5,r2
 2004154:	01200034 	movhi	r4,32768
 2004158:	213fffc4 	addi	r4,r4,-1
 200415c:	2000f440 	call	2000f44 <__udivsi3>
 2004160:	1007883a 	mov	r3,r2
 2004164:	e0bfff17 	ldw	r2,-4(fp)
 2004168:	10c5c83a 	sub	r2,r2,r3
 200416c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2004170:	e0bffe17 	ldw	r2,-8(fp)
 2004174:	10800044 	addi	r2,r2,1
 2004178:	e0bffe15 	stw	r2,-8(fp)
 200417c:	e0fffe17 	ldw	r3,-8(fp)
 2004180:	e0bffd17 	ldw	r2,-12(fp)
 2004184:	18bfe716 	blt	r3,r2,2004124 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2004188:	e0fffc17 	ldw	r3,-16(fp)
 200418c:	008003f4 	movhi	r2,15
 2004190:	10909004 	addi	r2,r2,16960
 2004194:	188b383a 	mul	r5,r3,r2
 2004198:	01017db4 	movhi	r4,1526
 200419c:	21384004 	addi	r4,r4,-7936
 20041a0:	2000f440 	call	2000f44 <__udivsi3>
 20041a4:	1007883a 	mov	r3,r2
 20041a8:	e0bfff17 	ldw	r2,-4(fp)
 20041ac:	1885383a 	mul	r2,r3,r2
 20041b0:	10bfffc4 	addi	r2,r2,-1
 20041b4:	103ffe1e 	bne	r2,zero,20041b0 <alt_busy_sleep+0xf8>
 20041b8:	00000c06 	br	20041ec <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 20041bc:	e0fffc17 	ldw	r3,-16(fp)
 20041c0:	008003f4 	movhi	r2,15
 20041c4:	10909004 	addi	r2,r2,16960
 20041c8:	188b383a 	mul	r5,r3,r2
 20041cc:	01017db4 	movhi	r4,1526
 20041d0:	21384004 	addi	r4,r4,-7936
 20041d4:	2000f440 	call	2000f44 <__udivsi3>
 20041d8:	1007883a 	mov	r3,r2
 20041dc:	e0bfff17 	ldw	r2,-4(fp)
 20041e0:	1885383a 	mul	r2,r3,r2
 20041e4:	10bfffc4 	addi	r2,r2,-1
 20041e8:	00bffe16 	blt	zero,r2,20041e4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 20041ec:	0005883a 	mov	r2,zero
}
 20041f0:	e037883a 	mov	sp,fp
 20041f4:	dfc00117 	ldw	ra,4(sp)
 20041f8:	df000017 	ldw	fp,0(sp)
 20041fc:	dec00204 	addi	sp,sp,8
 2004200:	f800283a 	ret

02004204 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2004204:	defff804 	addi	sp,sp,-32
 2004208:	dfc00715 	stw	ra,28(sp)
 200420c:	df000615 	stw	fp,24(sp)
 2004210:	df000604 	addi	fp,sp,24
 2004214:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2004218:	e0bffc17 	ldw	r2,-16(fp)
 200421c:	1004803a 	cmplt	r2,r2,zero
 2004220:	1000081e 	bne	r2,zero,2004244 <close+0x40>
 2004224:	e0bffc17 	ldw	r2,-16(fp)
 2004228:	10800324 	muli	r2,r2,12
 200422c:	1007883a 	mov	r3,r2
 2004230:	00808034 	movhi	r2,512
 2004234:	109aaa04 	addi	r2,r2,27304
 2004238:	1887883a 	add	r3,r3,r2
 200423c:	e0ffff15 	stw	r3,-4(fp)
 2004240:	00000106 	br	2004248 <close+0x44>
 2004244:	e03fff15 	stw	zero,-4(fp)
 2004248:	e0bfff17 	ldw	r2,-4(fp)
 200424c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2004250:	e0bffb17 	ldw	r2,-20(fp)
 2004254:	1005003a 	cmpeq	r2,r2,zero
 2004258:	10001d1e 	bne	r2,zero,20042d0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200425c:	e0bffb17 	ldw	r2,-20(fp)
 2004260:	10800017 	ldw	r2,0(r2)
 2004264:	10800417 	ldw	r2,16(r2)
 2004268:	1005003a 	cmpeq	r2,r2,zero
 200426c:	1000071e 	bne	r2,zero,200428c <close+0x88>
 2004270:	e0bffb17 	ldw	r2,-20(fp)
 2004274:	10800017 	ldw	r2,0(r2)
 2004278:	10800417 	ldw	r2,16(r2)
 200427c:	e13ffb17 	ldw	r4,-20(fp)
 2004280:	103ee83a 	callr	r2
 2004284:	e0bffe15 	stw	r2,-8(fp)
 2004288:	00000106 	br	2004290 <close+0x8c>
 200428c:	e03ffe15 	stw	zero,-8(fp)
 2004290:	e0bffe17 	ldw	r2,-8(fp)
 2004294:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2004298:	e13ffc17 	ldw	r4,-16(fp)
 200429c:	2004a380 	call	2004a38 <alt_release_fd>
    if (rval < 0)
 20042a0:	e0bffa17 	ldw	r2,-24(fp)
 20042a4:	1004403a 	cmpge	r2,r2,zero
 20042a8:	1000071e 	bne	r2,zero,20042c8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 20042ac:	20043000 	call	2004300 <alt_get_errno>
 20042b0:	e0fffa17 	ldw	r3,-24(fp)
 20042b4:	00c7c83a 	sub	r3,zero,r3
 20042b8:	10c00015 	stw	r3,0(r2)
      return -1;
 20042bc:	00bfffc4 	movi	r2,-1
 20042c0:	e0bffd15 	stw	r2,-12(fp)
 20042c4:	00000806 	br	20042e8 <close+0xe4>
    }
    return 0;
 20042c8:	e03ffd15 	stw	zero,-12(fp)
 20042cc:	00000606 	br	20042e8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20042d0:	20043000 	call	2004300 <alt_get_errno>
 20042d4:	1007883a 	mov	r3,r2
 20042d8:	00801444 	movi	r2,81
 20042dc:	18800015 	stw	r2,0(r3)
    return -1;
 20042e0:	00bfffc4 	movi	r2,-1
 20042e4:	e0bffd15 	stw	r2,-12(fp)
 20042e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 20042ec:	e037883a 	mov	sp,fp
 20042f0:	dfc00117 	ldw	ra,4(sp)
 20042f4:	df000017 	ldw	fp,0(sp)
 20042f8:	dec00204 	addi	sp,sp,8
 20042fc:	f800283a 	ret

02004300 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004300:	defffd04 	addi	sp,sp,-12
 2004304:	dfc00215 	stw	ra,8(sp)
 2004308:	df000115 	stw	fp,4(sp)
 200430c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2004310:	00808034 	movhi	r2,512
 2004314:	109c1004 	addi	r2,r2,28736
 2004318:	10800017 	ldw	r2,0(r2)
 200431c:	1005003a 	cmpeq	r2,r2,zero
 2004320:	1000061e 	bne	r2,zero,200433c <alt_get_errno+0x3c>
 2004324:	00808034 	movhi	r2,512
 2004328:	109c1004 	addi	r2,r2,28736
 200432c:	10800017 	ldw	r2,0(r2)
 2004330:	103ee83a 	callr	r2
 2004334:	e0bfff15 	stw	r2,-4(fp)
 2004338:	00000306 	br	2004348 <alt_get_errno+0x48>
 200433c:	00808034 	movhi	r2,512
 2004340:	109c1d04 	addi	r2,r2,28788
 2004344:	e0bfff15 	stw	r2,-4(fp)
 2004348:	e0bfff17 	ldw	r2,-4(fp)
}
 200434c:	e037883a 	mov	sp,fp
 2004350:	dfc00117 	ldw	ra,4(sp)
 2004354:	df000017 	ldw	fp,0(sp)
 2004358:	dec00204 	addi	sp,sp,8
 200435c:	f800283a 	ret

02004360 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2004360:	defffc04 	addi	sp,sp,-16
 2004364:	df000315 	stw	fp,12(sp)
 2004368:	df000304 	addi	fp,sp,12
 200436c:	e13ffd15 	stw	r4,-12(fp)
 2004370:	e17ffe15 	stw	r5,-8(fp)
 2004374:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2004378:	e0bfff17 	ldw	r2,-4(fp)
}
 200437c:	e037883a 	mov	sp,fp
 2004380:	df000017 	ldw	fp,0(sp)
 2004384:	dec00104 	addi	sp,sp,4
 2004388:	f800283a 	ret

0200438c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200438c:	defff904 	addi	sp,sp,-28
 2004390:	dfc00615 	stw	ra,24(sp)
 2004394:	df000515 	stw	fp,20(sp)
 2004398:	df000504 	addi	fp,sp,20
 200439c:	e13ffd15 	stw	r4,-12(fp)
 20043a0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20043a4:	e0bffd17 	ldw	r2,-12(fp)
 20043a8:	1005003a 	cmpeq	r2,r2,zero
 20043ac:	1000041e 	bne	r2,zero,20043c0 <alt_dev_llist_insert+0x34>
 20043b0:	e0bffd17 	ldw	r2,-12(fp)
 20043b4:	10800217 	ldw	r2,8(r2)
 20043b8:	1004c03a 	cmpne	r2,r2,zero
 20043bc:	1000071e 	bne	r2,zero,20043dc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 20043c0:	20044400 	call	2004440 <alt_get_errno>
 20043c4:	1007883a 	mov	r3,r2
 20043c8:	00800584 	movi	r2,22
 20043cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20043d0:	00bffa84 	movi	r2,-22
 20043d4:	e0bfff15 	stw	r2,-4(fp)
 20043d8:	00001306 	br	2004428 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20043dc:	e0fffd17 	ldw	r3,-12(fp)
 20043e0:	e0bffe17 	ldw	r2,-8(fp)
 20043e4:	e0bffb15 	stw	r2,-20(fp)
 20043e8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20043ec:	e0fffc17 	ldw	r3,-16(fp)
 20043f0:	e0bffb17 	ldw	r2,-20(fp)
 20043f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 20043f8:	e0bffb17 	ldw	r2,-20(fp)
 20043fc:	10c00017 	ldw	r3,0(r2)
 2004400:	e0bffc17 	ldw	r2,-16(fp)
 2004404:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004408:	e0bffb17 	ldw	r2,-20(fp)
 200440c:	10c00017 	ldw	r3,0(r2)
 2004410:	e0bffc17 	ldw	r2,-16(fp)
 2004414:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2004418:	e0fffb17 	ldw	r3,-20(fp)
 200441c:	e0bffc17 	ldw	r2,-16(fp)
 2004420:	18800015 	stw	r2,0(r3)

  return 0;  
 2004424:	e03fff15 	stw	zero,-4(fp)
 2004428:	e0bfff17 	ldw	r2,-4(fp)
}
 200442c:	e037883a 	mov	sp,fp
 2004430:	dfc00117 	ldw	ra,4(sp)
 2004434:	df000017 	ldw	fp,0(sp)
 2004438:	dec00204 	addi	sp,sp,8
 200443c:	f800283a 	ret

02004440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004440:	defffd04 	addi	sp,sp,-12
 2004444:	dfc00215 	stw	ra,8(sp)
 2004448:	df000115 	stw	fp,4(sp)
 200444c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2004450:	00808034 	movhi	r2,512
 2004454:	109c1004 	addi	r2,r2,28736
 2004458:	10800017 	ldw	r2,0(r2)
 200445c:	1005003a 	cmpeq	r2,r2,zero
 2004460:	1000061e 	bne	r2,zero,200447c <alt_get_errno+0x3c>
 2004464:	00808034 	movhi	r2,512
 2004468:	109c1004 	addi	r2,r2,28736
 200446c:	10800017 	ldw	r2,0(r2)
 2004470:	103ee83a 	callr	r2
 2004474:	e0bfff15 	stw	r2,-4(fp)
 2004478:	00000306 	br	2004488 <alt_get_errno+0x48>
 200447c:	00808034 	movhi	r2,512
 2004480:	109c1d04 	addi	r2,r2,28788
 2004484:	e0bfff15 	stw	r2,-4(fp)
 2004488:	e0bfff17 	ldw	r2,-4(fp)
}
 200448c:	e037883a 	mov	sp,fp
 2004490:	dfc00117 	ldw	ra,4(sp)
 2004494:	df000017 	ldw	fp,0(sp)
 2004498:	dec00204 	addi	sp,sp,8
 200449c:	f800283a 	ret

020044a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20044a0:	defffd04 	addi	sp,sp,-12
 20044a4:	dfc00215 	stw	ra,8(sp)
 20044a8:	df000115 	stw	fp,4(sp)
 20044ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20044b0:	00bfff04 	movi	r2,-4
 20044b4:	00c08034 	movhi	r3,512
 20044b8:	18d58804 	addi	r3,r3,22048
 20044bc:	1885883a 	add	r2,r3,r2
 20044c0:	e0bfff15 	stw	r2,-4(fp)
 20044c4:	00000606 	br	20044e0 <_do_ctors+0x40>
        (*ctor) (); 
 20044c8:	e0bfff17 	ldw	r2,-4(fp)
 20044cc:	10800017 	ldw	r2,0(r2)
 20044d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20044d4:	e0bfff17 	ldw	r2,-4(fp)
 20044d8:	10bfff04 	addi	r2,r2,-4
 20044dc:	e0bfff15 	stw	r2,-4(fp)
 20044e0:	e0ffff17 	ldw	r3,-4(fp)
 20044e4:	00808034 	movhi	r2,512
 20044e8:	10958704 	addi	r2,r2,22044
 20044ec:	18bff62e 	bgeu	r3,r2,20044c8 <_do_ctors+0x28>
        (*ctor) (); 
}
 20044f0:	e037883a 	mov	sp,fp
 20044f4:	dfc00117 	ldw	ra,4(sp)
 20044f8:	df000017 	ldw	fp,0(sp)
 20044fc:	dec00204 	addi	sp,sp,8
 2004500:	f800283a 	ret

02004504 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2004504:	defffd04 	addi	sp,sp,-12
 2004508:	dfc00215 	stw	ra,8(sp)
 200450c:	df000115 	stw	fp,4(sp)
 2004510:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004514:	00bfff04 	movi	r2,-4
 2004518:	00c08034 	movhi	r3,512
 200451c:	18d58804 	addi	r3,r3,22048
 2004520:	1885883a 	add	r2,r3,r2
 2004524:	e0bfff15 	stw	r2,-4(fp)
 2004528:	00000606 	br	2004544 <_do_dtors+0x40>
        (*dtor) (); 
 200452c:	e0bfff17 	ldw	r2,-4(fp)
 2004530:	10800017 	ldw	r2,0(r2)
 2004534:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004538:	e0bfff17 	ldw	r2,-4(fp)
 200453c:	10bfff04 	addi	r2,r2,-4
 2004540:	e0bfff15 	stw	r2,-4(fp)
 2004544:	e0ffff17 	ldw	r3,-4(fp)
 2004548:	00808034 	movhi	r2,512
 200454c:	10958804 	addi	r2,r2,22048
 2004550:	18bff62e 	bgeu	r3,r2,200452c <_do_dtors+0x28>
        (*dtor) (); 
}
 2004554:	e037883a 	mov	sp,fp
 2004558:	dfc00117 	ldw	ra,4(sp)
 200455c:	df000017 	ldw	fp,0(sp)
 2004560:	dec00204 	addi	sp,sp,8
 2004564:	f800283a 	ret

02004568 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2004568:	defffb04 	addi	sp,sp,-20
 200456c:	dfc00415 	stw	ra,16(sp)
 2004570:	df000315 	stw	fp,12(sp)
 2004574:	df000304 	addi	fp,sp,12
 2004578:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 200457c:	e13ffe17 	ldw	r4,-8(fp)
 2004580:	d1600704 	addi	r5,gp,-32740
 2004584:	2004e940 	call	2004e94 <alt_find_dev>
 2004588:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 200458c:	e0bffd17 	ldw	r2,-12(fp)
 2004590:	1005003a 	cmpeq	r2,r2,zero
 2004594:	10000b1e 	bne	r2,zero,20045c4 <alt_flash_open_dev+0x5c>
 2004598:	e0bffd17 	ldw	r2,-12(fp)
 200459c:	10800317 	ldw	r2,12(r2)
 20045a0:	1005003a 	cmpeq	r2,r2,zero
 20045a4:	1000071e 	bne	r2,zero,20045c4 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 20045a8:	e0bffd17 	ldw	r2,-12(fp)
 20045ac:	10800317 	ldw	r2,12(r2)
 20045b0:	e13ffd17 	ldw	r4,-12(fp)
 20045b4:	e17ffe17 	ldw	r5,-8(fp)
 20045b8:	103ee83a 	callr	r2
 20045bc:	e0bfff15 	stw	r2,-4(fp)
 20045c0:	00000206 	br	20045cc <alt_flash_open_dev+0x64>
  }

  return dev;
 20045c4:	e0bffd17 	ldw	r2,-12(fp)
 20045c8:	e0bfff15 	stw	r2,-4(fp)
 20045cc:	e0bfff17 	ldw	r2,-4(fp)
}
 20045d0:	e037883a 	mov	sp,fp
 20045d4:	dfc00117 	ldw	ra,4(sp)
 20045d8:	df000017 	ldw	fp,0(sp)
 20045dc:	dec00204 	addi	sp,sp,8
 20045e0:	f800283a 	ret

020045e4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 20045e4:	defffd04 	addi	sp,sp,-12
 20045e8:	dfc00215 	stw	ra,8(sp)
 20045ec:	df000115 	stw	fp,4(sp)
 20045f0:	df000104 	addi	fp,sp,4
 20045f4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 20045f8:	e0bfff17 	ldw	r2,-4(fp)
 20045fc:	1005003a 	cmpeq	r2,r2,zero
 2004600:	1000081e 	bne	r2,zero,2004624 <alt_flash_close_dev+0x40>
 2004604:	e0bfff17 	ldw	r2,-4(fp)
 2004608:	10800417 	ldw	r2,16(r2)
 200460c:	1005003a 	cmpeq	r2,r2,zero
 2004610:	1000041e 	bne	r2,zero,2004624 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 2004614:	e0bfff17 	ldw	r2,-4(fp)
 2004618:	10800417 	ldw	r2,16(r2)
 200461c:	e13fff17 	ldw	r4,-4(fp)
 2004620:	103ee83a 	callr	r2
  }
  return;
}
 2004624:	e037883a 	mov	sp,fp
 2004628:	dfc00117 	ldw	ra,4(sp)
 200462c:	df000017 	ldw	fp,0(sp)
 2004630:	dec00204 	addi	sp,sp,8
 2004634:	f800283a 	ret

02004638 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2004638:	defff904 	addi	sp,sp,-28
 200463c:	dfc00615 	stw	ra,24(sp)
 2004640:	df000515 	stw	fp,20(sp)
 2004644:	df000504 	addi	fp,sp,20
 2004648:	e13ffc15 	stw	r4,-16(fp)
 200464c:	e17ffd15 	stw	r5,-12(fp)
 2004650:	e1bffe15 	stw	r6,-8(fp)
 2004654:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2004658:	e13ffd17 	ldw	r4,-12(fp)
 200465c:	e17ffe17 	ldw	r5,-8(fp)
 2004660:	e1bfff17 	ldw	r6,-4(fp)
 2004664:	20048500 	call	2004850 <open>
 2004668:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 200466c:	e0bffb17 	ldw	r2,-20(fp)
 2004670:	1004803a 	cmplt	r2,r2,zero
 2004674:	10001c1e 	bne	r2,zero,20046e8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 2004678:	e0bffb17 	ldw	r2,-20(fp)
 200467c:	00c08034 	movhi	r3,512
 2004680:	18daaa04 	addi	r3,r3,27304
 2004684:	10800324 	muli	r2,r2,12
 2004688:	10c5883a 	add	r2,r2,r3
 200468c:	10c00017 	ldw	r3,0(r2)
 2004690:	e0bffc17 	ldw	r2,-16(fp)
 2004694:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2004698:	e0bffb17 	ldw	r2,-20(fp)
 200469c:	00c08034 	movhi	r3,512
 20046a0:	18daaa04 	addi	r3,r3,27304
 20046a4:	10800324 	muli	r2,r2,12
 20046a8:	10c5883a 	add	r2,r2,r3
 20046ac:	10800104 	addi	r2,r2,4
 20046b0:	10c00017 	ldw	r3,0(r2)
 20046b4:	e0bffc17 	ldw	r2,-16(fp)
 20046b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20046bc:	e0bffb17 	ldw	r2,-20(fp)
 20046c0:	00c08034 	movhi	r3,512
 20046c4:	18daaa04 	addi	r3,r3,27304
 20046c8:	10800324 	muli	r2,r2,12
 20046cc:	10c5883a 	add	r2,r2,r3
 20046d0:	10800204 	addi	r2,r2,8
 20046d4:	10c00017 	ldw	r3,0(r2)
 20046d8:	e0bffc17 	ldw	r2,-16(fp)
 20046dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20046e0:	e13ffb17 	ldw	r4,-20(fp)
 20046e4:	2004a380 	call	2004a38 <alt_release_fd>
  }
} 
 20046e8:	e037883a 	mov	sp,fp
 20046ec:	dfc00117 	ldw	ra,4(sp)
 20046f0:	df000017 	ldw	fp,0(sp)
 20046f4:	dec00204 	addi	sp,sp,8
 20046f8:	f800283a 	ret

020046fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20046fc:	defffb04 	addi	sp,sp,-20
 2004700:	dfc00415 	stw	ra,16(sp)
 2004704:	df000315 	stw	fp,12(sp)
 2004708:	df000304 	addi	fp,sp,12
 200470c:	e13ffd15 	stw	r4,-12(fp)
 2004710:	e17ffe15 	stw	r5,-8(fp)
 2004714:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2004718:	01008034 	movhi	r4,512
 200471c:	211aad04 	addi	r4,r4,27316
 2004720:	e17ffd17 	ldw	r5,-12(fp)
 2004724:	01800044 	movi	r6,1
 2004728:	01c07fc4 	movi	r7,511
 200472c:	20046380 	call	2004638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2004730:	01008034 	movhi	r4,512
 2004734:	211aaa04 	addi	r4,r4,27304
 2004738:	e17ffe17 	ldw	r5,-8(fp)
 200473c:	000d883a 	mov	r6,zero
 2004740:	01c07fc4 	movi	r7,511
 2004744:	20046380 	call	2004638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2004748:	01008034 	movhi	r4,512
 200474c:	211ab004 	addi	r4,r4,27328
 2004750:	e17fff17 	ldw	r5,-4(fp)
 2004754:	01800044 	movi	r6,1
 2004758:	01c07fc4 	movi	r7,511
 200475c:	20046380 	call	2004638 <alt_open_fd>
}  
 2004760:	e037883a 	mov	sp,fp
 2004764:	dfc00117 	ldw	ra,4(sp)
 2004768:	df000017 	ldw	fp,0(sp)
 200476c:	dec00204 	addi	sp,sp,8
 2004770:	f800283a 	ret

02004774 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2004774:	defffc04 	addi	sp,sp,-16
 2004778:	df000315 	stw	fp,12(sp)
 200477c:	df000304 	addi	fp,sp,12
 2004780:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2004784:	e0bffe17 	ldw	r2,-8(fp)
 2004788:	10800217 	ldw	r2,8(r2)
 200478c:	10d00034 	orhi	r3,r2,16384
 2004790:	e0bffe17 	ldw	r2,-8(fp)
 2004794:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004798:	e03ffd15 	stw	zero,-12(fp)
 200479c:	00002006 	br	2004820 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20047a0:	e0bffd17 	ldw	r2,-12(fp)
 20047a4:	00c08034 	movhi	r3,512
 20047a8:	18daaa04 	addi	r3,r3,27304
 20047ac:	10800324 	muli	r2,r2,12
 20047b0:	10c5883a 	add	r2,r2,r3
 20047b4:	10c00017 	ldw	r3,0(r2)
 20047b8:	e0bffe17 	ldw	r2,-8(fp)
 20047bc:	10800017 	ldw	r2,0(r2)
 20047c0:	1880141e 	bne	r3,r2,2004814 <alt_file_locked+0xa0>
 20047c4:	e0bffd17 	ldw	r2,-12(fp)
 20047c8:	00c08034 	movhi	r3,512
 20047cc:	18daaa04 	addi	r3,r3,27304
 20047d0:	10800324 	muli	r2,r2,12
 20047d4:	10c5883a 	add	r2,r2,r3
 20047d8:	10800204 	addi	r2,r2,8
 20047dc:	10800017 	ldw	r2,0(r2)
 20047e0:	1004403a 	cmpge	r2,r2,zero
 20047e4:	10000b1e 	bne	r2,zero,2004814 <alt_file_locked+0xa0>
 20047e8:	e0bffd17 	ldw	r2,-12(fp)
 20047ec:	10800324 	muli	r2,r2,12
 20047f0:	1007883a 	mov	r3,r2
 20047f4:	00808034 	movhi	r2,512
 20047f8:	109aaa04 	addi	r2,r2,27304
 20047fc:	1887883a 	add	r3,r3,r2
 2004800:	e0bffe17 	ldw	r2,-8(fp)
 2004804:	18800326 	beq	r3,r2,2004814 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2004808:	00bffcc4 	movi	r2,-13
 200480c:	e0bfff15 	stw	r2,-4(fp)
 2004810:	00000a06 	br	200483c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004814:	e0bffd17 	ldw	r2,-12(fp)
 2004818:	10800044 	addi	r2,r2,1
 200481c:	e0bffd15 	stw	r2,-12(fp)
 2004820:	00808034 	movhi	r2,512
 2004824:	109c0f04 	addi	r2,r2,28732
 2004828:	10800017 	ldw	r2,0(r2)
 200482c:	1007883a 	mov	r3,r2
 2004830:	e0bffd17 	ldw	r2,-12(fp)
 2004834:	18bfda2e 	bgeu	r3,r2,20047a0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2004838:	e03fff15 	stw	zero,-4(fp)
 200483c:	e0bfff17 	ldw	r2,-4(fp)
}
 2004840:	e037883a 	mov	sp,fp
 2004844:	df000017 	ldw	fp,0(sp)
 2004848:	dec00104 	addi	sp,sp,4
 200484c:	f800283a 	ret

02004850 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2004850:	defff404 	addi	sp,sp,-48
 2004854:	dfc00b15 	stw	ra,44(sp)
 2004858:	df000a15 	stw	fp,40(sp)
 200485c:	df000a04 	addi	fp,sp,40
 2004860:	e13ffb15 	stw	r4,-20(fp)
 2004864:	e17ffc15 	stw	r5,-16(fp)
 2004868:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200486c:	00bfffc4 	movi	r2,-1
 2004870:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2004874:	00bffb44 	movi	r2,-19
 2004878:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 200487c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2004880:	e13ffb17 	ldw	r4,-20(fp)
 2004884:	01408034 	movhi	r5,512
 2004888:	295c0d04 	addi	r5,r5,28724
 200488c:	2004e940 	call	2004e94 <alt_find_dev>
 2004890:	e0bffa15 	stw	r2,-24(fp)
 2004894:	e0bffa17 	ldw	r2,-24(fp)
 2004898:	1004c03a 	cmpne	r2,r2,zero
 200489c:	1000051e 	bne	r2,zero,20048b4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 20048a0:	e13ffb17 	ldw	r4,-20(fp)
 20048a4:	2004f280 	call	2004f28 <alt_find_file>
 20048a8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 20048ac:	00800044 	movi	r2,1
 20048b0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 20048b4:	e0bffa17 	ldw	r2,-24(fp)
 20048b8:	1005003a 	cmpeq	r2,r2,zero
 20048bc:	1000301e 	bne	r2,zero,2004980 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 20048c0:	e13ffa17 	ldw	r4,-24(fp)
 20048c4:	20050480 	call	2005048 <alt_get_fd>
 20048c8:	e0bff815 	stw	r2,-32(fp)
 20048cc:	e0bff817 	ldw	r2,-32(fp)
 20048d0:	1004403a 	cmpge	r2,r2,zero
 20048d4:	1000031e 	bne	r2,zero,20048e4 <open+0x94>
    {
      status = index;
 20048d8:	e0bff817 	ldw	r2,-32(fp)
 20048dc:	e0bff715 	stw	r2,-36(fp)
 20048e0:	00002906 	br	2004988 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 20048e4:	e0bff817 	ldw	r2,-32(fp)
 20048e8:	10800324 	muli	r2,r2,12
 20048ec:	1007883a 	mov	r3,r2
 20048f0:	00808034 	movhi	r2,512
 20048f4:	109aaa04 	addi	r2,r2,27304
 20048f8:	1885883a 	add	r2,r3,r2
 20048fc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2004900:	e0fffc17 	ldw	r3,-16(fp)
 2004904:	00900034 	movhi	r2,16384
 2004908:	10bfffc4 	addi	r2,r2,-1
 200490c:	1886703a 	and	r3,r3,r2
 2004910:	e0bff917 	ldw	r2,-28(fp)
 2004914:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2004918:	e0bff617 	ldw	r2,-40(fp)
 200491c:	1004c03a 	cmpne	r2,r2,zero
 2004920:	1000061e 	bne	r2,zero,200493c <open+0xec>
 2004924:	e13ff917 	ldw	r4,-28(fp)
 2004928:	20047740 	call	2004774 <alt_file_locked>
 200492c:	e0bff715 	stw	r2,-36(fp)
 2004930:	e0bff717 	ldw	r2,-36(fp)
 2004934:	1004803a 	cmplt	r2,r2,zero
 2004938:	1000131e 	bne	r2,zero,2004988 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200493c:	e0bffa17 	ldw	r2,-24(fp)
 2004940:	10800317 	ldw	r2,12(r2)
 2004944:	1005003a 	cmpeq	r2,r2,zero
 2004948:	1000091e 	bne	r2,zero,2004970 <open+0x120>
 200494c:	e0bffa17 	ldw	r2,-24(fp)
 2004950:	10800317 	ldw	r2,12(r2)
 2004954:	e13ff917 	ldw	r4,-28(fp)
 2004958:	e17ffb17 	ldw	r5,-20(fp)
 200495c:	e1bffc17 	ldw	r6,-16(fp)
 2004960:	e1fffd17 	ldw	r7,-12(fp)
 2004964:	103ee83a 	callr	r2
 2004968:	e0bfff15 	stw	r2,-4(fp)
 200496c:	00000106 	br	2004974 <open+0x124>
 2004970:	e03fff15 	stw	zero,-4(fp)
 2004974:	e0bfff17 	ldw	r2,-4(fp)
 2004978:	e0bff715 	stw	r2,-36(fp)
 200497c:	00000206 	br	2004988 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2004980:	00bffb44 	movi	r2,-19
 2004984:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2004988:	e0bff717 	ldw	r2,-36(fp)
 200498c:	1004403a 	cmpge	r2,r2,zero
 2004990:	1000091e 	bne	r2,zero,20049b8 <open+0x168>
  {
    alt_release_fd (index);  
 2004994:	e13ff817 	ldw	r4,-32(fp)
 2004998:	2004a380 	call	2004a38 <alt_release_fd>
    ALT_ERRNO = -status;
 200499c:	20049d80 	call	20049d8 <alt_get_errno>
 20049a0:	e0fff717 	ldw	r3,-36(fp)
 20049a4:	00c7c83a 	sub	r3,zero,r3
 20049a8:	10c00015 	stw	r3,0(r2)
    return -1;
 20049ac:	00bfffc4 	movi	r2,-1
 20049b0:	e0bffe15 	stw	r2,-8(fp)
 20049b4:	00000206 	br	20049c0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 20049b8:	e0bff817 	ldw	r2,-32(fp)
 20049bc:	e0bffe15 	stw	r2,-8(fp)
 20049c0:	e0bffe17 	ldw	r2,-8(fp)
}
 20049c4:	e037883a 	mov	sp,fp
 20049c8:	dfc00117 	ldw	ra,4(sp)
 20049cc:	df000017 	ldw	fp,0(sp)
 20049d0:	dec00204 	addi	sp,sp,8
 20049d4:	f800283a 	ret

020049d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20049d8:	defffd04 	addi	sp,sp,-12
 20049dc:	dfc00215 	stw	ra,8(sp)
 20049e0:	df000115 	stw	fp,4(sp)
 20049e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20049e8:	00808034 	movhi	r2,512
 20049ec:	109c1004 	addi	r2,r2,28736
 20049f0:	10800017 	ldw	r2,0(r2)
 20049f4:	1005003a 	cmpeq	r2,r2,zero
 20049f8:	1000061e 	bne	r2,zero,2004a14 <alt_get_errno+0x3c>
 20049fc:	00808034 	movhi	r2,512
 2004a00:	109c1004 	addi	r2,r2,28736
 2004a04:	10800017 	ldw	r2,0(r2)
 2004a08:	103ee83a 	callr	r2
 2004a0c:	e0bfff15 	stw	r2,-4(fp)
 2004a10:	00000306 	br	2004a20 <alt_get_errno+0x48>
 2004a14:	00808034 	movhi	r2,512
 2004a18:	109c1d04 	addi	r2,r2,28788
 2004a1c:	e0bfff15 	stw	r2,-4(fp)
 2004a20:	e0bfff17 	ldw	r2,-4(fp)
}
 2004a24:	e037883a 	mov	sp,fp
 2004a28:	dfc00117 	ldw	ra,4(sp)
 2004a2c:	df000017 	ldw	fp,0(sp)
 2004a30:	dec00204 	addi	sp,sp,8
 2004a34:	f800283a 	ret

02004a38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2004a38:	defffe04 	addi	sp,sp,-8
 2004a3c:	df000115 	stw	fp,4(sp)
 2004a40:	df000104 	addi	fp,sp,4
 2004a44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2004a48:	e0bfff17 	ldw	r2,-4(fp)
 2004a4c:	108000d0 	cmplti	r2,r2,3
 2004a50:	10000d1e 	bne	r2,zero,2004a88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2004a54:	e0bfff17 	ldw	r2,-4(fp)
 2004a58:	00c08034 	movhi	r3,512
 2004a5c:	18daaa04 	addi	r3,r3,27304
 2004a60:	10800324 	muli	r2,r2,12
 2004a64:	10c5883a 	add	r2,r2,r3
 2004a68:	10800204 	addi	r2,r2,8
 2004a6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2004a70:	e0bfff17 	ldw	r2,-4(fp)
 2004a74:	00c08034 	movhi	r3,512
 2004a78:	18daaa04 	addi	r3,r3,27304
 2004a7c:	10800324 	muli	r2,r2,12
 2004a80:	10c5883a 	add	r2,r2,r3
 2004a84:	10000015 	stw	zero,0(r2)
  }
}
 2004a88:	e037883a 	mov	sp,fp
 2004a8c:	df000017 	ldw	fp,0(sp)
 2004a90:	dec00104 	addi	sp,sp,4
 2004a94:	f800283a 	ret

02004a98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2004a98:	defffa04 	addi	sp,sp,-24
 2004a9c:	df000515 	stw	fp,20(sp)
 2004aa0:	df000504 	addi	fp,sp,20
 2004aa4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004aa8:	0005303a 	rdctl	r2,status
 2004aac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004ab0:	e0fffd17 	ldw	r3,-12(fp)
 2004ab4:	00bfff84 	movi	r2,-2
 2004ab8:	1884703a 	and	r2,r3,r2
 2004abc:	1001703a 	wrctl	status,r2
  
  return context;
 2004ac0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2004ac4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2004ac8:	e0bfff17 	ldw	r2,-4(fp)
 2004acc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2004ad0:	e0bffc17 	ldw	r2,-16(fp)
 2004ad4:	10c00017 	ldw	r3,0(r2)
 2004ad8:	e0bffc17 	ldw	r2,-16(fp)
 2004adc:	10800117 	ldw	r2,4(r2)
 2004ae0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2004ae4:	e0bffc17 	ldw	r2,-16(fp)
 2004ae8:	10c00117 	ldw	r3,4(r2)
 2004aec:	e0bffc17 	ldw	r2,-16(fp)
 2004af0:	10800017 	ldw	r2,0(r2)
 2004af4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2004af8:	e0fffc17 	ldw	r3,-16(fp)
 2004afc:	e0bffc17 	ldw	r2,-16(fp)
 2004b00:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2004b04:	e0fffc17 	ldw	r3,-16(fp)
 2004b08:	e0bffc17 	ldw	r2,-16(fp)
 2004b0c:	18800015 	stw	r2,0(r3)
 2004b10:	e0bffe17 	ldw	r2,-8(fp)
 2004b14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004b18:	e0bffb17 	ldw	r2,-20(fp)
 2004b1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2004b20:	e037883a 	mov	sp,fp
 2004b24:	df000017 	ldw	fp,0(sp)
 2004b28:	dec00104 	addi	sp,sp,4
 2004b2c:	f800283a 	ret

02004b30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2004b30:	defffb04 	addi	sp,sp,-20
 2004b34:	dfc00415 	stw	ra,16(sp)
 2004b38:	df000315 	stw	fp,12(sp)
 2004b3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2004b40:	d0a00917 	ldw	r2,-32732(gp)
 2004b44:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2004b48:	d0a01217 	ldw	r2,-32696(gp)
 2004b4c:	10800044 	addi	r2,r2,1
 2004b50:	d0a01215 	stw	r2,-32696(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004b54:	00003106 	br	2004c1c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2004b58:	e0bffe17 	ldw	r2,-8(fp)
 2004b5c:	10800017 	ldw	r2,0(r2)
 2004b60:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2004b64:	e0bffe17 	ldw	r2,-8(fp)
 2004b68:	10800403 	ldbu	r2,16(r2)
 2004b6c:	10803fcc 	andi	r2,r2,255
 2004b70:	1005003a 	cmpeq	r2,r2,zero
 2004b74:	1000051e 	bne	r2,zero,2004b8c <alt_tick+0x5c>
 2004b78:	d0a01217 	ldw	r2,-32696(gp)
 2004b7c:	1004c03a 	cmpne	r2,r2,zero
 2004b80:	1000021e 	bne	r2,zero,2004b8c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2004b84:	e0bffe17 	ldw	r2,-8(fp)
 2004b88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2004b8c:	e0bffe17 	ldw	r2,-8(fp)
 2004b90:	10c00217 	ldw	r3,8(r2)
 2004b94:	d0a01217 	ldw	r2,-32696(gp)
 2004b98:	10c01e36 	bltu	r2,r3,2004c14 <alt_tick+0xe4>
 2004b9c:	e0bffe17 	ldw	r2,-8(fp)
 2004ba0:	10800403 	ldbu	r2,16(r2)
 2004ba4:	10803fcc 	andi	r2,r2,255
 2004ba8:	1004c03a 	cmpne	r2,r2,zero
 2004bac:	1000191e 	bne	r2,zero,2004c14 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2004bb0:	e0bffe17 	ldw	r2,-8(fp)
 2004bb4:	10c00317 	ldw	r3,12(r2)
 2004bb8:	e0bffe17 	ldw	r2,-8(fp)
 2004bbc:	11000517 	ldw	r4,20(r2)
 2004bc0:	183ee83a 	callr	r3
 2004bc4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2004bc8:	e0bffd17 	ldw	r2,-12(fp)
 2004bcc:	1004c03a 	cmpne	r2,r2,zero
 2004bd0:	1000031e 	bne	r2,zero,2004be0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2004bd4:	e13ffe17 	ldw	r4,-8(fp)
 2004bd8:	2004a980 	call	2004a98 <alt_alarm_stop>
 2004bdc:	00000d06 	br	2004c14 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2004be0:	e0bffe17 	ldw	r2,-8(fp)
 2004be4:	10c00217 	ldw	r3,8(r2)
 2004be8:	e0bffd17 	ldw	r2,-12(fp)
 2004bec:	1887883a 	add	r3,r3,r2
 2004bf0:	e0bffe17 	ldw	r2,-8(fp)
 2004bf4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2004bf8:	e0bffe17 	ldw	r2,-8(fp)
 2004bfc:	10c00217 	ldw	r3,8(r2)
 2004c00:	d0a01217 	ldw	r2,-32696(gp)
 2004c04:	1880032e 	bgeu	r3,r2,2004c14 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2004c08:	e0fffe17 	ldw	r3,-8(fp)
 2004c0c:	00800044 	movi	r2,1
 2004c10:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2004c14:	e0bfff17 	ldw	r2,-4(fp)
 2004c18:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004c1c:	d0e00904 	addi	r3,gp,-32732
 2004c20:	e0bffe17 	ldw	r2,-8(fp)
 2004c24:	10ffcc1e 	bne	r2,r3,2004b58 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2004c28:	e037883a 	mov	sp,fp
 2004c2c:	dfc00117 	ldw	ra,4(sp)
 2004c30:	df000017 	ldw	fp,0(sp)
 2004c34:	dec00204 	addi	sp,sp,8
 2004c38:	f800283a 	ret

02004c3c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2004c3c:	deffff04 	addi	sp,sp,-4
 2004c40:	df000015 	stw	fp,0(sp)
 2004c44:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2004c48:	000170fa 	wrctl	ienable,zero
}
 2004c4c:	e037883a 	mov	sp,fp
 2004c50:	df000017 	ldw	fp,0(sp)
 2004c54:	dec00104 	addi	sp,sp,4
 2004c58:	f800283a 	ret

02004c5c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2004c5c:	defff404 	addi	sp,sp,-48
 2004c60:	df000b15 	stw	fp,44(sp)
 2004c64:	df000b04 	addi	fp,sp,44
 2004c68:	e13ffc15 	stw	r4,-16(fp)
 2004c6c:	e17ffd15 	stw	r5,-12(fp)
 2004c70:	e1bffe15 	stw	r6,-8(fp)
 2004c74:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2004c78:	e0fffe17 	ldw	r3,-8(fp)
 2004c7c:	e0bfff17 	ldw	r2,-4(fp)
 2004c80:	10c5883a 	add	r2,r2,r3
 2004c84:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 2004c88:	e0c00117 	ldw	r3,4(fp)
 2004c8c:	e0800217 	ldw	r2,8(fp)
 2004c90:	10c5883a 	add	r2,r2,r3
 2004c94:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 2004c98:	e0800117 	ldw	r2,4(fp)
 2004c9c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 2004ca0:	e0bffe17 	ldw	r2,-8(fp)
 2004ca4:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2004ca8:	00800044 	movi	r2,1
 2004cac:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2004cb0:	e0bffc17 	ldw	r2,-16(fp)
 2004cb4:	11000504 	addi	r4,r2,20
 2004cb8:	e0fffd17 	ldw	r3,-12(fp)
 2004cbc:	00800044 	movi	r2,1
 2004cc0:	10c6983a 	sll	r3,r2,r3
 2004cc4:	2005883a 	mov	r2,r4
 2004cc8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2004ccc:	e0800317 	ldw	r2,12(fp)
 2004cd0:	1080008c 	andi	r2,r2,2
 2004cd4:	1004c03a 	cmpne	r2,r2,zero
 2004cd8:	1000051e 	bne	r2,zero,2004cf0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2004cdc:	e0bffc17 	ldw	r2,-16(fp)
 2004ce0:	10800304 	addi	r2,r2,12
 2004ce4:	1007883a 	mov	r3,r2
 2004ce8:	00810004 	movi	r2,1024
 2004cec:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2004cf0:	e0bffc17 	ldw	r2,-16(fp)
 2004cf4:	10800037 	ldwio	r2,0(r2)
 2004cf8:	00000006 	br	2004cfc <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2004cfc:	e0bffc17 	ldw	r2,-16(fp)
 2004d00:	10800204 	addi	r2,r2,8
 2004d04:	10800037 	ldwio	r2,0(r2)
 2004d08:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2004d0c:	e0bff717 	ldw	r2,-36(fp)
 2004d10:	1080100c 	andi	r2,r2,64
 2004d14:	1005003a 	cmpeq	r2,r2,zero
 2004d18:	1000031e 	bne	r2,zero,2004d28 <alt_avalon_spi_command+0xcc>
 2004d1c:	e0bff617 	ldw	r2,-40(fp)
 2004d20:	1004c03a 	cmpne	r2,r2,zero
 2004d24:	1000041e 	bne	r2,zero,2004d38 <alt_avalon_spi_command+0xdc>
 2004d28:	e0bff717 	ldw	r2,-36(fp)
 2004d2c:	1080200c 	andi	r2,r2,128
 2004d30:	1005003a 	cmpeq	r2,r2,zero
 2004d34:	103ff11e 	bne	r2,zero,2004cfc <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2004d38:	e0bff717 	ldw	r2,-36(fp)
 2004d3c:	1080100c 	andi	r2,r2,64
 2004d40:	1005003a 	cmpeq	r2,r2,zero
 2004d44:	1000201e 	bne	r2,zero,2004dc8 <alt_avalon_spi_command+0x16c>
 2004d48:	e0bff617 	ldw	r2,-40(fp)
 2004d4c:	10800050 	cmplti	r2,r2,1
 2004d50:	10001d1e 	bne	r2,zero,2004dc8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 2004d54:	e0bff617 	ldw	r2,-40(fp)
 2004d58:	10bfffc4 	addi	r2,r2,-1
 2004d5c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 2004d60:	e0ffff17 	ldw	r3,-4(fp)
 2004d64:	e0bffb17 	ldw	r2,-20(fp)
 2004d68:	18800b2e 	bgeu	r3,r2,2004d98 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2004d6c:	e0bffc17 	ldw	r2,-16(fp)
 2004d70:	11000104 	addi	r4,r2,4
 2004d74:	e0bfff17 	ldw	r2,-4(fp)
 2004d78:	10800003 	ldbu	r2,0(r2)
 2004d7c:	10c03fcc 	andi	r3,r2,255
 2004d80:	e0bfff17 	ldw	r2,-4(fp)
 2004d84:	10800044 	addi	r2,r2,1
 2004d88:	e0bfff15 	stw	r2,-4(fp)
 2004d8c:	2005883a 	mov	r2,r4
 2004d90:	10c00035 	stwio	r3,0(r2)
 2004d94:	00000c06 	br	2004dc8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 2004d98:	e0bff917 	ldw	r2,-28(fp)
 2004d9c:	1005003a 	cmpeq	r2,r2,zero
 2004da0:	1000071e 	bne	r2,zero,2004dc0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 2004da4:	e0bff917 	ldw	r2,-28(fp)
 2004da8:	10bfffc4 	addi	r2,r2,-1
 2004dac:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2004db0:	e0bffc17 	ldw	r2,-16(fp)
 2004db4:	10800104 	addi	r2,r2,4
 2004db8:	10000035 	stwio	zero,0(r2)
 2004dbc:	00000206 	br	2004dc8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 2004dc0:	00bf0004 	movi	r2,-1024
 2004dc4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2004dc8:	e0bff717 	ldw	r2,-36(fp)
 2004dcc:	1080200c 	andi	r2,r2,128
 2004dd0:	1005003a 	cmpeq	r2,r2,zero
 2004dd4:	103fc91e 	bne	r2,zero,2004cfc <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2004dd8:	e0bffc17 	ldw	r2,-16(fp)
 2004ddc:	10800037 	ldwio	r2,0(r2)
 2004de0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 2004de4:	e0bff817 	ldw	r2,-32(fp)
 2004de8:	1005003a 	cmpeq	r2,r2,zero
 2004dec:	1000041e 	bne	r2,zero,2004e00 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 2004df0:	e0bff817 	ldw	r2,-32(fp)
 2004df4:	10bfffc4 	addi	r2,r2,-1
 2004df8:	e0bff815 	stw	r2,-32(fp)
 2004dfc:	00000706 	br	2004e1c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 2004e00:	e0bff517 	ldw	r2,-44(fp)
 2004e04:	1007883a 	mov	r3,r2
 2004e08:	e0800217 	ldw	r2,8(fp)
 2004e0c:	10c00005 	stb	r3,0(r2)
 2004e10:	e0800217 	ldw	r2,8(fp)
 2004e14:	10800044 	addi	r2,r2,1
 2004e18:	e0800215 	stw	r2,8(fp)
      credits++;
 2004e1c:	e0bff617 	ldw	r2,-40(fp)
 2004e20:	10800044 	addi	r2,r2,1
 2004e24:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 2004e28:	e0bff817 	ldw	r2,-32(fp)
 2004e2c:	1004c03a 	cmpne	r2,r2,zero
 2004e30:	103fb21e 	bne	r2,zero,2004cfc <alt_avalon_spi_command+0xa0>
 2004e34:	e0c00217 	ldw	r3,8(fp)
 2004e38:	e0bffa17 	ldw	r2,-24(fp)
 2004e3c:	18800126 	beq	r3,r2,2004e44 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 2004e40:	003fae06 	br	2004cfc <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2004e44:	e0bffc17 	ldw	r2,-16(fp)
 2004e48:	10800204 	addi	r2,r2,8
 2004e4c:	10800037 	ldwio	r2,0(r2)
 2004e50:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2004e54:	e0bff717 	ldw	r2,-36(fp)
 2004e58:	1080080c 	andi	r2,r2,32
 2004e5c:	1005003a 	cmpeq	r2,r2,zero
 2004e60:	103ff81e 	bne	r2,zero,2004e44 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2004e64:	e0800317 	ldw	r2,12(fp)
 2004e68:	1080004c 	andi	r2,r2,1
 2004e6c:	1004c03a 	cmpne	r2,r2,zero
 2004e70:	1000031e 	bne	r2,zero,2004e80 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2004e74:	e0bffc17 	ldw	r2,-16(fp)
 2004e78:	10800304 	addi	r2,r2,12
 2004e7c:	10000035 	stwio	zero,0(r2)

  return read_length;
 2004e80:	e0800117 	ldw	r2,4(fp)
}
 2004e84:	e037883a 	mov	sp,fp
 2004e88:	df000017 	ldw	fp,0(sp)
 2004e8c:	dec00104 	addi	sp,sp,4
 2004e90:	f800283a 	ret

02004e94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2004e94:	defff904 	addi	sp,sp,-28
 2004e98:	dfc00615 	stw	ra,24(sp)
 2004e9c:	df000515 	stw	fp,20(sp)
 2004ea0:	df000504 	addi	fp,sp,20
 2004ea4:	e13ffd15 	stw	r4,-12(fp)
 2004ea8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2004eac:	e0bffe17 	ldw	r2,-8(fp)
 2004eb0:	10800017 	ldw	r2,0(r2)
 2004eb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2004eb8:	e13ffd17 	ldw	r4,-12(fp)
 2004ebc:	20052600 	call	2005260 <strlen>
 2004ec0:	10800044 	addi	r2,r2,1
 2004ec4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2004ec8:	00000d06 	br	2004f00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2004ecc:	e0bffc17 	ldw	r2,-16(fp)
 2004ed0:	11000217 	ldw	r4,8(r2)
 2004ed4:	e1bffb17 	ldw	r6,-20(fp)
 2004ed8:	e17ffd17 	ldw	r5,-12(fp)
 2004edc:	200514c0 	call	200514c <memcmp>
 2004ee0:	1004c03a 	cmpne	r2,r2,zero
 2004ee4:	1000031e 	bne	r2,zero,2004ef4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2004ee8:	e0bffc17 	ldw	r2,-16(fp)
 2004eec:	e0bfff15 	stw	r2,-4(fp)
 2004ef0:	00000706 	br	2004f10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2004ef4:	e0bffc17 	ldw	r2,-16(fp)
 2004ef8:	10800017 	ldw	r2,0(r2)
 2004efc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2004f00:	e0fffe17 	ldw	r3,-8(fp)
 2004f04:	e0bffc17 	ldw	r2,-16(fp)
 2004f08:	10fff01e 	bne	r2,r3,2004ecc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2004f0c:	e03fff15 	stw	zero,-4(fp)
 2004f10:	e0bfff17 	ldw	r2,-4(fp)
}
 2004f14:	e037883a 	mov	sp,fp
 2004f18:	dfc00117 	ldw	ra,4(sp)
 2004f1c:	df000017 	ldw	fp,0(sp)
 2004f20:	dec00204 	addi	sp,sp,8
 2004f24:	f800283a 	ret

02004f28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2004f28:	defffa04 	addi	sp,sp,-24
 2004f2c:	dfc00515 	stw	ra,20(sp)
 2004f30:	df000415 	stw	fp,16(sp)
 2004f34:	df000404 	addi	fp,sp,16
 2004f38:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2004f3c:	00808034 	movhi	r2,512
 2004f40:	109c0b04 	addi	r2,r2,28716
 2004f44:	10800017 	ldw	r2,0(r2)
 2004f48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2004f4c:	00003306 	br	200501c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2004f50:	e0bffd17 	ldw	r2,-12(fp)
 2004f54:	11000217 	ldw	r4,8(r2)
 2004f58:	20052600 	call	2005260 <strlen>
 2004f5c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2004f60:	e0bffd17 	ldw	r2,-12(fp)
 2004f64:	10c00217 	ldw	r3,8(r2)
 2004f68:	e0bffc17 	ldw	r2,-16(fp)
 2004f6c:	1885883a 	add	r2,r3,r2
 2004f70:	10bfffc4 	addi	r2,r2,-1
 2004f74:	10800003 	ldbu	r2,0(r2)
 2004f78:	10803fcc 	andi	r2,r2,255
 2004f7c:	1080201c 	xori	r2,r2,128
 2004f80:	10bfe004 	addi	r2,r2,-128
 2004f84:	10800bd8 	cmpnei	r2,r2,47
 2004f88:	1000031e 	bne	r2,zero,2004f98 <alt_find_file+0x70>
    {
      len -= 1;
 2004f8c:	e0bffc17 	ldw	r2,-16(fp)
 2004f90:	10bfffc4 	addi	r2,r2,-1
 2004f94:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2004f98:	e0bffc17 	ldw	r2,-16(fp)
 2004f9c:	1007883a 	mov	r3,r2
 2004fa0:	e0bffe17 	ldw	r2,-8(fp)
 2004fa4:	1885883a 	add	r2,r3,r2
 2004fa8:	10800003 	ldbu	r2,0(r2)
 2004fac:	10803fcc 	andi	r2,r2,255
 2004fb0:	1080201c 	xori	r2,r2,128
 2004fb4:	10bfe004 	addi	r2,r2,-128
 2004fb8:	10800be0 	cmpeqi	r2,r2,47
 2004fbc:	10000a1e 	bne	r2,zero,2004fe8 <alt_find_file+0xc0>
 2004fc0:	e0bffc17 	ldw	r2,-16(fp)
 2004fc4:	1007883a 	mov	r3,r2
 2004fc8:	e0bffe17 	ldw	r2,-8(fp)
 2004fcc:	1885883a 	add	r2,r3,r2
 2004fd0:	10800003 	ldbu	r2,0(r2)
 2004fd4:	10803fcc 	andi	r2,r2,255
 2004fd8:	1080201c 	xori	r2,r2,128
 2004fdc:	10bfe004 	addi	r2,r2,-128
 2004fe0:	1004c03a 	cmpne	r2,r2,zero
 2004fe4:	10000a1e 	bne	r2,zero,2005010 <alt_find_file+0xe8>
 2004fe8:	e0bffd17 	ldw	r2,-12(fp)
 2004fec:	11000217 	ldw	r4,8(r2)
 2004ff0:	e1bffc17 	ldw	r6,-16(fp)
 2004ff4:	e17ffe17 	ldw	r5,-8(fp)
 2004ff8:	200514c0 	call	200514c <memcmp>
 2004ffc:	1004c03a 	cmpne	r2,r2,zero
 2005000:	1000031e 	bne	r2,zero,2005010 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2005004:	e0bffd17 	ldw	r2,-12(fp)
 2005008:	e0bfff15 	stw	r2,-4(fp)
 200500c:	00000806 	br	2005030 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2005010:	e0bffd17 	ldw	r2,-12(fp)
 2005014:	10800017 	ldw	r2,0(r2)
 2005018:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200501c:	00c08034 	movhi	r3,512
 2005020:	18dc0b04 	addi	r3,r3,28716
 2005024:	e0bffd17 	ldw	r2,-12(fp)
 2005028:	10ffc91e 	bne	r2,r3,2004f50 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200502c:	e03fff15 	stw	zero,-4(fp)
 2005030:	e0bfff17 	ldw	r2,-4(fp)
}
 2005034:	e037883a 	mov	sp,fp
 2005038:	dfc00117 	ldw	ra,4(sp)
 200503c:	df000017 	ldw	fp,0(sp)
 2005040:	dec00204 	addi	sp,sp,8
 2005044:	f800283a 	ret

02005048 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2005048:	defffc04 	addi	sp,sp,-16
 200504c:	df000315 	stw	fp,12(sp)
 2005050:	df000304 	addi	fp,sp,12
 2005054:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2005058:	00bffa04 	movi	r2,-24
 200505c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2005060:	e03ffe15 	stw	zero,-8(fp)
 2005064:	00001e06 	br	20050e0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 2005068:	e0bffe17 	ldw	r2,-8(fp)
 200506c:	00c08034 	movhi	r3,512
 2005070:	18daaa04 	addi	r3,r3,27304
 2005074:	10800324 	muli	r2,r2,12
 2005078:	10c5883a 	add	r2,r2,r3
 200507c:	10800017 	ldw	r2,0(r2)
 2005080:	1004c03a 	cmpne	r2,r2,zero
 2005084:	1000131e 	bne	r2,zero,20050d4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 2005088:	e0bffe17 	ldw	r2,-8(fp)
 200508c:	00c08034 	movhi	r3,512
 2005090:	18daaa04 	addi	r3,r3,27304
 2005094:	10800324 	muli	r2,r2,12
 2005098:	10c7883a 	add	r3,r2,r3
 200509c:	e0bfff17 	ldw	r2,-4(fp)
 20050a0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 20050a4:	00808034 	movhi	r2,512
 20050a8:	109c0f04 	addi	r2,r2,28732
 20050ac:	10c00017 	ldw	r3,0(r2)
 20050b0:	e0bffe17 	ldw	r2,-8(fp)
 20050b4:	1880040e 	bge	r3,r2,20050c8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 20050b8:	00c08034 	movhi	r3,512
 20050bc:	18dc0f04 	addi	r3,r3,28732
 20050c0:	e0bffe17 	ldw	r2,-8(fp)
 20050c4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 20050c8:	e0bffe17 	ldw	r2,-8(fp)
 20050cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 20050d0:	00000606 	br	20050ec <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20050d4:	e0bffe17 	ldw	r2,-8(fp)
 20050d8:	10800044 	addi	r2,r2,1
 20050dc:	e0bffe15 	stw	r2,-8(fp)
 20050e0:	e0bffe17 	ldw	r2,-8(fp)
 20050e4:	10800810 	cmplti	r2,r2,32
 20050e8:	103fdf1e 	bne	r2,zero,2005068 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20050ec:	e0bffd17 	ldw	r2,-12(fp)
}
 20050f0:	e037883a 	mov	sp,fp
 20050f4:	df000017 	ldw	fp,0(sp)
 20050f8:	dec00104 	addi	sp,sp,4
 20050fc:	f800283a 	ret

02005100 <atexit>:
 2005100:	200b883a 	mov	r5,r4
 2005104:	000d883a 	mov	r6,zero
 2005108:	0009883a 	mov	r4,zero
 200510c:	000f883a 	mov	r7,zero
 2005110:	20052d41 	jmpi	20052d4 <__register_exitproc>

02005114 <exit>:
 2005114:	defffe04 	addi	sp,sp,-8
 2005118:	000b883a 	mov	r5,zero
 200511c:	dc000015 	stw	r16,0(sp)
 2005120:	dfc00115 	stw	ra,4(sp)
 2005124:	2021883a 	mov	r16,r4
 2005128:	200540c0 	call	200540c <__call_exitprocs>
 200512c:	00808034 	movhi	r2,512
 2005130:	109c1604 	addi	r2,r2,28760
 2005134:	11000017 	ldw	r4,0(r2)
 2005138:	20800f17 	ldw	r2,60(r4)
 200513c:	10000126 	beq	r2,zero,2005144 <exit+0x30>
 2005140:	103ee83a 	callr	r2
 2005144:	8009883a 	mov	r4,r16
 2005148:	20055fc0 	call	20055fc <_exit>

0200514c <memcmp>:
 200514c:	00c000c4 	movi	r3,3
 2005150:	1980032e 	bgeu	r3,r6,2005160 <memcmp+0x14>
 2005154:	2144b03a 	or	r2,r4,r5
 2005158:	10c4703a 	and	r2,r2,r3
 200515c:	10000f26 	beq	r2,zero,200519c <memcmp+0x50>
 2005160:	31ffffc4 	addi	r7,r6,-1
 2005164:	3000061e 	bne	r6,zero,2005180 <memcmp+0x34>
 2005168:	00000a06 	br	2005194 <memcmp+0x48>
 200516c:	39ffffc4 	addi	r7,r7,-1
 2005170:	00bfffc4 	movi	r2,-1
 2005174:	21000044 	addi	r4,r4,1
 2005178:	29400044 	addi	r5,r5,1
 200517c:	38800526 	beq	r7,r2,2005194 <memcmp+0x48>
 2005180:	20c00003 	ldbu	r3,0(r4)
 2005184:	28800003 	ldbu	r2,0(r5)
 2005188:	18bff826 	beq	r3,r2,200516c <memcmp+0x20>
 200518c:	1885c83a 	sub	r2,r3,r2
 2005190:	f800283a 	ret
 2005194:	0005883a 	mov	r2,zero
 2005198:	f800283a 	ret
 200519c:	180f883a 	mov	r7,r3
 20051a0:	20c00017 	ldw	r3,0(r4)
 20051a4:	28800017 	ldw	r2,0(r5)
 20051a8:	18bfed1e 	bne	r3,r2,2005160 <memcmp+0x14>
 20051ac:	31bfff04 	addi	r6,r6,-4
 20051b0:	21000104 	addi	r4,r4,4
 20051b4:	29400104 	addi	r5,r5,4
 20051b8:	39bff936 	bltu	r7,r6,20051a0 <memcmp+0x54>
 20051bc:	003fe806 	br	2005160 <memcmp+0x14>

020051c0 <memcpy>:
 20051c0:	01c003c4 	movi	r7,15
 20051c4:	2007883a 	mov	r3,r4
 20051c8:	3980032e 	bgeu	r7,r6,20051d8 <memcpy+0x18>
 20051cc:	2904b03a 	or	r2,r5,r4
 20051d0:	108000cc 	andi	r2,r2,3
 20051d4:	10000926 	beq	r2,zero,20051fc <memcpy+0x3c>
 20051d8:	30000626 	beq	r6,zero,20051f4 <memcpy+0x34>
 20051dc:	30cd883a 	add	r6,r6,r3
 20051e0:	28800003 	ldbu	r2,0(r5)
 20051e4:	29400044 	addi	r5,r5,1
 20051e8:	18800005 	stb	r2,0(r3)
 20051ec:	18c00044 	addi	r3,r3,1
 20051f0:	30fffb1e 	bne	r6,r3,20051e0 <memcpy+0x20>
 20051f4:	2005883a 	mov	r2,r4
 20051f8:	f800283a 	ret
 20051fc:	3811883a 	mov	r8,r7
 2005200:	200f883a 	mov	r7,r4
 2005204:	28c00017 	ldw	r3,0(r5)
 2005208:	31bffc04 	addi	r6,r6,-16
 200520c:	38c00015 	stw	r3,0(r7)
 2005210:	28800117 	ldw	r2,4(r5)
 2005214:	38800115 	stw	r2,4(r7)
 2005218:	28c00217 	ldw	r3,8(r5)
 200521c:	38c00215 	stw	r3,8(r7)
 2005220:	28800317 	ldw	r2,12(r5)
 2005224:	29400404 	addi	r5,r5,16
 2005228:	38800315 	stw	r2,12(r7)
 200522c:	39c00404 	addi	r7,r7,16
 2005230:	41bff436 	bltu	r8,r6,2005204 <memcpy+0x44>
 2005234:	008000c4 	movi	r2,3
 2005238:	1180072e 	bgeu	r2,r6,2005258 <memcpy+0x98>
 200523c:	1007883a 	mov	r3,r2
 2005240:	28800017 	ldw	r2,0(r5)
 2005244:	31bfff04 	addi	r6,r6,-4
 2005248:	29400104 	addi	r5,r5,4
 200524c:	38800015 	stw	r2,0(r7)
 2005250:	39c00104 	addi	r7,r7,4
 2005254:	19bffa36 	bltu	r3,r6,2005240 <memcpy+0x80>
 2005258:	3807883a 	mov	r3,r7
 200525c:	003fde06 	br	20051d8 <memcpy+0x18>

02005260 <strlen>:
 2005260:	208000cc 	andi	r2,r4,3
 2005264:	2011883a 	mov	r8,r4
 2005268:	1000161e 	bne	r2,zero,20052c4 <strlen+0x64>
 200526c:	20c00017 	ldw	r3,0(r4)
 2005270:	017fbff4 	movhi	r5,65279
 2005274:	297fbfc4 	addi	r5,r5,-257
 2005278:	01e02074 	movhi	r7,32897
 200527c:	39e02004 	addi	r7,r7,-32640
 2005280:	1945883a 	add	r2,r3,r5
 2005284:	11c4703a 	and	r2,r2,r7
 2005288:	00c6303a 	nor	r3,zero,r3
 200528c:	1886703a 	and	r3,r3,r2
 2005290:	18000c1e 	bne	r3,zero,20052c4 <strlen+0x64>
 2005294:	280d883a 	mov	r6,r5
 2005298:	380b883a 	mov	r5,r7
 200529c:	21000104 	addi	r4,r4,4
 20052a0:	20800017 	ldw	r2,0(r4)
 20052a4:	1187883a 	add	r3,r2,r6
 20052a8:	1946703a 	and	r3,r3,r5
 20052ac:	0084303a 	nor	r2,zero,r2
 20052b0:	10c4703a 	and	r2,r2,r3
 20052b4:	103ff926 	beq	r2,zero,200529c <strlen+0x3c>
 20052b8:	20800007 	ldb	r2,0(r4)
 20052bc:	10000326 	beq	r2,zero,20052cc <strlen+0x6c>
 20052c0:	21000044 	addi	r4,r4,1
 20052c4:	20800007 	ldb	r2,0(r4)
 20052c8:	103ffd1e 	bne	r2,zero,20052c0 <strlen+0x60>
 20052cc:	2205c83a 	sub	r2,r4,r8
 20052d0:	f800283a 	ret

020052d4 <__register_exitproc>:
 20052d4:	defffa04 	addi	sp,sp,-24
 20052d8:	00808034 	movhi	r2,512
 20052dc:	109c1604 	addi	r2,r2,28760
 20052e0:	dc000015 	stw	r16,0(sp)
 20052e4:	14000017 	ldw	r16,0(r2)
 20052e8:	dd000415 	stw	r20,16(sp)
 20052ec:	2829883a 	mov	r20,r5
 20052f0:	81405217 	ldw	r5,328(r16)
 20052f4:	dcc00315 	stw	r19,12(sp)
 20052f8:	dc800215 	stw	r18,8(sp)
 20052fc:	dc400115 	stw	r17,4(sp)
 2005300:	dfc00515 	stw	ra,20(sp)
 2005304:	2023883a 	mov	r17,r4
 2005308:	3027883a 	mov	r19,r6
 200530c:	3825883a 	mov	r18,r7
 2005310:	28002526 	beq	r5,zero,20053a8 <__register_exitproc+0xd4>
 2005314:	29000117 	ldw	r4,4(r5)
 2005318:	008007c4 	movi	r2,31
 200531c:	11002716 	blt	r2,r4,20053bc <__register_exitproc+0xe8>
 2005320:	8800101e 	bne	r17,zero,2005364 <__register_exitproc+0x90>
 2005324:	2105883a 	add	r2,r4,r4
 2005328:	1085883a 	add	r2,r2,r2
 200532c:	20c00044 	addi	r3,r4,1
 2005330:	1145883a 	add	r2,r2,r5
 2005334:	0009883a 	mov	r4,zero
 2005338:	15000215 	stw	r20,8(r2)
 200533c:	28c00115 	stw	r3,4(r5)
 2005340:	2005883a 	mov	r2,r4
 2005344:	dfc00517 	ldw	ra,20(sp)
 2005348:	dd000417 	ldw	r20,16(sp)
 200534c:	dcc00317 	ldw	r19,12(sp)
 2005350:	dc800217 	ldw	r18,8(sp)
 2005354:	dc400117 	ldw	r17,4(sp)
 2005358:	dc000017 	ldw	r16,0(sp)
 200535c:	dec00604 	addi	sp,sp,24
 2005360:	f800283a 	ret
 2005364:	29802204 	addi	r6,r5,136
 2005368:	00800044 	movi	r2,1
 200536c:	110e983a 	sll	r7,r2,r4
 2005370:	30c04017 	ldw	r3,256(r6)
 2005374:	2105883a 	add	r2,r4,r4
 2005378:	1085883a 	add	r2,r2,r2
 200537c:	1185883a 	add	r2,r2,r6
 2005380:	19c6b03a 	or	r3,r3,r7
 2005384:	14802015 	stw	r18,128(r2)
 2005388:	14c00015 	stw	r19,0(r2)
 200538c:	00800084 	movi	r2,2
 2005390:	30c04015 	stw	r3,256(r6)
 2005394:	88bfe31e 	bne	r17,r2,2005324 <__register_exitproc+0x50>
 2005398:	30804117 	ldw	r2,260(r6)
 200539c:	11c4b03a 	or	r2,r2,r7
 20053a0:	30804115 	stw	r2,260(r6)
 20053a4:	003fdf06 	br	2005324 <__register_exitproc+0x50>
 20053a8:	00808034 	movhi	r2,512
 20053ac:	109c5e04 	addi	r2,r2,29048
 20053b0:	100b883a 	mov	r5,r2
 20053b4:	80805215 	stw	r2,328(r16)
 20053b8:	003fd606 	br	2005314 <__register_exitproc+0x40>
 20053bc:	00800034 	movhi	r2,0
 20053c0:	10800004 	addi	r2,r2,0
 20053c4:	1000021e 	bne	r2,zero,20053d0 <__register_exitproc+0xfc>
 20053c8:	013fffc4 	movi	r4,-1
 20053cc:	003fdc06 	br	2005340 <__register_exitproc+0x6c>
 20053d0:	01006404 	movi	r4,400
 20053d4:	103ee83a 	callr	r2
 20053d8:	1007883a 	mov	r3,r2
 20053dc:	103ffa26 	beq	r2,zero,20053c8 <__register_exitproc+0xf4>
 20053e0:	80805217 	ldw	r2,328(r16)
 20053e4:	180b883a 	mov	r5,r3
 20053e8:	18000115 	stw	zero,4(r3)
 20053ec:	18800015 	stw	r2,0(r3)
 20053f0:	80c05215 	stw	r3,328(r16)
 20053f4:	18006215 	stw	zero,392(r3)
 20053f8:	18006315 	stw	zero,396(r3)
 20053fc:	0009883a 	mov	r4,zero
 2005400:	883fc826 	beq	r17,zero,2005324 <__register_exitproc+0x50>
 2005404:	003fd706 	br	2005364 <__register_exitproc+0x90>

02005408 <register_fini>:
 2005408:	f800283a 	ret

0200540c <__call_exitprocs>:
 200540c:	00808034 	movhi	r2,512
 2005410:	109c1604 	addi	r2,r2,28760
 2005414:	10800017 	ldw	r2,0(r2)
 2005418:	defff304 	addi	sp,sp,-52
 200541c:	df000b15 	stw	fp,44(sp)
 2005420:	d8800115 	stw	r2,4(sp)
 2005424:	00800034 	movhi	r2,0
 2005428:	10800004 	addi	r2,r2,0
 200542c:	1005003a 	cmpeq	r2,r2,zero
 2005430:	d8800215 	stw	r2,8(sp)
 2005434:	d8800117 	ldw	r2,4(sp)
 2005438:	dd400815 	stw	r21,32(sp)
 200543c:	dd000715 	stw	r20,28(sp)
 2005440:	10805204 	addi	r2,r2,328
 2005444:	dfc00c15 	stw	ra,48(sp)
 2005448:	ddc00a15 	stw	r23,40(sp)
 200544c:	dd800915 	stw	r22,36(sp)
 2005450:	dcc00615 	stw	r19,24(sp)
 2005454:	dc800515 	stw	r18,20(sp)
 2005458:	dc400415 	stw	r17,16(sp)
 200545c:	dc000315 	stw	r16,12(sp)
 2005460:	282b883a 	mov	r21,r5
 2005464:	2039883a 	mov	fp,r4
 2005468:	d8800015 	stw	r2,0(sp)
 200546c:	2829003a 	cmpeq	r20,r5,zero
 2005470:	d8800117 	ldw	r2,4(sp)
 2005474:	14405217 	ldw	r17,328(r2)
 2005478:	88001026 	beq	r17,zero,20054bc <__call_exitprocs+0xb0>
 200547c:	ddc00017 	ldw	r23,0(sp)
 2005480:	88800117 	ldw	r2,4(r17)
 2005484:	8c802204 	addi	r18,r17,136
 2005488:	143fffc4 	addi	r16,r2,-1
 200548c:	80000916 	blt	r16,zero,20054b4 <__call_exitprocs+0xa8>
 2005490:	05bfffc4 	movi	r22,-1
 2005494:	a000151e 	bne	r20,zero,20054ec <__call_exitprocs+0xe0>
 2005498:	8409883a 	add	r4,r16,r16
 200549c:	2105883a 	add	r2,r4,r4
 20054a0:	1485883a 	add	r2,r2,r18
 20054a4:	10c02017 	ldw	r3,128(r2)
 20054a8:	a8c01126 	beq	r21,r3,20054f0 <__call_exitprocs+0xe4>
 20054ac:	843fffc4 	addi	r16,r16,-1
 20054b0:	85bff81e 	bne	r16,r22,2005494 <__call_exitprocs+0x88>
 20054b4:	d8800217 	ldw	r2,8(sp)
 20054b8:	10003126 	beq	r2,zero,2005580 <__call_exitprocs+0x174>
 20054bc:	dfc00c17 	ldw	ra,48(sp)
 20054c0:	df000b17 	ldw	fp,44(sp)
 20054c4:	ddc00a17 	ldw	r23,40(sp)
 20054c8:	dd800917 	ldw	r22,36(sp)
 20054cc:	dd400817 	ldw	r21,32(sp)
 20054d0:	dd000717 	ldw	r20,28(sp)
 20054d4:	dcc00617 	ldw	r19,24(sp)
 20054d8:	dc800517 	ldw	r18,20(sp)
 20054dc:	dc400417 	ldw	r17,16(sp)
 20054e0:	dc000317 	ldw	r16,12(sp)
 20054e4:	dec00d04 	addi	sp,sp,52
 20054e8:	f800283a 	ret
 20054ec:	8409883a 	add	r4,r16,r16
 20054f0:	88c00117 	ldw	r3,4(r17)
 20054f4:	2105883a 	add	r2,r4,r4
 20054f8:	1445883a 	add	r2,r2,r17
 20054fc:	18ffffc4 	addi	r3,r3,-1
 2005500:	11800217 	ldw	r6,8(r2)
 2005504:	1c001526 	beq	r3,r16,200555c <__call_exitprocs+0x150>
 2005508:	10000215 	stw	zero,8(r2)
 200550c:	303fe726 	beq	r6,zero,20054ac <__call_exitprocs+0xa0>
 2005510:	00c00044 	movi	r3,1
 2005514:	1c06983a 	sll	r3,r3,r16
 2005518:	90804017 	ldw	r2,256(r18)
 200551c:	8cc00117 	ldw	r19,4(r17)
 2005520:	1884703a 	and	r2,r3,r2
 2005524:	10001426 	beq	r2,zero,2005578 <__call_exitprocs+0x16c>
 2005528:	90804117 	ldw	r2,260(r18)
 200552c:	1884703a 	and	r2,r3,r2
 2005530:	10000c1e 	bne	r2,zero,2005564 <__call_exitprocs+0x158>
 2005534:	2105883a 	add	r2,r4,r4
 2005538:	1485883a 	add	r2,r2,r18
 200553c:	11400017 	ldw	r5,0(r2)
 2005540:	e009883a 	mov	r4,fp
 2005544:	303ee83a 	callr	r6
 2005548:	88800117 	ldw	r2,4(r17)
 200554c:	98bfc81e 	bne	r19,r2,2005470 <__call_exitprocs+0x64>
 2005550:	b8800017 	ldw	r2,0(r23)
 2005554:	147fd526 	beq	r2,r17,20054ac <__call_exitprocs+0xa0>
 2005558:	003fc506 	br	2005470 <__call_exitprocs+0x64>
 200555c:	8c000115 	stw	r16,4(r17)
 2005560:	003fea06 	br	200550c <__call_exitprocs+0x100>
 2005564:	2105883a 	add	r2,r4,r4
 2005568:	1485883a 	add	r2,r2,r18
 200556c:	11000017 	ldw	r4,0(r2)
 2005570:	303ee83a 	callr	r6
 2005574:	003ff406 	br	2005548 <__call_exitprocs+0x13c>
 2005578:	303ee83a 	callr	r6
 200557c:	003ff206 	br	2005548 <__call_exitprocs+0x13c>
 2005580:	88800117 	ldw	r2,4(r17)
 2005584:	1000081e 	bne	r2,zero,20055a8 <__call_exitprocs+0x19c>
 2005588:	89000017 	ldw	r4,0(r17)
 200558c:	20000726 	beq	r4,zero,20055ac <__call_exitprocs+0x1a0>
 2005590:	b9000015 	stw	r4,0(r23)
 2005594:	8809883a 	mov	r4,r17
 2005598:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 200559c:	bc400017 	ldw	r17,0(r23)
 20055a0:	883fb71e 	bne	r17,zero,2005480 <__call_exitprocs+0x74>
 20055a4:	003fc506 	br	20054bc <__call_exitprocs+0xb0>
 20055a8:	89000017 	ldw	r4,0(r17)
 20055ac:	882f883a 	mov	r23,r17
 20055b0:	2023883a 	mov	r17,r4
 20055b4:	883fb21e 	bne	r17,zero,2005480 <__call_exitprocs+0x74>
 20055b8:	003fc006 	br	20054bc <__call_exitprocs+0xb0>

020055bc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 20055bc:	defffd04 	addi	sp,sp,-12
 20055c0:	df000215 	stw	fp,8(sp)
 20055c4:	df000204 	addi	fp,sp,8
 20055c8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 20055cc:	e0bfff17 	ldw	r2,-4(fp)
 20055d0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20055d4:	e0bffe17 	ldw	r2,-8(fp)
 20055d8:	1005003a 	cmpeq	r2,r2,zero
 20055dc:	1000021e 	bne	r2,zero,20055e8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 20055e0:	002af070 	cmpltui	zero,zero,43969
 20055e4:	00000106 	br	20055ec <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 20055e8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 20055ec:	e037883a 	mov	sp,fp
 20055f0:	df000017 	ldw	fp,0(sp)
 20055f4:	dec00104 	addi	sp,sp,4
 20055f8:	f800283a 	ret

020055fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20055fc:	defffd04 	addi	sp,sp,-12
 2005600:	dfc00215 	stw	ra,8(sp)
 2005604:	df000115 	stw	fp,4(sp)
 2005608:	df000104 	addi	fp,sp,4
 200560c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2005610:	e13fff17 	ldw	r4,-4(fp)
 2005614:	20055bc0 	call	20055bc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2005618:	003fff06 	br	2005618 <_exit+0x1c>
 200561c:	02005408 	cmpgei	r8,zero,336
