
led_test.elf:     file format elf32-littlenios2
led_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0000281c memsz 0x0000281c flags r-x
    LOAD off    0x0000383c vaddr 0x0200283c paddr 0x02003e70 align 2**12
         filesz 0x00001634 memsz 0x00001634 flags rw-
    LOAD off    0x000054a4 vaddr 0x020054a4 paddr 0x020054a4 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002658  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  0200280c  0200280c  0000380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001634  0200283c  02003e70  0000383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  020054a4  020054a4  000054a4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000598  00000000  00000000  00004e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000084b  00000000  00000000  00005430  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009f69  00000000  00000000  00005c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025da  00000000  00000000  0000fbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000065b3  00000000  00000000  000121be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000092c  00000000  00000000  00018774  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000bb6  00000000  00000000  000190a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fc3  00000000  00000000  00019c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001ac1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001ac80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001c88b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0001c88e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001c893  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001c894  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001c895  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001c899  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001c89d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001c8a1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001c8aa  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001c8b3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0001c8bc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000016  00000000  00000000  0001c8c2  2**0
                  CONTENTS, READONLY
 29 .jdi          00004627  00000000  00000000  0001c8d8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0002d096  00000000  00000000  00020eff  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
0200280c l    d  .rodata	00000000 .rodata
0200283c l    d  .rwdata	00000000 .rwdata
020054a4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
020002d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200283c l     O .rwdata	00001060 jtag_uart
02000458 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02000698 l     F .text	00000228 altera_avalon_jtag_uart_irq
020008c0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
020012d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0200137c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200145c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02001880 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
020019bc l     F .text	000000dc alt_file_locked
02001c20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
02003a44 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020024a8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
0200265c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
020027a8 l     F .text	00000040 alt_sim_halt
02000344 g     F .text	0000006c alt_main
020054c0 g     O .bss	00000100 alt_irq
02003e70 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
020054bc g     O .bss	00000004 errno
020054a8 g     O .bss	00000004 alt_argv
0200be44 g       *ABS*	00000000 _gp
020003b0 g     F .text	00000030 usleep
020038c4 g     O .rwdata	00000180 alt_fd_list
02001ea4 g     F .text	00000094 alt_find_dev
02002260 g     F .text	000000a0 memcpy
02001944 g     F .text	00000078 alt_io_redirect
0200280c g       *ABS*	00000000 __DTOR_END__
02000ad8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02002798 g     F .text	00000008 __udivsi3
02002110 g     F .text	00000090 alt_icache_flush
02003e54 g     O .rwdata	00000004 alt_max_fd
02003e6c g     O .rwdata	00000004 _global_impure_ptr
02005750 g       *ABS*	00000000 __bss_end
02001788 g     F .text	000000f8 alt_iic_isr_register
02001d78 g     F .text	0000010c alt_tick
02001740 g     F .text	00000048 alt_ic_irq_enabled
02001ce0 g     F .text	00000098 alt_alarm_stop
020054b0 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
0200389c g     O .rwdata	00000028 alt_dev_null
02001338 g     F .text	00000044 alt_dcache_flush_all
02003e70 g       *ABS*	00000000 __ram_rwdata_end
02003e4c g     O .rwdata	00000008 alt_dev_list
0200283c g       *ABS*	00000000 __ram_rodata_end
020027a0 g     F .text	00000008 __umodsi3
02005750 g       *ABS*	00000000 end
020005d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
02002808 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02000cfc g     F .text	00000240 altera_avalon_jtag_uart_write
020024ac g     F .text	000001b0 __call_exitprocs
020001b4 g     F .text	0000004c _start
020054b4 g     O .bss	00000004 _alt_tick_rate
020054b8 g     O .bss	00000004 _alt_nticks
02000414 g     F .text	00000044 alt_sys_init
02002374 g     F .text	00000134 __register_exitproc
02000970 g     F .text	00000074 altera_avalon_jtag_uart_close
0200283c g       *ABS*	00000000 __ram_rwdata_start
0200280c g       *ABS*	00000000 __ram_rodata_start
02000490 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02002058 g     F .text	000000b8 alt_get_fd
02001090 g     F .text	0000014c alt_busy_sleep
020021ec g     F .text	00000074 memcmp
02000540 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02005750 g       *ABS*	00000000 __alt_stack_base
02000588 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02001f38 g     F .text	00000120 alt_find_file
020013a8 g     F .text	000000b4 alt_dev_llist_insert
020054a4 g       *ABS*	00000000 __bss_start
02000200 g     F .text	00000058 main
020054ac g     O .bss	00000004 alt_envp
020004e8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
020055c0 g     O .bss	00000190 _atexit0
02003e58 g     O .rwdata	00000004 alt_errno
020026d8 g     F .text	00000060 __divsi3
0200280c g       *ABS*	00000000 __CTOR_END__
0200280c g       *ABS*	00000000 __flash_rodata_start
0200280c g       *ABS*	00000000 __DTOR_LIST__
020003e0 g     F .text	00000034 alt_irq_init
02001c80 g     F .text	00000060 alt_release_fd
020021a0 g     F .text	00000014 atexit
02003e68 g     O .rwdata	00000004 _impure_ptr
020054a4 g     O .bss	00000004 alt_argc
02001520 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02003e44 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
020015b4 g     F .text	00000050 alt_ic_isr_register
02003e70 g       *ABS*	00000000 _edata
02005750 g       *ABS*	00000000 _end
020001b4 g       *ABS*	00000000 __ram_exceptions_end
020009e4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
020016a0 g     F .text	000000a0 alt_ic_irq_disable
02001e84 g     F .text	00000020 altera_nios2_qsys_irq_init
020021b4 g     F .text	00000038 exit
02002738 g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02000000 g       *ABS*	00000000 __alt_mem_sdram
020027e8 g     F .text	00000020 _exit
02000f3c g     F .text	00000154 alt_alarm_start
02002300 g     F .text	00000074 strlen
02001a98 g     F .text	00000188 open
02001584 g     F .text	00000030 alt_icache_flush_all
02003e5c g     O .rwdata	00000004 alt_priority_mask
02001604 g     F .text	0000009c alt_ic_irq_enable
02003e60 g     O .rwdata	00000008 alt_alarm_list
020014bc g     F .text	00000064 _do_ctors
020011dc g     F .text	000000fc close
02000258 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406d14 	ori	at,at,436
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__reset-0x2000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08034 	movhi	r3,512
 2000134:	18d53004 	addi	r3,r3,21696
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08034 	movhi	r3,512
 200014c:	18d53004 	addi	r3,r3,21696
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 20001c0:	00bffd16 	blt	zero,r2,20001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c4:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001cc:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001d0:	d6af9114 	ori	gp,gp,48708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d4:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001d8:	10952914 	ori	r2,r2,21668

    movhi r3, %hi(__bss_end)
 20001dc:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001e0:	18d5d414 	ori	r3,r3,22352

    beq r2, r3, 1f
 20001e4:	10c00326 	beq	r2,r3,20001f4 <_start+0x40>

0:
    stw zero, (r2)
 20001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f0:	10fffd36 	bltu	r2,r3,20001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001f4:	20002580 	call	2000258 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f8:	20003440 	call	2000344 <alt_main>

020001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001fc:	003fff06 	br	20001fc <alt_after_alt_main>

02000200 <main>:
 *         Name:  main
 *  Description:
 * =======================================================================
 */
int main(void)
{
 2000200:	defffd04 	addi	sp,sp,-12
 2000204:	dfc00215 	stw	ra,8(sp)
 2000208:	df000115 	stw	fp,4(sp)
 200020c:	df000104 	addi	fp,sp,4
	int i;

	while(1){
		for(i=0;i<4;i++){
 2000210:	e03fff15 	stw	zero,-4(fp)
 2000214:	00000c06 	br	2000248 <main+0x48>
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE,1<<i);
 2000218:	00c00044 	movi	r3,1
 200021c:	e0bfff17 	ldw	r2,-4(fp)
 2000220:	1886983a 	sll	r3,r3,r2
 2000224:	00810034 	movhi	r2,1024
 2000228:	10840004 	addi	r2,r2,4096
 200022c:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
 2000230:	010000b4 	movhi	r4,2
 2000234:	2121a804 	addi	r4,r4,-31072
 2000238:	20003b00 	call	20003b0 <usleep>
int main(void)
{
	int i;

	while(1){
		for(i=0;i<4;i++){
 200023c:	e0bfff17 	ldw	r2,-4(fp)
 2000240:	10800044 	addi	r2,r2,1
 2000244:	e0bfff15 	stw	r2,-4(fp)
 2000248:	e0bfff17 	ldw	r2,-4(fp)
 200024c:	10800110 	cmplti	r2,r2,4
 2000250:	103ff11e 	bne	r2,zero,2000218 <main+0x18>
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE,1<<i);
			usleep(100000);
		}
	}
 2000254:	003fee06 	br	2000210 <main+0x10>

02000258 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2000258:	defffe04 	addi	sp,sp,-8
 200025c:	dfc00115 	stw	ra,4(sp)
 2000260:	df000015 	stw	fp,0(sp)
 2000264:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2000268:	01008034 	movhi	r4,512
 200026c:	210f9c04 	addi	r4,r4,15984
 2000270:	01408034 	movhi	r5,512
 2000274:	294a0f04 	addi	r5,r5,10300
 2000278:	01808034 	movhi	r6,512
 200027c:	318f9c04 	addi	r6,r6,15984
 2000280:	20002d80 	call	20002d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2000284:	01008034 	movhi	r4,512
 2000288:	21000804 	addi	r4,r4,32
 200028c:	01408034 	movhi	r5,512
 2000290:	29400804 	addi	r5,r5,32
 2000294:	01808034 	movhi	r6,512
 2000298:	31806d04 	addi	r6,r6,436
 200029c:	20002d80 	call	20002d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20002a0:	01008034 	movhi	r4,512
 20002a4:	210a0304 	addi	r4,r4,10252
 20002a8:	01408034 	movhi	r5,512
 20002ac:	294a0304 	addi	r5,r5,10252
 20002b0:	01808034 	movhi	r6,512
 20002b4:	318a0f04 	addi	r6,r6,10300
 20002b8:	20002d80 	call	20002d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20002bc:	20013380 	call	2001338 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20002c0:	20015840 	call	2001584 <alt_icache_flush_all>
}
 20002c4:	e037883a 	mov	sp,fp
 20002c8:	dfc00117 	ldw	ra,4(sp)
 20002cc:	df000017 	ldw	fp,0(sp)
 20002d0:	dec00204 	addi	sp,sp,8
 20002d4:	f800283a 	ret

020002d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20002d8:	defffc04 	addi	sp,sp,-16
 20002dc:	df000315 	stw	fp,12(sp)
 20002e0:	df000304 	addi	fp,sp,12
 20002e4:	e13ffd15 	stw	r4,-12(fp)
 20002e8:	e17ffe15 	stw	r5,-8(fp)
 20002ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 20002f0:	e0fffe17 	ldw	r3,-8(fp)
 20002f4:	e0bffd17 	ldw	r2,-12(fp)
 20002f8:	18800e26 	beq	r3,r2,2000334 <alt_load_section+0x5c>
  {
    while( to != end )
 20002fc:	00000a06 	br	2000328 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2000300:	e0bffd17 	ldw	r2,-12(fp)
 2000304:	10c00017 	ldw	r3,0(r2)
 2000308:	e0bffe17 	ldw	r2,-8(fp)
 200030c:	10c00015 	stw	r3,0(r2)
 2000310:	e0bffe17 	ldw	r2,-8(fp)
 2000314:	10800104 	addi	r2,r2,4
 2000318:	e0bffe15 	stw	r2,-8(fp)
 200031c:	e0bffd17 	ldw	r2,-12(fp)
 2000320:	10800104 	addi	r2,r2,4
 2000324:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2000328:	e0fffe17 	ldw	r3,-8(fp)
 200032c:	e0bfff17 	ldw	r2,-4(fp)
 2000330:	18bff31e 	bne	r3,r2,2000300 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2000334:	e037883a 	mov	sp,fp
 2000338:	df000017 	ldw	fp,0(sp)
 200033c:	dec00104 	addi	sp,sp,4
 2000340:	f800283a 	ret

02000344 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000344:	defffd04 	addi	sp,sp,-12
 2000348:	dfc00215 	stw	ra,8(sp)
 200034c:	df000115 	stw	fp,4(sp)
 2000350:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000354:	0009883a 	mov	r4,zero
 2000358:	20003e00 	call	20003e0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200035c:	20004140 	call	2000414 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2000360:	01008034 	movhi	r4,512
 2000364:	210a0304 	addi	r4,r4,10252
 2000368:	01408034 	movhi	r5,512
 200036c:	294a0304 	addi	r5,r5,10252
 2000370:	01808034 	movhi	r6,512
 2000374:	318a0304 	addi	r6,r6,10252
 2000378:	20019440 	call	2001944 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200037c:	20014bc0 	call	20014bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2000380:	01008034 	movhi	r4,512
 2000384:	21054804 	addi	r4,r4,5408
 2000388:	20021a00 	call	20021a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200038c:	d1259817 	ldw	r4,-27040(gp)
 2000390:	d1659917 	ldw	r5,-27036(gp)
 2000394:	d1a59a17 	ldw	r6,-27032(gp)
 2000398:	20002000 	call	2000200 <main>
 200039c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20003a0:	01000044 	movi	r4,1
 20003a4:	20011dc0 	call	20011dc <close>
  exit (result);
 20003a8:	e13fff17 	ldw	r4,-4(fp)
 20003ac:	20021b40 	call	20021b4 <exit>

020003b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 20003b0:	defffd04 	addi	sp,sp,-12
 20003b4:	dfc00215 	stw	ra,8(sp)
 20003b8:	df000115 	stw	fp,4(sp)
 20003bc:	df000104 	addi	fp,sp,4
 20003c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 20003c4:	e13fff17 	ldw	r4,-4(fp)
 20003c8:	20010900 	call	2001090 <alt_busy_sleep>
}
 20003cc:	e037883a 	mov	sp,fp
 20003d0:	dfc00117 	ldw	ra,4(sp)
 20003d4:	df000017 	ldw	fp,0(sp)
 20003d8:	dec00204 	addi	sp,sp,8
 20003dc:	f800283a 	ret

020003e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20003e0:	defffd04 	addi	sp,sp,-12
 20003e4:	dfc00215 	stw	ra,8(sp)
 20003e8:	df000115 	stw	fp,4(sp)
 20003ec:	df000104 	addi	fp,sp,4
 20003f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 20003f4:	2001e840 	call	2001e84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20003f8:	00800044 	movi	r2,1
 20003fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2000400:	e037883a 	mov	sp,fp
 2000404:	dfc00117 	ldw	ra,4(sp)
 2000408:	df000017 	ldw	fp,0(sp)
 200040c:	dec00204 	addi	sp,sp,8
 2000410:	f800283a 	ret

02000414 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2000414:	defffe04 	addi	sp,sp,-8
 2000418:	dfc00115 	stw	ra,4(sp)
 200041c:	df000015 	stw	fp,0(sp)
 2000420:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2000424:	01008034 	movhi	r4,512
 2000428:	210a1904 	addi	r4,r4,10340
 200042c:	000b883a 	mov	r5,zero
 2000430:	000d883a 	mov	r6,zero
 2000434:	20005d80 	call	20005d8 <altera_avalon_jtag_uart_init>
 2000438:	01008034 	movhi	r4,512
 200043c:	210a0f04 	addi	r4,r4,10300
 2000440:	20004580 	call	2000458 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 2000444:	e037883a 	mov	sp,fp
 2000448:	dfc00117 	ldw	ra,4(sp)
 200044c:	df000017 	ldw	fp,0(sp)
 2000450:	dec00204 	addi	sp,sp,8
 2000454:	f800283a 	ret

02000458 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2000458:	defffd04 	addi	sp,sp,-12
 200045c:	dfc00215 	stw	ra,8(sp)
 2000460:	df000115 	stw	fp,4(sp)
 2000464:	df000104 	addi	fp,sp,4
 2000468:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200046c:	e13fff17 	ldw	r4,-4(fp)
 2000470:	01408034 	movhi	r5,512
 2000474:	294f9304 	addi	r5,r5,15948
 2000478:	20013a80 	call	20013a8 <alt_dev_llist_insert>
}
 200047c:	e037883a 	mov	sp,fp
 2000480:	dfc00117 	ldw	ra,4(sp)
 2000484:	df000017 	ldw	fp,0(sp)
 2000488:	dec00204 	addi	sp,sp,8
 200048c:	f800283a 	ret

02000490 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2000490:	defffa04 	addi	sp,sp,-24
 2000494:	dfc00515 	stw	ra,20(sp)
 2000498:	df000415 	stw	fp,16(sp)
 200049c:	df000404 	addi	fp,sp,16
 20004a0:	e13ffd15 	stw	r4,-12(fp)
 20004a4:	e17ffe15 	stw	r5,-8(fp)
 20004a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20004ac:	e0bffd17 	ldw	r2,-12(fp)
 20004b0:	10800017 	ldw	r2,0(r2)
 20004b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20004b8:	e0bffc17 	ldw	r2,-16(fp)
 20004bc:	11000a04 	addi	r4,r2,40
 20004c0:	e0bffd17 	ldw	r2,-12(fp)
 20004c4:	11c00217 	ldw	r7,8(r2)
 20004c8:	e17ffe17 	ldw	r5,-8(fp)
 20004cc:	e1bfff17 	ldw	r6,-4(fp)
 20004d0:	2000ad80 	call	2000ad8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20004d4:	e037883a 	mov	sp,fp
 20004d8:	dfc00117 	ldw	ra,4(sp)
 20004dc:	df000017 	ldw	fp,0(sp)
 20004e0:	dec00204 	addi	sp,sp,8
 20004e4:	f800283a 	ret

020004e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20004e8:	defffa04 	addi	sp,sp,-24
 20004ec:	dfc00515 	stw	ra,20(sp)
 20004f0:	df000415 	stw	fp,16(sp)
 20004f4:	df000404 	addi	fp,sp,16
 20004f8:	e13ffd15 	stw	r4,-12(fp)
 20004fc:	e17ffe15 	stw	r5,-8(fp)
 2000500:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2000504:	e0bffd17 	ldw	r2,-12(fp)
 2000508:	10800017 	ldw	r2,0(r2)
 200050c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2000510:	e0bffc17 	ldw	r2,-16(fp)
 2000514:	11000a04 	addi	r4,r2,40
 2000518:	e0bffd17 	ldw	r2,-12(fp)
 200051c:	11c00217 	ldw	r7,8(r2)
 2000520:	e17ffe17 	ldw	r5,-8(fp)
 2000524:	e1bfff17 	ldw	r6,-4(fp)
 2000528:	2000cfc0 	call	2000cfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200052c:	e037883a 	mov	sp,fp
 2000530:	dfc00117 	ldw	ra,4(sp)
 2000534:	df000017 	ldw	fp,0(sp)
 2000538:	dec00204 	addi	sp,sp,8
 200053c:	f800283a 	ret

02000540 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2000540:	defffc04 	addi	sp,sp,-16
 2000544:	dfc00315 	stw	ra,12(sp)
 2000548:	df000215 	stw	fp,8(sp)
 200054c:	df000204 	addi	fp,sp,8
 2000550:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2000554:	e0bfff17 	ldw	r2,-4(fp)
 2000558:	10800017 	ldw	r2,0(r2)
 200055c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2000560:	e0bffe17 	ldw	r2,-8(fp)
 2000564:	11000a04 	addi	r4,r2,40
 2000568:	e0bfff17 	ldw	r2,-4(fp)
 200056c:	11400217 	ldw	r5,8(r2)
 2000570:	20009700 	call	2000970 <altera_avalon_jtag_uart_close>
}
 2000574:	e037883a 	mov	sp,fp
 2000578:	dfc00117 	ldw	ra,4(sp)
 200057c:	df000017 	ldw	fp,0(sp)
 2000580:	dec00204 	addi	sp,sp,8
 2000584:	f800283a 	ret

02000588 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2000588:	defffa04 	addi	sp,sp,-24
 200058c:	dfc00515 	stw	ra,20(sp)
 2000590:	df000415 	stw	fp,16(sp)
 2000594:	df000404 	addi	fp,sp,16
 2000598:	e13ffd15 	stw	r4,-12(fp)
 200059c:	e17ffe15 	stw	r5,-8(fp)
 20005a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20005a4:	e0bffd17 	ldw	r2,-12(fp)
 20005a8:	10800017 	ldw	r2,0(r2)
 20005ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20005b0:	e0bffc17 	ldw	r2,-16(fp)
 20005b4:	11000a04 	addi	r4,r2,40
 20005b8:	e17ffe17 	ldw	r5,-8(fp)
 20005bc:	e1bfff17 	ldw	r6,-4(fp)
 20005c0:	20009e40 	call	20009e4 <altera_avalon_jtag_uart_ioctl>
}
 20005c4:	e037883a 	mov	sp,fp
 20005c8:	dfc00117 	ldw	ra,4(sp)
 20005cc:	df000017 	ldw	fp,0(sp)
 20005d0:	dec00204 	addi	sp,sp,8
 20005d4:	f800283a 	ret

020005d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20005d8:	defffa04 	addi	sp,sp,-24
 20005dc:	dfc00515 	stw	ra,20(sp)
 20005e0:	df000415 	stw	fp,16(sp)
 20005e4:	df000404 	addi	fp,sp,16
 20005e8:	e13ffd15 	stw	r4,-12(fp)
 20005ec:	e17ffe15 	stw	r5,-8(fp)
 20005f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20005f4:	e0fffd17 	ldw	r3,-12(fp)
 20005f8:	00800044 	movi	r2,1
 20005fc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2000600:	e0bffd17 	ldw	r2,-12(fp)
 2000604:	10800017 	ldw	r2,0(r2)
 2000608:	11000104 	addi	r4,r2,4
 200060c:	e0bffd17 	ldw	r2,-12(fp)
 2000610:	10800817 	ldw	r2,32(r2)
 2000614:	1007883a 	mov	r3,r2
 2000618:	2005883a 	mov	r2,r4
 200061c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2000620:	e13ffe17 	ldw	r4,-8(fp)
 2000624:	e17fff17 	ldw	r5,-4(fp)
 2000628:	d8000015 	stw	zero,0(sp)
 200062c:	01808034 	movhi	r6,512
 2000630:	3181a604 	addi	r6,r6,1688
 2000634:	e1fffd17 	ldw	r7,-12(fp)
 2000638:	20015b40 	call	20015b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200063c:	e0bffd17 	ldw	r2,-12(fp)
 2000640:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2000644:	e0bffd17 	ldw	r2,-12(fp)
 2000648:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200064c:	00808034 	movhi	r2,512
 2000650:	10952d04 	addi	r2,r2,21684
 2000654:	10800017 	ldw	r2,0(r2)
 2000658:	100b883a 	mov	r5,r2
 200065c:	01808034 	movhi	r6,512
 2000660:	31823004 	addi	r6,r6,2240
 2000664:	e1fffd17 	ldw	r7,-12(fp)
 2000668:	2000f3c0 	call	2000f3c <alt_alarm_start>
 200066c:	1004403a 	cmpge	r2,r2,zero
 2000670:	1000041e 	bne	r2,zero,2000684 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2000674:	e0fffd17 	ldw	r3,-12(fp)
 2000678:	00a00034 	movhi	r2,32768
 200067c:	10bfffc4 	addi	r2,r2,-1
 2000680:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2000684:	e037883a 	mov	sp,fp
 2000688:	dfc00117 	ldw	ra,4(sp)
 200068c:	df000017 	ldw	fp,0(sp)
 2000690:	dec00204 	addi	sp,sp,8
 2000694:	f800283a 	ret

02000698 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2000698:	defff804 	addi	sp,sp,-32
 200069c:	df000715 	stw	fp,28(sp)
 20006a0:	df000704 	addi	fp,sp,28
 20006a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20006a8:	e0bfff17 	ldw	r2,-4(fp)
 20006ac:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 20006b0:	e0bffe17 	ldw	r2,-8(fp)
 20006b4:	10800017 	ldw	r2,0(r2)
 20006b8:	e0bffd15 	stw	r2,-12(fp)
 20006bc:	00000006 	br	20006c0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20006c0:	e0bffd17 	ldw	r2,-12(fp)
 20006c4:	10800104 	addi	r2,r2,4
 20006c8:	10800037 	ldwio	r2,0(r2)
 20006cc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20006d0:	e0bffc17 	ldw	r2,-16(fp)
 20006d4:	1080c00c 	andi	r2,r2,768
 20006d8:	1005003a 	cmpeq	r2,r2,zero
 20006dc:	1000741e 	bne	r2,zero,20008b0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20006e0:	e0bffc17 	ldw	r2,-16(fp)
 20006e4:	1080400c 	andi	r2,r2,256
 20006e8:	1005003a 	cmpeq	r2,r2,zero
 20006ec:	1000351e 	bne	r2,zero,20007c4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20006f0:	00800074 	movhi	r2,1
 20006f4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20006f8:	e0bffe17 	ldw	r2,-8(fp)
 20006fc:	10800a17 	ldw	r2,40(r2)
 2000700:	10800044 	addi	r2,r2,1
 2000704:	1081ffcc 	andi	r2,r2,2047
 2000708:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 200070c:	e0bffe17 	ldw	r2,-8(fp)
 2000710:	10c00b17 	ldw	r3,44(r2)
 2000714:	e0bffa17 	ldw	r2,-24(fp)
 2000718:	18801626 	beq	r3,r2,2000774 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200071c:	e0bffd17 	ldw	r2,-12(fp)
 2000720:	10800037 	ldwio	r2,0(r2)
 2000724:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2000728:	e0bffb17 	ldw	r2,-20(fp)
 200072c:	10a0000c 	andi	r2,r2,32768
 2000730:	1005003a 	cmpeq	r2,r2,zero
 2000734:	10000f1e 	bne	r2,zero,2000774 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2000738:	e0bffe17 	ldw	r2,-8(fp)
 200073c:	10c00a17 	ldw	r3,40(r2)
 2000740:	e0bffb17 	ldw	r2,-20(fp)
 2000744:	1009883a 	mov	r4,r2
 2000748:	e0bffe17 	ldw	r2,-8(fp)
 200074c:	1885883a 	add	r2,r3,r2
 2000750:	10800e04 	addi	r2,r2,56
 2000754:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000758:	e0bffe17 	ldw	r2,-8(fp)
 200075c:	10800a17 	ldw	r2,40(r2)
 2000760:	10800044 	addi	r2,r2,1
 2000764:	10c1ffcc 	andi	r3,r2,2047
 2000768:	e0bffe17 	ldw	r2,-8(fp)
 200076c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2000770:	003fe106 	br	20006f8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2000774:	e0bffb17 	ldw	r2,-20(fp)
 2000778:	10bfffec 	andhi	r2,r2,65535
 200077c:	1005003a 	cmpeq	r2,r2,zero
 2000780:	1000101e 	bne	r2,zero,20007c4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2000784:	e0bffe17 	ldw	r2,-8(fp)
 2000788:	10c00817 	ldw	r3,32(r2)
 200078c:	00bfff84 	movi	r2,-2
 2000790:	1886703a 	and	r3,r3,r2
 2000794:	e0bffe17 	ldw	r2,-8(fp)
 2000798:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200079c:	e0bffd17 	ldw	r2,-12(fp)
 20007a0:	11000104 	addi	r4,r2,4
 20007a4:	e0bffe17 	ldw	r2,-8(fp)
 20007a8:	10800817 	ldw	r2,32(r2)
 20007ac:	1007883a 	mov	r3,r2
 20007b0:	2005883a 	mov	r2,r4
 20007b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20007b8:	e0bffd17 	ldw	r2,-12(fp)
 20007bc:	10800104 	addi	r2,r2,4
 20007c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20007c4:	e0bffc17 	ldw	r2,-16(fp)
 20007c8:	1080800c 	andi	r2,r2,512
 20007cc:	1005003a 	cmpeq	r2,r2,zero
 20007d0:	103fbb1e 	bne	r2,zero,20006c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20007d4:	e0bffc17 	ldw	r2,-16(fp)
 20007d8:	10bfffec 	andhi	r2,r2,65535
 20007dc:	1004d43a 	srli	r2,r2,16
 20007e0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20007e4:	00001506 	br	200083c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20007e8:	e13ffd17 	ldw	r4,-12(fp)
 20007ec:	e0bffe17 	ldw	r2,-8(fp)
 20007f0:	10c00d17 	ldw	r3,52(r2)
 20007f4:	e0bffe17 	ldw	r2,-8(fp)
 20007f8:	1885883a 	add	r2,r3,r2
 20007fc:	10820e04 	addi	r2,r2,2104
 2000800:	10800003 	ldbu	r2,0(r2)
 2000804:	10c03fcc 	andi	r3,r2,255
 2000808:	18c0201c 	xori	r3,r3,128
 200080c:	18ffe004 	addi	r3,r3,-128
 2000810:	2005883a 	mov	r2,r4
 2000814:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000818:	e0bffe17 	ldw	r2,-8(fp)
 200081c:	10800d17 	ldw	r2,52(r2)
 2000820:	10800044 	addi	r2,r2,1
 2000824:	10c1ffcc 	andi	r3,r2,2047
 2000828:	e0bffe17 	ldw	r2,-8(fp)
 200082c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2000830:	e0bff917 	ldw	r2,-28(fp)
 2000834:	10bfffc4 	addi	r2,r2,-1
 2000838:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200083c:	e0bff917 	ldw	r2,-28(fp)
 2000840:	1005003a 	cmpeq	r2,r2,zero
 2000844:	1000051e 	bne	r2,zero,200085c <altera_avalon_jtag_uart_irq+0x1c4>
 2000848:	e0bffe17 	ldw	r2,-8(fp)
 200084c:	10c00d17 	ldw	r3,52(r2)
 2000850:	e0bffe17 	ldw	r2,-8(fp)
 2000854:	10800c17 	ldw	r2,48(r2)
 2000858:	18bfe31e 	bne	r3,r2,20007e8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200085c:	e0bff917 	ldw	r2,-28(fp)
 2000860:	1005003a 	cmpeq	r2,r2,zero
 2000864:	103f961e 	bne	r2,zero,20006c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2000868:	e0bffe17 	ldw	r2,-8(fp)
 200086c:	10c00817 	ldw	r3,32(r2)
 2000870:	00bfff44 	movi	r2,-3
 2000874:	1886703a 	and	r3,r3,r2
 2000878:	e0bffe17 	ldw	r2,-8(fp)
 200087c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2000880:	e0bffe17 	ldw	r2,-8(fp)
 2000884:	10800017 	ldw	r2,0(r2)
 2000888:	11000104 	addi	r4,r2,4
 200088c:	e0bffe17 	ldw	r2,-8(fp)
 2000890:	10800817 	ldw	r2,32(r2)
 2000894:	1007883a 	mov	r3,r2
 2000898:	2005883a 	mov	r2,r4
 200089c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20008a0:	e0bffd17 	ldw	r2,-12(fp)
 20008a4:	10800104 	addi	r2,r2,4
 20008a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20008ac:	003f8406 	br	20006c0 <altera_avalon_jtag_uart_irq+0x28>
}
 20008b0:	e037883a 	mov	sp,fp
 20008b4:	df000017 	ldw	fp,0(sp)
 20008b8:	dec00104 	addi	sp,sp,4
 20008bc:	f800283a 	ret

020008c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20008c0:	defffc04 	addi	sp,sp,-16
 20008c4:	df000315 	stw	fp,12(sp)
 20008c8:	df000304 	addi	fp,sp,12
 20008cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20008d0:	e0bfff17 	ldw	r2,-4(fp)
 20008d4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20008d8:	e0bffe17 	ldw	r2,-8(fp)
 20008dc:	10800017 	ldw	r2,0(r2)
 20008e0:	10800104 	addi	r2,r2,4
 20008e4:	10800037 	ldwio	r2,0(r2)
 20008e8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20008ec:	e0bffd17 	ldw	r2,-12(fp)
 20008f0:	1081000c 	andi	r2,r2,1024
 20008f4:	1005003a 	cmpeq	r2,r2,zero
 20008f8:	10000c1e 	bne	r2,zero,200092c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20008fc:	e0bffe17 	ldw	r2,-8(fp)
 2000900:	10800017 	ldw	r2,0(r2)
 2000904:	11000104 	addi	r4,r2,4
 2000908:	e0bffe17 	ldw	r2,-8(fp)
 200090c:	10800817 	ldw	r2,32(r2)
 2000910:	10810014 	ori	r2,r2,1024
 2000914:	1007883a 	mov	r3,r2
 2000918:	2005883a 	mov	r2,r4
 200091c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2000920:	e0bffe17 	ldw	r2,-8(fp)
 2000924:	10000915 	stw	zero,36(r2)
 2000928:	00000a06 	br	2000954 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200092c:	e0bffe17 	ldw	r2,-8(fp)
 2000930:	10c00917 	ldw	r3,36(r2)
 2000934:	00a00034 	movhi	r2,32768
 2000938:	10bfff04 	addi	r2,r2,-4
 200093c:	10c00536 	bltu	r2,r3,2000954 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2000940:	e0bffe17 	ldw	r2,-8(fp)
 2000944:	10800917 	ldw	r2,36(r2)
 2000948:	10c00044 	addi	r3,r2,1
 200094c:	e0bffe17 	ldw	r2,-8(fp)
 2000950:	10c00915 	stw	r3,36(r2)
 2000954:	00808034 	movhi	r2,512
 2000958:	10952d04 	addi	r2,r2,21684
 200095c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2000960:	e037883a 	mov	sp,fp
 2000964:	df000017 	ldw	fp,0(sp)
 2000968:	dec00104 	addi	sp,sp,4
 200096c:	f800283a 	ret

02000970 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2000970:	defffc04 	addi	sp,sp,-16
 2000974:	df000315 	stw	fp,12(sp)
 2000978:	df000304 	addi	fp,sp,12
 200097c:	e13ffd15 	stw	r4,-12(fp)
 2000980:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2000984:	00000706 	br	20009a4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2000988:	e0bffe17 	ldw	r2,-8(fp)
 200098c:	1090000c 	andi	r2,r2,16384
 2000990:	1005003a 	cmpeq	r2,r2,zero
 2000994:	1000031e 	bne	r2,zero,20009a4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2000998:	00bffd44 	movi	r2,-11
 200099c:	e0bfff15 	stw	r2,-4(fp)
 20009a0:	00000b06 	br	20009d0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20009a4:	e0bffd17 	ldw	r2,-12(fp)
 20009a8:	10c00d17 	ldw	r3,52(r2)
 20009ac:	e0bffd17 	ldw	r2,-12(fp)
 20009b0:	10800c17 	ldw	r2,48(r2)
 20009b4:	18800526 	beq	r3,r2,20009cc <altera_avalon_jtag_uart_close+0x5c>
 20009b8:	e0bffd17 	ldw	r2,-12(fp)
 20009bc:	10c00917 	ldw	r3,36(r2)
 20009c0:	e0bffd17 	ldw	r2,-12(fp)
 20009c4:	10800117 	ldw	r2,4(r2)
 20009c8:	18bfef36 	bltu	r3,r2,2000988 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20009cc:	e03fff15 	stw	zero,-4(fp)
 20009d0:	e0bfff17 	ldw	r2,-4(fp)
}
 20009d4:	e037883a 	mov	sp,fp
 20009d8:	df000017 	ldw	fp,0(sp)
 20009dc:	dec00104 	addi	sp,sp,4
 20009e0:	f800283a 	ret

020009e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20009e4:	defff804 	addi	sp,sp,-32
 20009e8:	df000715 	stw	fp,28(sp)
 20009ec:	df000704 	addi	fp,sp,28
 20009f0:	e13ffb15 	stw	r4,-20(fp)
 20009f4:	e17ffc15 	stw	r5,-16(fp)
 20009f8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 20009fc:	00bff9c4 	movi	r2,-25
 2000a00:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2000a04:	e0bffc17 	ldw	r2,-16(fp)
 2000a08:	e0bfff15 	stw	r2,-4(fp)
 2000a0c:	e0ffff17 	ldw	r3,-4(fp)
 2000a10:	189a8060 	cmpeqi	r2,r3,27137
 2000a14:	1000041e 	bne	r2,zero,2000a28 <altera_avalon_jtag_uart_ioctl+0x44>
 2000a18:	e0ffff17 	ldw	r3,-4(fp)
 2000a1c:	189a80a0 	cmpeqi	r2,r3,27138
 2000a20:	10001b1e 	bne	r2,zero,2000a90 <altera_avalon_jtag_uart_ioctl+0xac>
 2000a24:	00002706 	br	2000ac4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2000a28:	e0bffb17 	ldw	r2,-20(fp)
 2000a2c:	10c00117 	ldw	r3,4(r2)
 2000a30:	00a00034 	movhi	r2,32768
 2000a34:	10bfffc4 	addi	r2,r2,-1
 2000a38:	18802226 	beq	r3,r2,2000ac4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2000a3c:	e0bffd17 	ldw	r2,-12(fp)
 2000a40:	10800017 	ldw	r2,0(r2)
 2000a44:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2000a48:	e0bff917 	ldw	r2,-28(fp)
 2000a4c:	10800090 	cmplti	r2,r2,2
 2000a50:	1000071e 	bne	r2,zero,2000a70 <altera_avalon_jtag_uart_ioctl+0x8c>
 2000a54:	e0fff917 	ldw	r3,-28(fp)
 2000a58:	00a00034 	movhi	r2,32768
 2000a5c:	10bfffc4 	addi	r2,r2,-1
 2000a60:	18800326 	beq	r3,r2,2000a70 <altera_avalon_jtag_uart_ioctl+0x8c>
 2000a64:	e0bff917 	ldw	r2,-28(fp)
 2000a68:	e0bffe15 	stw	r2,-8(fp)
 2000a6c:	00000306 	br	2000a7c <altera_avalon_jtag_uart_ioctl+0x98>
 2000a70:	00e00034 	movhi	r3,32768
 2000a74:	18ffff84 	addi	r3,r3,-2
 2000a78:	e0fffe15 	stw	r3,-8(fp)
 2000a7c:	e0bffb17 	ldw	r2,-20(fp)
 2000a80:	e0fffe17 	ldw	r3,-8(fp)
 2000a84:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2000a88:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2000a8c:	00000d06 	br	2000ac4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2000a90:	e0bffb17 	ldw	r2,-20(fp)
 2000a94:	10c00117 	ldw	r3,4(r2)
 2000a98:	00a00034 	movhi	r2,32768
 2000a9c:	10bfffc4 	addi	r2,r2,-1
 2000aa0:	18800826 	beq	r3,r2,2000ac4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2000aa4:	e13ffd17 	ldw	r4,-12(fp)
 2000aa8:	e0bffb17 	ldw	r2,-20(fp)
 2000aac:	10c00917 	ldw	r3,36(r2)
 2000ab0:	e0bffb17 	ldw	r2,-20(fp)
 2000ab4:	10800117 	ldw	r2,4(r2)
 2000ab8:	1885803a 	cmpltu	r2,r3,r2
 2000abc:	20800015 	stw	r2,0(r4)
      rc = 0;
 2000ac0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2000ac4:	e0bffa17 	ldw	r2,-24(fp)
}
 2000ac8:	e037883a 	mov	sp,fp
 2000acc:	df000017 	ldw	fp,0(sp)
 2000ad0:	dec00104 	addi	sp,sp,4
 2000ad4:	f800283a 	ret

02000ad8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2000ad8:	defff204 	addi	sp,sp,-56
 2000adc:	dfc00d15 	stw	ra,52(sp)
 2000ae0:	df000c15 	stw	fp,48(sp)
 2000ae4:	df000c04 	addi	fp,sp,48
 2000ae8:	e13ffb15 	stw	r4,-20(fp)
 2000aec:	e17ffc15 	stw	r5,-16(fp)
 2000af0:	e1bffd15 	stw	r6,-12(fp)
 2000af4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2000af8:	e0bffc17 	ldw	r2,-16(fp)
 2000afc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2000b00:	00004806 	br	2000c24 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2000b04:	e0bffb17 	ldw	r2,-20(fp)
 2000b08:	10800a17 	ldw	r2,40(r2)
 2000b0c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2000b10:	e0bffb17 	ldw	r2,-20(fp)
 2000b14:	10800b17 	ldw	r2,44(r2)
 2000b18:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2000b1c:	e0fff717 	ldw	r3,-36(fp)
 2000b20:	e0bff617 	ldw	r2,-40(fp)
 2000b24:	18800536 	bltu	r3,r2,2000b3c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2000b28:	e0bff717 	ldw	r2,-36(fp)
 2000b2c:	e0fff617 	ldw	r3,-40(fp)
 2000b30:	10c5c83a 	sub	r2,r2,r3
 2000b34:	e0bff815 	stw	r2,-32(fp)
 2000b38:	00000406 	br	2000b4c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2000b3c:	00820004 	movi	r2,2048
 2000b40:	e0fff617 	ldw	r3,-40(fp)
 2000b44:	10c5c83a 	sub	r2,r2,r3
 2000b48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2000b4c:	e0bff817 	ldw	r2,-32(fp)
 2000b50:	1005003a 	cmpeq	r2,r2,zero
 2000b54:	10001f1e 	bne	r2,zero,2000bd4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2000b58:	e0fffd17 	ldw	r3,-12(fp)
 2000b5c:	e0bff817 	ldw	r2,-32(fp)
 2000b60:	1880022e 	bgeu	r3,r2,2000b6c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2000b64:	e0bffd17 	ldw	r2,-12(fp)
 2000b68:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2000b6c:	e0bffb17 	ldw	r2,-20(fp)
 2000b70:	10c00e04 	addi	r3,r2,56
 2000b74:	e0bff617 	ldw	r2,-40(fp)
 2000b78:	1887883a 	add	r3,r3,r2
 2000b7c:	e0bffa17 	ldw	r2,-24(fp)
 2000b80:	1009883a 	mov	r4,r2
 2000b84:	180b883a 	mov	r5,r3
 2000b88:	e1bff817 	ldw	r6,-32(fp)
 2000b8c:	20022600 	call	2002260 <memcpy>
      ptr   += n;
 2000b90:	e0fff817 	ldw	r3,-32(fp)
 2000b94:	e0bffa17 	ldw	r2,-24(fp)
 2000b98:	10c5883a 	add	r2,r2,r3
 2000b9c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2000ba0:	e0fffd17 	ldw	r3,-12(fp)
 2000ba4:	e0bff817 	ldw	r2,-32(fp)
 2000ba8:	1885c83a 	sub	r2,r3,r2
 2000bac:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000bb0:	e0fff617 	ldw	r3,-40(fp)
 2000bb4:	e0bff817 	ldw	r2,-32(fp)
 2000bb8:	1885883a 	add	r2,r3,r2
 2000bbc:	10c1ffcc 	andi	r3,r2,2047
 2000bc0:	e0bffb17 	ldw	r2,-20(fp)
 2000bc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2000bc8:	e0bffd17 	ldw	r2,-12(fp)
 2000bcc:	10800048 	cmpgei	r2,r2,1
 2000bd0:	103fcc1e 	bne	r2,zero,2000b04 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2000bd4:	e0fffa17 	ldw	r3,-24(fp)
 2000bd8:	e0bffc17 	ldw	r2,-16(fp)
 2000bdc:	1880141e 	bne	r3,r2,2000c30 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2000be0:	e0bffe17 	ldw	r2,-8(fp)
 2000be4:	1090000c 	andi	r2,r2,16384
 2000be8:	1004c03a 	cmpne	r2,r2,zero
 2000bec:	1000101e 	bne	r2,zero,2000c30 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2000bf0:	e0bffb17 	ldw	r2,-20(fp)
 2000bf4:	10c00a17 	ldw	r3,40(r2)
 2000bf8:	e0bff717 	ldw	r2,-36(fp)
 2000bfc:	1880051e 	bne	r3,r2,2000c14 <altera_avalon_jtag_uart_read+0x13c>
 2000c00:	e0bffb17 	ldw	r2,-20(fp)
 2000c04:	10c00917 	ldw	r3,36(r2)
 2000c08:	e0bffb17 	ldw	r2,-20(fp)
 2000c0c:	10800117 	ldw	r2,4(r2)
 2000c10:	18bff736 	bltu	r3,r2,2000bf0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2000c14:	e0bffb17 	ldw	r2,-20(fp)
 2000c18:	10c00a17 	ldw	r3,40(r2)
 2000c1c:	e0bff717 	ldw	r2,-36(fp)
 2000c20:	18800326 	beq	r3,r2,2000c30 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2000c24:	e0bffd17 	ldw	r2,-12(fp)
 2000c28:	10800048 	cmpgei	r2,r2,1
 2000c2c:	103fb51e 	bne	r2,zero,2000b04 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2000c30:	e0fffa17 	ldw	r3,-24(fp)
 2000c34:	e0bffc17 	ldw	r2,-16(fp)
 2000c38:	18801926 	beq	r3,r2,2000ca0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000c3c:	0005303a 	rdctl	r2,status
 2000c40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000c44:	e0fff517 	ldw	r3,-44(fp)
 2000c48:	00bfff84 	movi	r2,-2
 2000c4c:	1884703a 	and	r2,r3,r2
 2000c50:	1001703a 	wrctl	status,r2
  
  return context;
 2000c54:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2000c58:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2000c5c:	e0bffb17 	ldw	r2,-20(fp)
 2000c60:	10800817 	ldw	r2,32(r2)
 2000c64:	10c00054 	ori	r3,r2,1
 2000c68:	e0bffb17 	ldw	r2,-20(fp)
 2000c6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2000c70:	e0bffb17 	ldw	r2,-20(fp)
 2000c74:	10800017 	ldw	r2,0(r2)
 2000c78:	11000104 	addi	r4,r2,4
 2000c7c:	e0bffb17 	ldw	r2,-20(fp)
 2000c80:	10800817 	ldw	r2,32(r2)
 2000c84:	1007883a 	mov	r3,r2
 2000c88:	2005883a 	mov	r2,r4
 2000c8c:	10c00035 	stwio	r3,0(r2)
 2000c90:	e0bff917 	ldw	r2,-28(fp)
 2000c94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000c98:	e0bff417 	ldw	r2,-48(fp)
 2000c9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2000ca0:	e0fffa17 	ldw	r3,-24(fp)
 2000ca4:	e0bffc17 	ldw	r2,-16(fp)
 2000ca8:	18800526 	beq	r3,r2,2000cc0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2000cac:	e0fffa17 	ldw	r3,-24(fp)
 2000cb0:	e0bffc17 	ldw	r2,-16(fp)
 2000cb4:	1887c83a 	sub	r3,r3,r2
 2000cb8:	e0ffff15 	stw	r3,-4(fp)
 2000cbc:	00000906 	br	2000ce4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2000cc0:	e0bffe17 	ldw	r2,-8(fp)
 2000cc4:	1090000c 	andi	r2,r2,16384
 2000cc8:	1005003a 	cmpeq	r2,r2,zero
 2000ccc:	1000031e 	bne	r2,zero,2000cdc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2000cd0:	00bffd44 	movi	r2,-11
 2000cd4:	e0bfff15 	stw	r2,-4(fp)
 2000cd8:	00000206 	br	2000ce4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2000cdc:	00bffec4 	movi	r2,-5
 2000ce0:	e0bfff15 	stw	r2,-4(fp)
 2000ce4:	e0bfff17 	ldw	r2,-4(fp)
}
 2000ce8:	e037883a 	mov	sp,fp
 2000cec:	dfc00117 	ldw	ra,4(sp)
 2000cf0:	df000017 	ldw	fp,0(sp)
 2000cf4:	dec00204 	addi	sp,sp,8
 2000cf8:	f800283a 	ret

02000cfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2000cfc:	defff204 	addi	sp,sp,-56
 2000d00:	dfc00d15 	stw	ra,52(sp)
 2000d04:	df000c15 	stw	fp,48(sp)
 2000d08:	df000c04 	addi	fp,sp,48
 2000d0c:	e13ffb15 	stw	r4,-20(fp)
 2000d10:	e17ffc15 	stw	r5,-16(fp)
 2000d14:	e1bffd15 	stw	r6,-12(fp)
 2000d18:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2000d1c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2000d20:	e0bffc17 	ldw	r2,-16(fp)
 2000d24:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2000d28:	00003a06 	br	2000e14 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2000d2c:	e0bffb17 	ldw	r2,-20(fp)
 2000d30:	10800c17 	ldw	r2,48(r2)
 2000d34:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 2000d38:	e0bffb17 	ldw	r2,-20(fp)
 2000d3c:	10800d17 	ldw	r2,52(r2)
 2000d40:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2000d44:	e0fffa17 	ldw	r3,-24(fp)
 2000d48:	e0bff917 	ldw	r2,-28(fp)
 2000d4c:	1880062e 	bgeu	r3,r2,2000d68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2000d50:	e0fff917 	ldw	r3,-28(fp)
 2000d54:	e0bffa17 	ldw	r2,-24(fp)
 2000d58:	1885c83a 	sub	r2,r3,r2
 2000d5c:	10bfffc4 	addi	r2,r2,-1
 2000d60:	e0bff815 	stw	r2,-32(fp)
 2000d64:	00000c06 	br	2000d98 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2000d68:	e0bff917 	ldw	r2,-28(fp)
 2000d6c:	1005003a 	cmpeq	r2,r2,zero
 2000d70:	1000051e 	bne	r2,zero,2000d88 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2000d74:	00820004 	movi	r2,2048
 2000d78:	e0fffa17 	ldw	r3,-24(fp)
 2000d7c:	10c5c83a 	sub	r2,r2,r3
 2000d80:	e0bff815 	stw	r2,-32(fp)
 2000d84:	00000406 	br	2000d98 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2000d88:	0081ffc4 	movi	r2,2047
 2000d8c:	e0fffa17 	ldw	r3,-24(fp)
 2000d90:	10c5c83a 	sub	r2,r2,r3
 2000d94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2000d98:	e0bff817 	ldw	r2,-32(fp)
 2000d9c:	1005003a 	cmpeq	r2,r2,zero
 2000da0:	10001f1e 	bne	r2,zero,2000e20 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2000da4:	e0fffd17 	ldw	r3,-12(fp)
 2000da8:	e0bff817 	ldw	r2,-32(fp)
 2000dac:	1880022e 	bgeu	r3,r2,2000db8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2000db0:	e0bffd17 	ldw	r2,-12(fp)
 2000db4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2000db8:	e0bffb17 	ldw	r2,-20(fp)
 2000dbc:	10c20e04 	addi	r3,r2,2104
 2000dc0:	e0bffa17 	ldw	r2,-24(fp)
 2000dc4:	1885883a 	add	r2,r3,r2
 2000dc8:	e0fffc17 	ldw	r3,-16(fp)
 2000dcc:	1009883a 	mov	r4,r2
 2000dd0:	180b883a 	mov	r5,r3
 2000dd4:	e1bff817 	ldw	r6,-32(fp)
 2000dd8:	20022600 	call	2002260 <memcpy>
      ptr   += n;
 2000ddc:	e0fff817 	ldw	r3,-32(fp)
 2000de0:	e0bffc17 	ldw	r2,-16(fp)
 2000de4:	10c5883a 	add	r2,r2,r3
 2000de8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2000dec:	e0fffd17 	ldw	r3,-12(fp)
 2000df0:	e0bff817 	ldw	r2,-32(fp)
 2000df4:	1885c83a 	sub	r2,r3,r2
 2000df8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000dfc:	e0fffa17 	ldw	r3,-24(fp)
 2000e00:	e0bff817 	ldw	r2,-32(fp)
 2000e04:	1885883a 	add	r2,r3,r2
 2000e08:	10c1ffcc 	andi	r3,r2,2047
 2000e0c:	e0bffb17 	ldw	r2,-20(fp)
 2000e10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2000e14:	e0bffd17 	ldw	r2,-12(fp)
 2000e18:	10800048 	cmpgei	r2,r2,1
 2000e1c:	103fc31e 	bne	r2,zero,2000d2c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000e20:	0005303a 	rdctl	r2,status
 2000e24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000e28:	e0fff517 	ldw	r3,-44(fp)
 2000e2c:	00bfff84 	movi	r2,-2
 2000e30:	1884703a 	and	r2,r3,r2
 2000e34:	1001703a 	wrctl	status,r2
  
  return context;
 2000e38:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2000e3c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2000e40:	e0bffb17 	ldw	r2,-20(fp)
 2000e44:	10800817 	ldw	r2,32(r2)
 2000e48:	10c00094 	ori	r3,r2,2
 2000e4c:	e0bffb17 	ldw	r2,-20(fp)
 2000e50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2000e54:	e0bffb17 	ldw	r2,-20(fp)
 2000e58:	10800017 	ldw	r2,0(r2)
 2000e5c:	11000104 	addi	r4,r2,4
 2000e60:	e0bffb17 	ldw	r2,-20(fp)
 2000e64:	10800817 	ldw	r2,32(r2)
 2000e68:	1007883a 	mov	r3,r2
 2000e6c:	2005883a 	mov	r2,r4
 2000e70:	10c00035 	stwio	r3,0(r2)
 2000e74:	e0bff717 	ldw	r2,-36(fp)
 2000e78:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000e7c:	e0bff417 	ldw	r2,-48(fp)
 2000e80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2000e84:	e0bffd17 	ldw	r2,-12(fp)
 2000e88:	10800050 	cmplti	r2,r2,1
 2000e8c:	1000111e 	bne	r2,zero,2000ed4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2000e90:	e0bffe17 	ldw	r2,-8(fp)
 2000e94:	1090000c 	andi	r2,r2,16384
 2000e98:	1004c03a 	cmpne	r2,r2,zero
 2000e9c:	1000101e 	bne	r2,zero,2000ee0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2000ea0:	e0bffb17 	ldw	r2,-20(fp)
 2000ea4:	10c00d17 	ldw	r3,52(r2)
 2000ea8:	e0bff917 	ldw	r2,-28(fp)
 2000eac:	1880051e 	bne	r3,r2,2000ec4 <altera_avalon_jtag_uart_write+0x1c8>
 2000eb0:	e0bffb17 	ldw	r2,-20(fp)
 2000eb4:	10c00917 	ldw	r3,36(r2)
 2000eb8:	e0bffb17 	ldw	r2,-20(fp)
 2000ebc:	10800117 	ldw	r2,4(r2)
 2000ec0:	18bff736 	bltu	r3,r2,2000ea0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2000ec4:	e0bffb17 	ldw	r2,-20(fp)
 2000ec8:	10c00d17 	ldw	r3,52(r2)
 2000ecc:	e0bff917 	ldw	r2,-28(fp)
 2000ed0:	18800326 	beq	r3,r2,2000ee0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 2000ed4:	e0bffd17 	ldw	r2,-12(fp)
 2000ed8:	10800048 	cmpgei	r2,r2,1
 2000edc:	103fcd1e 	bne	r2,zero,2000e14 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2000ee0:	e0fffc17 	ldw	r3,-16(fp)
 2000ee4:	e0bff617 	ldw	r2,-40(fp)
 2000ee8:	18800526 	beq	r3,r2,2000f00 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2000eec:	e0fffc17 	ldw	r3,-16(fp)
 2000ef0:	e0bff617 	ldw	r2,-40(fp)
 2000ef4:	1887c83a 	sub	r3,r3,r2
 2000ef8:	e0ffff15 	stw	r3,-4(fp)
 2000efc:	00000906 	br	2000f24 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2000f00:	e0bffe17 	ldw	r2,-8(fp)
 2000f04:	1090000c 	andi	r2,r2,16384
 2000f08:	1005003a 	cmpeq	r2,r2,zero
 2000f0c:	1000031e 	bne	r2,zero,2000f1c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 2000f10:	00bffd44 	movi	r2,-11
 2000f14:	e0bfff15 	stw	r2,-4(fp)
 2000f18:	00000206 	br	2000f24 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 2000f1c:	00bffec4 	movi	r2,-5
 2000f20:	e0bfff15 	stw	r2,-4(fp)
 2000f24:	e0bfff17 	ldw	r2,-4(fp)
}
 2000f28:	e037883a 	mov	sp,fp
 2000f2c:	dfc00117 	ldw	ra,4(sp)
 2000f30:	df000017 	ldw	fp,0(sp)
 2000f34:	dec00204 	addi	sp,sp,8
 2000f38:	f800283a 	ret

02000f3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2000f3c:	defff404 	addi	sp,sp,-48
 2000f40:	df000b15 	stw	fp,44(sp)
 2000f44:	df000b04 	addi	fp,sp,44
 2000f48:	e13ffb15 	stw	r4,-20(fp)
 2000f4c:	e17ffc15 	stw	r5,-16(fp)
 2000f50:	e1bffd15 	stw	r6,-12(fp)
 2000f54:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2000f58:	e03ff915 	stw	zero,-28(fp)
 2000f5c:	00808034 	movhi	r2,512
 2000f60:	10952d04 	addi	r2,r2,21684
 2000f64:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2000f68:	1005003a 	cmpeq	r2,r2,zero
 2000f6c:	1000411e 	bne	r2,zero,2001074 <alt_alarm_start+0x138>
  {
    if (alarm)
 2000f70:	e0bffb17 	ldw	r2,-20(fp)
 2000f74:	1005003a 	cmpeq	r2,r2,zero
 2000f78:	10003b1e 	bne	r2,zero,2001068 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2000f7c:	e0fffb17 	ldw	r3,-20(fp)
 2000f80:	e0bffd17 	ldw	r2,-12(fp)
 2000f84:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2000f88:	e0fffb17 	ldw	r3,-20(fp)
 2000f8c:	e0bffe17 	ldw	r2,-8(fp)
 2000f90:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000f94:	0005303a 	rdctl	r2,status
 2000f98:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000f9c:	e0fff817 	ldw	r3,-32(fp)
 2000fa0:	00bfff84 	movi	r2,-2
 2000fa4:	1884703a 	and	r2,r3,r2
 2000fa8:	1001703a 	wrctl	status,r2
  
  return context;
 2000fac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2000fb0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2000fb4:	00808034 	movhi	r2,512
 2000fb8:	10952e04 	addi	r2,r2,21688
 2000fbc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2000fc0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2000fc4:	e0fffc17 	ldw	r3,-16(fp)
 2000fc8:	e0bff917 	ldw	r2,-28(fp)
 2000fcc:	1885883a 	add	r2,r3,r2
 2000fd0:	10c00044 	addi	r3,r2,1
 2000fd4:	e0bffb17 	ldw	r2,-20(fp)
 2000fd8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2000fdc:	e0bffb17 	ldw	r2,-20(fp)
 2000fe0:	10c00217 	ldw	r3,8(r2)
 2000fe4:	e0bff917 	ldw	r2,-28(fp)
 2000fe8:	1880042e 	bgeu	r3,r2,2000ffc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2000fec:	e0fffb17 	ldw	r3,-20(fp)
 2000ff0:	00800044 	movi	r2,1
 2000ff4:	18800405 	stb	r2,16(r3)
 2000ff8:	00000206 	br	2001004 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2000ffc:	e0bffb17 	ldw	r2,-20(fp)
 2001000:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2001004:	e0fffb17 	ldw	r3,-20(fp)
 2001008:	00808034 	movhi	r2,512
 200100c:	108f9804 	addi	r2,r2,15968
 2001010:	e0bff615 	stw	r2,-40(fp)
 2001014:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2001018:	e0fff717 	ldw	r3,-36(fp)
 200101c:	e0bff617 	ldw	r2,-40(fp)
 2001020:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2001024:	e0bff617 	ldw	r2,-40(fp)
 2001028:	10c00017 	ldw	r3,0(r2)
 200102c:	e0bff717 	ldw	r2,-36(fp)
 2001030:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2001034:	e0bff617 	ldw	r2,-40(fp)
 2001038:	10c00017 	ldw	r3,0(r2)
 200103c:	e0bff717 	ldw	r2,-36(fp)
 2001040:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2001044:	e0fff617 	ldw	r3,-40(fp)
 2001048:	e0bff717 	ldw	r2,-36(fp)
 200104c:	18800015 	stw	r2,0(r3)
 2001050:	e0bffa17 	ldw	r2,-24(fp)
 2001054:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001058:	e0bff517 	ldw	r2,-44(fp)
 200105c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2001060:	e03fff15 	stw	zero,-4(fp)
 2001064:	00000506 	br	200107c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 2001068:	00bffa84 	movi	r2,-22
 200106c:	e0bfff15 	stw	r2,-4(fp)
 2001070:	00000206 	br	200107c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 2001074:	00bfde84 	movi	r2,-134
 2001078:	e0bfff15 	stw	r2,-4(fp)
 200107c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2001080:	e037883a 	mov	sp,fp
 2001084:	df000017 	ldw	fp,0(sp)
 2001088:	dec00104 	addi	sp,sp,4
 200108c:	f800283a 	ret

02001090 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2001090:	defffa04 	addi	sp,sp,-24
 2001094:	dfc00515 	stw	ra,20(sp)
 2001098:	df000415 	stw	fp,16(sp)
 200109c:	df000404 	addi	fp,sp,16
 20010a0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 20010a4:	008000c4 	movi	r2,3
 20010a8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 20010ac:	e0fffc17 	ldw	r3,-16(fp)
 20010b0:	008003f4 	movhi	r2,15
 20010b4:	10909004 	addi	r2,r2,16960
 20010b8:	188b383a 	mul	r5,r3,r2
 20010bc:	01017db4 	movhi	r4,1526
 20010c0:	21384004 	addi	r4,r4,-7936
 20010c4:	20027980 	call	2002798 <__udivsi3>
 20010c8:	100b883a 	mov	r5,r2
 20010cc:	01200034 	movhi	r4,32768
 20010d0:	213fffc4 	addi	r4,r4,-1
 20010d4:	20027980 	call	2002798 <__udivsi3>
 20010d8:	100b883a 	mov	r5,r2
 20010dc:	e13fff17 	ldw	r4,-4(fp)
 20010e0:	20027980 	call	2002798 <__udivsi3>
 20010e4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 20010e8:	e0bffd17 	ldw	r2,-12(fp)
 20010ec:	1005003a 	cmpeq	r2,r2,zero
 20010f0:	1000281e 	bne	r2,zero,2001194 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 20010f4:	e03ffe15 	stw	zero,-8(fp)
 20010f8:	00001606 	br	2001154 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 20010fc:	00a00034 	movhi	r2,32768
 2001100:	10bfffc4 	addi	r2,r2,-1
 2001104:	10bfffc4 	addi	r2,r2,-1
 2001108:	103ffe1e 	bne	r2,zero,2001104 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200110c:	e0fffc17 	ldw	r3,-16(fp)
 2001110:	008003f4 	movhi	r2,15
 2001114:	10909004 	addi	r2,r2,16960
 2001118:	188b383a 	mul	r5,r3,r2
 200111c:	01017db4 	movhi	r4,1526
 2001120:	21384004 	addi	r4,r4,-7936
 2001124:	20027980 	call	2002798 <__udivsi3>
 2001128:	100b883a 	mov	r5,r2
 200112c:	01200034 	movhi	r4,32768
 2001130:	213fffc4 	addi	r4,r4,-1
 2001134:	20027980 	call	2002798 <__udivsi3>
 2001138:	1007883a 	mov	r3,r2
 200113c:	e0bfff17 	ldw	r2,-4(fp)
 2001140:	10c5c83a 	sub	r2,r2,r3
 2001144:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2001148:	e0bffe17 	ldw	r2,-8(fp)
 200114c:	10800044 	addi	r2,r2,1
 2001150:	e0bffe15 	stw	r2,-8(fp)
 2001154:	e0fffe17 	ldw	r3,-8(fp)
 2001158:	e0bffd17 	ldw	r2,-12(fp)
 200115c:	18bfe716 	blt	r3,r2,20010fc <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2001160:	e0fffc17 	ldw	r3,-16(fp)
 2001164:	008003f4 	movhi	r2,15
 2001168:	10909004 	addi	r2,r2,16960
 200116c:	188b383a 	mul	r5,r3,r2
 2001170:	01017db4 	movhi	r4,1526
 2001174:	21384004 	addi	r4,r4,-7936
 2001178:	20027980 	call	2002798 <__udivsi3>
 200117c:	1007883a 	mov	r3,r2
 2001180:	e0bfff17 	ldw	r2,-4(fp)
 2001184:	1885383a 	mul	r2,r3,r2
 2001188:	10bfffc4 	addi	r2,r2,-1
 200118c:	103ffe1e 	bne	r2,zero,2001188 <alt_busy_sleep+0xf8>
 2001190:	00000c06 	br	20011c4 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2001194:	e0fffc17 	ldw	r3,-16(fp)
 2001198:	008003f4 	movhi	r2,15
 200119c:	10909004 	addi	r2,r2,16960
 20011a0:	188b383a 	mul	r5,r3,r2
 20011a4:	01017db4 	movhi	r4,1526
 20011a8:	21384004 	addi	r4,r4,-7936
 20011ac:	20027980 	call	2002798 <__udivsi3>
 20011b0:	1007883a 	mov	r3,r2
 20011b4:	e0bfff17 	ldw	r2,-4(fp)
 20011b8:	1885383a 	mul	r2,r3,r2
 20011bc:	10bfffc4 	addi	r2,r2,-1
 20011c0:	00bffe16 	blt	zero,r2,20011bc <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 20011c4:	0005883a 	mov	r2,zero
}
 20011c8:	e037883a 	mov	sp,fp
 20011cc:	dfc00117 	ldw	ra,4(sp)
 20011d0:	df000017 	ldw	fp,0(sp)
 20011d4:	dec00204 	addi	sp,sp,8
 20011d8:	f800283a 	ret

020011dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20011dc:	defff804 	addi	sp,sp,-32
 20011e0:	dfc00715 	stw	ra,28(sp)
 20011e4:	df000615 	stw	fp,24(sp)
 20011e8:	df000604 	addi	fp,sp,24
 20011ec:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 20011f0:	e0bffc17 	ldw	r2,-16(fp)
 20011f4:	1004803a 	cmplt	r2,r2,zero
 20011f8:	1000081e 	bne	r2,zero,200121c <close+0x40>
 20011fc:	e0bffc17 	ldw	r2,-16(fp)
 2001200:	10800324 	muli	r2,r2,12
 2001204:	1007883a 	mov	r3,r2
 2001208:	00808034 	movhi	r2,512
 200120c:	108e3104 	addi	r2,r2,14532
 2001210:	1887883a 	add	r3,r3,r2
 2001214:	e0ffff15 	stw	r3,-4(fp)
 2001218:	00000106 	br	2001220 <close+0x44>
 200121c:	e03fff15 	stw	zero,-4(fp)
 2001220:	e0bfff17 	ldw	r2,-4(fp)
 2001224:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2001228:	e0bffb17 	ldw	r2,-20(fp)
 200122c:	1005003a 	cmpeq	r2,r2,zero
 2001230:	10001d1e 	bne	r2,zero,20012a8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2001234:	e0bffb17 	ldw	r2,-20(fp)
 2001238:	10800017 	ldw	r2,0(r2)
 200123c:	10800417 	ldw	r2,16(r2)
 2001240:	1005003a 	cmpeq	r2,r2,zero
 2001244:	1000071e 	bne	r2,zero,2001264 <close+0x88>
 2001248:	e0bffb17 	ldw	r2,-20(fp)
 200124c:	10800017 	ldw	r2,0(r2)
 2001250:	10800417 	ldw	r2,16(r2)
 2001254:	e13ffb17 	ldw	r4,-20(fp)
 2001258:	103ee83a 	callr	r2
 200125c:	e0bffe15 	stw	r2,-8(fp)
 2001260:	00000106 	br	2001268 <close+0x8c>
 2001264:	e03ffe15 	stw	zero,-8(fp)
 2001268:	e0bffe17 	ldw	r2,-8(fp)
 200126c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2001270:	e13ffc17 	ldw	r4,-16(fp)
 2001274:	2001c800 	call	2001c80 <alt_release_fd>
    if (rval < 0)
 2001278:	e0bffa17 	ldw	r2,-24(fp)
 200127c:	1004403a 	cmpge	r2,r2,zero
 2001280:	1000071e 	bne	r2,zero,20012a0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 2001284:	20012d80 	call	20012d8 <alt_get_errno>
 2001288:	e0fffa17 	ldw	r3,-24(fp)
 200128c:	00c7c83a 	sub	r3,zero,r3
 2001290:	10c00015 	stw	r3,0(r2)
      return -1;
 2001294:	00bfffc4 	movi	r2,-1
 2001298:	e0bffd15 	stw	r2,-12(fp)
 200129c:	00000806 	br	20012c0 <close+0xe4>
    }
    return 0;
 20012a0:	e03ffd15 	stw	zero,-12(fp)
 20012a4:	00000606 	br	20012c0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20012a8:	20012d80 	call	20012d8 <alt_get_errno>
 20012ac:	1007883a 	mov	r3,r2
 20012b0:	00801444 	movi	r2,81
 20012b4:	18800015 	stw	r2,0(r3)
    return -1;
 20012b8:	00bfffc4 	movi	r2,-1
 20012bc:	e0bffd15 	stw	r2,-12(fp)
 20012c0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 20012c4:	e037883a 	mov	sp,fp
 20012c8:	dfc00117 	ldw	ra,4(sp)
 20012cc:	df000017 	ldw	fp,0(sp)
 20012d0:	dec00204 	addi	sp,sp,8
 20012d4:	f800283a 	ret

020012d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20012d8:	defffd04 	addi	sp,sp,-12
 20012dc:	dfc00215 	stw	ra,8(sp)
 20012e0:	df000115 	stw	fp,4(sp)
 20012e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20012e8:	00808034 	movhi	r2,512
 20012ec:	108f9604 	addi	r2,r2,15960
 20012f0:	10800017 	ldw	r2,0(r2)
 20012f4:	1005003a 	cmpeq	r2,r2,zero
 20012f8:	1000061e 	bne	r2,zero,2001314 <alt_get_errno+0x3c>
 20012fc:	00808034 	movhi	r2,512
 2001300:	108f9604 	addi	r2,r2,15960
 2001304:	10800017 	ldw	r2,0(r2)
 2001308:	103ee83a 	callr	r2
 200130c:	e0bfff15 	stw	r2,-4(fp)
 2001310:	00000306 	br	2001320 <alt_get_errno+0x48>
 2001314:	00808034 	movhi	r2,512
 2001318:	10952f04 	addi	r2,r2,21692
 200131c:	e0bfff15 	stw	r2,-4(fp)
 2001320:	e0bfff17 	ldw	r2,-4(fp)
}
 2001324:	e037883a 	mov	sp,fp
 2001328:	dfc00117 	ldw	ra,4(sp)
 200132c:	df000017 	ldw	fp,0(sp)
 2001330:	dec00204 	addi	sp,sp,8
 2001334:	f800283a 	ret

02001338 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2001338:	defffe04 	addi	sp,sp,-8
 200133c:	df000115 	stw	fp,4(sp)
 2001340:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2001344:	e03fff15 	stw	zero,-4(fp)
 2001348:	00000506 	br	2001360 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 200134c:	e0bfff17 	ldw	r2,-4(fp)
 2001350:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2001354:	e0bfff17 	ldw	r2,-4(fp)
 2001358:	10800804 	addi	r2,r2,32
 200135c:	e0bfff15 	stw	r2,-4(fp)
 2001360:	e0bfff17 	ldw	r2,-4(fp)
 2001364:	10820030 	cmpltui	r2,r2,2048
 2001368:	103ff81e 	bne	r2,zero,200134c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200136c:	e037883a 	mov	sp,fp
 2001370:	df000017 	ldw	fp,0(sp)
 2001374:	dec00104 	addi	sp,sp,4
 2001378:	f800283a 	ret

0200137c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200137c:	defffc04 	addi	sp,sp,-16
 2001380:	df000315 	stw	fp,12(sp)
 2001384:	df000304 	addi	fp,sp,12
 2001388:	e13ffd15 	stw	r4,-12(fp)
 200138c:	e17ffe15 	stw	r5,-8(fp)
 2001390:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2001394:	e0bfff17 	ldw	r2,-4(fp)
}
 2001398:	e037883a 	mov	sp,fp
 200139c:	df000017 	ldw	fp,0(sp)
 20013a0:	dec00104 	addi	sp,sp,4
 20013a4:	f800283a 	ret

020013a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20013a8:	defff904 	addi	sp,sp,-28
 20013ac:	dfc00615 	stw	ra,24(sp)
 20013b0:	df000515 	stw	fp,20(sp)
 20013b4:	df000504 	addi	fp,sp,20
 20013b8:	e13ffd15 	stw	r4,-12(fp)
 20013bc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20013c0:	e0bffd17 	ldw	r2,-12(fp)
 20013c4:	1005003a 	cmpeq	r2,r2,zero
 20013c8:	1000041e 	bne	r2,zero,20013dc <alt_dev_llist_insert+0x34>
 20013cc:	e0bffd17 	ldw	r2,-12(fp)
 20013d0:	10800217 	ldw	r2,8(r2)
 20013d4:	1004c03a 	cmpne	r2,r2,zero
 20013d8:	1000071e 	bne	r2,zero,20013f8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 20013dc:	200145c0 	call	200145c <alt_get_errno>
 20013e0:	1007883a 	mov	r3,r2
 20013e4:	00800584 	movi	r2,22
 20013e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20013ec:	00bffa84 	movi	r2,-22
 20013f0:	e0bfff15 	stw	r2,-4(fp)
 20013f4:	00001306 	br	2001444 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20013f8:	e0fffd17 	ldw	r3,-12(fp)
 20013fc:	e0bffe17 	ldw	r2,-8(fp)
 2001400:	e0bffb15 	stw	r2,-20(fp)
 2001404:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2001408:	e0fffc17 	ldw	r3,-16(fp)
 200140c:	e0bffb17 	ldw	r2,-20(fp)
 2001410:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2001414:	e0bffb17 	ldw	r2,-20(fp)
 2001418:	10c00017 	ldw	r3,0(r2)
 200141c:	e0bffc17 	ldw	r2,-16(fp)
 2001420:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2001424:	e0bffb17 	ldw	r2,-20(fp)
 2001428:	10c00017 	ldw	r3,0(r2)
 200142c:	e0bffc17 	ldw	r2,-16(fp)
 2001430:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2001434:	e0fffb17 	ldw	r3,-20(fp)
 2001438:	e0bffc17 	ldw	r2,-16(fp)
 200143c:	18800015 	stw	r2,0(r3)

  return 0;  
 2001440:	e03fff15 	stw	zero,-4(fp)
 2001444:	e0bfff17 	ldw	r2,-4(fp)
}
 2001448:	e037883a 	mov	sp,fp
 200144c:	dfc00117 	ldw	ra,4(sp)
 2001450:	df000017 	ldw	fp,0(sp)
 2001454:	dec00204 	addi	sp,sp,8
 2001458:	f800283a 	ret

0200145c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200145c:	defffd04 	addi	sp,sp,-12
 2001460:	dfc00215 	stw	ra,8(sp)
 2001464:	df000115 	stw	fp,4(sp)
 2001468:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200146c:	00808034 	movhi	r2,512
 2001470:	108f9604 	addi	r2,r2,15960
 2001474:	10800017 	ldw	r2,0(r2)
 2001478:	1005003a 	cmpeq	r2,r2,zero
 200147c:	1000061e 	bne	r2,zero,2001498 <alt_get_errno+0x3c>
 2001480:	00808034 	movhi	r2,512
 2001484:	108f9604 	addi	r2,r2,15960
 2001488:	10800017 	ldw	r2,0(r2)
 200148c:	103ee83a 	callr	r2
 2001490:	e0bfff15 	stw	r2,-4(fp)
 2001494:	00000306 	br	20014a4 <alt_get_errno+0x48>
 2001498:	00808034 	movhi	r2,512
 200149c:	10952f04 	addi	r2,r2,21692
 20014a0:	e0bfff15 	stw	r2,-4(fp)
 20014a4:	e0bfff17 	ldw	r2,-4(fp)
}
 20014a8:	e037883a 	mov	sp,fp
 20014ac:	dfc00117 	ldw	ra,4(sp)
 20014b0:	df000017 	ldw	fp,0(sp)
 20014b4:	dec00204 	addi	sp,sp,8
 20014b8:	f800283a 	ret

020014bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20014bc:	defffd04 	addi	sp,sp,-12
 20014c0:	dfc00215 	stw	ra,8(sp)
 20014c4:	df000115 	stw	fp,4(sp)
 20014c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20014cc:	00bfff04 	movi	r2,-4
 20014d0:	00c08034 	movhi	r3,512
 20014d4:	18ca0304 	addi	r3,r3,10252
 20014d8:	1885883a 	add	r2,r3,r2
 20014dc:	e0bfff15 	stw	r2,-4(fp)
 20014e0:	00000606 	br	20014fc <_do_ctors+0x40>
        (*ctor) (); 
 20014e4:	e0bfff17 	ldw	r2,-4(fp)
 20014e8:	10800017 	ldw	r2,0(r2)
 20014ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20014f0:	e0bfff17 	ldw	r2,-4(fp)
 20014f4:	10bfff04 	addi	r2,r2,-4
 20014f8:	e0bfff15 	stw	r2,-4(fp)
 20014fc:	e0ffff17 	ldw	r3,-4(fp)
 2001500:	00808034 	movhi	r2,512
 2001504:	108a0204 	addi	r2,r2,10248
 2001508:	18bff62e 	bgeu	r3,r2,20014e4 <_do_ctors+0x28>
        (*ctor) (); 
}
 200150c:	e037883a 	mov	sp,fp
 2001510:	dfc00117 	ldw	ra,4(sp)
 2001514:	df000017 	ldw	fp,0(sp)
 2001518:	dec00204 	addi	sp,sp,8
 200151c:	f800283a 	ret

02001520 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2001520:	defffd04 	addi	sp,sp,-12
 2001524:	dfc00215 	stw	ra,8(sp)
 2001528:	df000115 	stw	fp,4(sp)
 200152c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2001530:	00bfff04 	movi	r2,-4
 2001534:	00c08034 	movhi	r3,512
 2001538:	18ca0304 	addi	r3,r3,10252
 200153c:	1885883a 	add	r2,r3,r2
 2001540:	e0bfff15 	stw	r2,-4(fp)
 2001544:	00000606 	br	2001560 <_do_dtors+0x40>
        (*dtor) (); 
 2001548:	e0bfff17 	ldw	r2,-4(fp)
 200154c:	10800017 	ldw	r2,0(r2)
 2001550:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2001554:	e0bfff17 	ldw	r2,-4(fp)
 2001558:	10bfff04 	addi	r2,r2,-4
 200155c:	e0bfff15 	stw	r2,-4(fp)
 2001560:	e0ffff17 	ldw	r3,-4(fp)
 2001564:	00808034 	movhi	r2,512
 2001568:	108a0304 	addi	r2,r2,10252
 200156c:	18bff62e 	bgeu	r3,r2,2001548 <_do_dtors+0x28>
        (*dtor) (); 
}
 2001570:	e037883a 	mov	sp,fp
 2001574:	dfc00117 	ldw	ra,4(sp)
 2001578:	df000017 	ldw	fp,0(sp)
 200157c:	dec00204 	addi	sp,sp,8
 2001580:	f800283a 	ret

02001584 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2001584:	defffe04 	addi	sp,sp,-8
 2001588:	dfc00115 	stw	ra,4(sp)
 200158c:	df000015 	stw	fp,0(sp)
 2001590:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2001594:	0009883a 	mov	r4,zero
 2001598:	01440004 	movi	r5,4096
 200159c:	20021100 	call	2002110 <alt_icache_flush>
#endif
}
 20015a0:	e037883a 	mov	sp,fp
 20015a4:	dfc00117 	ldw	ra,4(sp)
 20015a8:	df000017 	ldw	fp,0(sp)
 20015ac:	dec00204 	addi	sp,sp,8
 20015b0:	f800283a 	ret

020015b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20015b4:	defff904 	addi	sp,sp,-28
 20015b8:	dfc00615 	stw	ra,24(sp)
 20015bc:	df000515 	stw	fp,20(sp)
 20015c0:	df000504 	addi	fp,sp,20
 20015c4:	e13ffc15 	stw	r4,-16(fp)
 20015c8:	e17ffd15 	stw	r5,-12(fp)
 20015cc:	e1bffe15 	stw	r6,-8(fp)
 20015d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20015d4:	e0800217 	ldw	r2,8(fp)
 20015d8:	d8800015 	stw	r2,0(sp)
 20015dc:	e13ffc17 	ldw	r4,-16(fp)
 20015e0:	e17ffd17 	ldw	r5,-12(fp)
 20015e4:	e1bffe17 	ldw	r6,-8(fp)
 20015e8:	e1ffff17 	ldw	r7,-4(fp)
 20015ec:	20017880 	call	2001788 <alt_iic_isr_register>
}  
 20015f0:	e037883a 	mov	sp,fp
 20015f4:	dfc00117 	ldw	ra,4(sp)
 20015f8:	df000017 	ldw	fp,0(sp)
 20015fc:	dec00204 	addi	sp,sp,8
 2001600:	f800283a 	ret

02001604 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2001604:	defff904 	addi	sp,sp,-28
 2001608:	df000615 	stw	fp,24(sp)
 200160c:	df000604 	addi	fp,sp,24
 2001610:	e13ffe15 	stw	r4,-8(fp)
 2001614:	e17fff15 	stw	r5,-4(fp)
 2001618:	e0bfff17 	ldw	r2,-4(fp)
 200161c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001620:	0005303a 	rdctl	r2,status
 2001624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001628:	e0fffb17 	ldw	r3,-20(fp)
 200162c:	00bfff84 	movi	r2,-2
 2001630:	1884703a 	and	r2,r3,r2
 2001634:	1001703a 	wrctl	status,r2
  
  return context;
 2001638:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200163c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2001640:	e0fffc17 	ldw	r3,-16(fp)
 2001644:	00800044 	movi	r2,1
 2001648:	10c4983a 	sll	r2,r2,r3
 200164c:	1007883a 	mov	r3,r2
 2001650:	00808034 	movhi	r2,512
 2001654:	10952c04 	addi	r2,r2,21680
 2001658:	10800017 	ldw	r2,0(r2)
 200165c:	1886b03a 	or	r3,r3,r2
 2001660:	00808034 	movhi	r2,512
 2001664:	10952c04 	addi	r2,r2,21680
 2001668:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200166c:	00808034 	movhi	r2,512
 2001670:	10952c04 	addi	r2,r2,21680
 2001674:	10800017 	ldw	r2,0(r2)
 2001678:	100170fa 	wrctl	ienable,r2
 200167c:	e0bffd17 	ldw	r2,-12(fp)
 2001680:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001684:	e0bffa17 	ldw	r2,-24(fp)
 2001688:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200168c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2001690:	e037883a 	mov	sp,fp
 2001694:	df000017 	ldw	fp,0(sp)
 2001698:	dec00104 	addi	sp,sp,4
 200169c:	f800283a 	ret

020016a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20016a0:	defff904 	addi	sp,sp,-28
 20016a4:	df000615 	stw	fp,24(sp)
 20016a8:	df000604 	addi	fp,sp,24
 20016ac:	e13ffe15 	stw	r4,-8(fp)
 20016b0:	e17fff15 	stw	r5,-4(fp)
 20016b4:	e0bfff17 	ldw	r2,-4(fp)
 20016b8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20016bc:	0005303a 	rdctl	r2,status
 20016c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20016c4:	e0fffb17 	ldw	r3,-20(fp)
 20016c8:	00bfff84 	movi	r2,-2
 20016cc:	1884703a 	and	r2,r3,r2
 20016d0:	1001703a 	wrctl	status,r2
  
  return context;
 20016d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20016d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 20016dc:	e0fffc17 	ldw	r3,-16(fp)
 20016e0:	00800044 	movi	r2,1
 20016e4:	10c4983a 	sll	r2,r2,r3
 20016e8:	0084303a 	nor	r2,zero,r2
 20016ec:	1007883a 	mov	r3,r2
 20016f0:	00808034 	movhi	r2,512
 20016f4:	10952c04 	addi	r2,r2,21680
 20016f8:	10800017 	ldw	r2,0(r2)
 20016fc:	1886703a 	and	r3,r3,r2
 2001700:	00808034 	movhi	r2,512
 2001704:	10952c04 	addi	r2,r2,21680
 2001708:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200170c:	00808034 	movhi	r2,512
 2001710:	10952c04 	addi	r2,r2,21680
 2001714:	10800017 	ldw	r2,0(r2)
 2001718:	100170fa 	wrctl	ienable,r2
 200171c:	e0bffd17 	ldw	r2,-12(fp)
 2001720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001724:	e0bffa17 	ldw	r2,-24(fp)
 2001728:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200172c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2001730:	e037883a 	mov	sp,fp
 2001734:	df000017 	ldw	fp,0(sp)
 2001738:	dec00104 	addi	sp,sp,4
 200173c:	f800283a 	ret

02001740 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2001740:	defffc04 	addi	sp,sp,-16
 2001744:	df000315 	stw	fp,12(sp)
 2001748:	df000304 	addi	fp,sp,12
 200174c:	e13ffe15 	stw	r4,-8(fp)
 2001750:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2001754:	000530fa 	rdctl	r2,ienable
 2001758:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200175c:	e0ffff17 	ldw	r3,-4(fp)
 2001760:	00800044 	movi	r2,1
 2001764:	10c4983a 	sll	r2,r2,r3
 2001768:	1007883a 	mov	r3,r2
 200176c:	e0bffd17 	ldw	r2,-12(fp)
 2001770:	1884703a 	and	r2,r3,r2
 2001774:	1004c03a 	cmpne	r2,r2,zero
}
 2001778:	e037883a 	mov	sp,fp
 200177c:	df000017 	ldw	fp,0(sp)
 2001780:	dec00104 	addi	sp,sp,4
 2001784:	f800283a 	ret

02001788 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2001788:	defff404 	addi	sp,sp,-48
 200178c:	dfc00b15 	stw	ra,44(sp)
 2001790:	df000a15 	stw	fp,40(sp)
 2001794:	df000a04 	addi	fp,sp,40
 2001798:	e13ffb15 	stw	r4,-20(fp)
 200179c:	e17ffc15 	stw	r5,-16(fp)
 20017a0:	e1bffd15 	stw	r6,-12(fp)
 20017a4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 20017a8:	00bffa84 	movi	r2,-22
 20017ac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 20017b0:	e0bffc17 	ldw	r2,-16(fp)
 20017b4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 20017b8:	e0bff917 	ldw	r2,-28(fp)
 20017bc:	10800808 	cmpgei	r2,r2,32
 20017c0:	1000291e 	bne	r2,zero,2001868 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20017c4:	0005303a 	rdctl	r2,status
 20017c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20017cc:	e0fff717 	ldw	r3,-36(fp)
 20017d0:	00bfff84 	movi	r2,-2
 20017d4:	1884703a 	and	r2,r3,r2
 20017d8:	1001703a 	wrctl	status,r2
  
  return context;
 20017dc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20017e0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 20017e4:	e0bff917 	ldw	r2,-28(fp)
 20017e8:	00c08034 	movhi	r3,512
 20017ec:	18d53004 	addi	r3,r3,21696
 20017f0:	100490fa 	slli	r2,r2,3
 20017f4:	10c7883a 	add	r3,r2,r3
 20017f8:	e0bffd17 	ldw	r2,-12(fp)
 20017fc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2001800:	e0bff917 	ldw	r2,-28(fp)
 2001804:	00c08034 	movhi	r3,512
 2001808:	18d53004 	addi	r3,r3,21696
 200180c:	100490fa 	slli	r2,r2,3
 2001810:	10c5883a 	add	r2,r2,r3
 2001814:	10c00104 	addi	r3,r2,4
 2001818:	e0bffe17 	ldw	r2,-8(fp)
 200181c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2001820:	e0bffd17 	ldw	r2,-12(fp)
 2001824:	1005003a 	cmpeq	r2,r2,zero
 2001828:	1000051e 	bne	r2,zero,2001840 <alt_iic_isr_register+0xb8>
 200182c:	e17ff917 	ldw	r5,-28(fp)
 2001830:	e13ffb17 	ldw	r4,-20(fp)
 2001834:	20016040 	call	2001604 <alt_ic_irq_enable>
 2001838:	e0bfff15 	stw	r2,-4(fp)
 200183c:	00000406 	br	2001850 <alt_iic_isr_register+0xc8>
 2001840:	e17ff917 	ldw	r5,-28(fp)
 2001844:	e13ffb17 	ldw	r4,-20(fp)
 2001848:	20016a00 	call	20016a0 <alt_ic_irq_disable>
 200184c:	e0bfff15 	stw	r2,-4(fp)
 2001850:	e0bfff17 	ldw	r2,-4(fp)
 2001854:	e0bffa15 	stw	r2,-24(fp)
 2001858:	e0bff817 	ldw	r2,-32(fp)
 200185c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001860:	e0bff617 	ldw	r2,-40(fp)
 2001864:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2001868:	e0bffa17 	ldw	r2,-24(fp)
}
 200186c:	e037883a 	mov	sp,fp
 2001870:	dfc00117 	ldw	ra,4(sp)
 2001874:	df000017 	ldw	fp,0(sp)
 2001878:	dec00204 	addi	sp,sp,8
 200187c:	f800283a 	ret

02001880 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2001880:	defff904 	addi	sp,sp,-28
 2001884:	dfc00615 	stw	ra,24(sp)
 2001888:	df000515 	stw	fp,20(sp)
 200188c:	df000504 	addi	fp,sp,20
 2001890:	e13ffc15 	stw	r4,-16(fp)
 2001894:	e17ffd15 	stw	r5,-12(fp)
 2001898:	e1bffe15 	stw	r6,-8(fp)
 200189c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 20018a0:	e13ffd17 	ldw	r4,-12(fp)
 20018a4:	e17ffe17 	ldw	r5,-8(fp)
 20018a8:	e1bfff17 	ldw	r6,-4(fp)
 20018ac:	2001a980 	call	2001a98 <open>
 20018b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20018b4:	e0bffb17 	ldw	r2,-20(fp)
 20018b8:	1004803a 	cmplt	r2,r2,zero
 20018bc:	10001c1e 	bne	r2,zero,2001930 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 20018c0:	e0bffb17 	ldw	r2,-20(fp)
 20018c4:	00c08034 	movhi	r3,512
 20018c8:	18ce3104 	addi	r3,r3,14532
 20018cc:	10800324 	muli	r2,r2,12
 20018d0:	10c5883a 	add	r2,r2,r3
 20018d4:	10c00017 	ldw	r3,0(r2)
 20018d8:	e0bffc17 	ldw	r2,-16(fp)
 20018dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20018e0:	e0bffb17 	ldw	r2,-20(fp)
 20018e4:	00c08034 	movhi	r3,512
 20018e8:	18ce3104 	addi	r3,r3,14532
 20018ec:	10800324 	muli	r2,r2,12
 20018f0:	10c5883a 	add	r2,r2,r3
 20018f4:	10800104 	addi	r2,r2,4
 20018f8:	10c00017 	ldw	r3,0(r2)
 20018fc:	e0bffc17 	ldw	r2,-16(fp)
 2001900:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2001904:	e0bffb17 	ldw	r2,-20(fp)
 2001908:	00c08034 	movhi	r3,512
 200190c:	18ce3104 	addi	r3,r3,14532
 2001910:	10800324 	muli	r2,r2,12
 2001914:	10c5883a 	add	r2,r2,r3
 2001918:	10800204 	addi	r2,r2,8
 200191c:	10c00017 	ldw	r3,0(r2)
 2001920:	e0bffc17 	ldw	r2,-16(fp)
 2001924:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2001928:	e13ffb17 	ldw	r4,-20(fp)
 200192c:	2001c800 	call	2001c80 <alt_release_fd>
  }
} 
 2001930:	e037883a 	mov	sp,fp
 2001934:	dfc00117 	ldw	ra,4(sp)
 2001938:	df000017 	ldw	fp,0(sp)
 200193c:	dec00204 	addi	sp,sp,8
 2001940:	f800283a 	ret

02001944 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2001944:	defffb04 	addi	sp,sp,-20
 2001948:	dfc00415 	stw	ra,16(sp)
 200194c:	df000315 	stw	fp,12(sp)
 2001950:	df000304 	addi	fp,sp,12
 2001954:	e13ffd15 	stw	r4,-12(fp)
 2001958:	e17ffe15 	stw	r5,-8(fp)
 200195c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2001960:	01008034 	movhi	r4,512
 2001964:	210e3404 	addi	r4,r4,14544
 2001968:	e17ffd17 	ldw	r5,-12(fp)
 200196c:	01800044 	movi	r6,1
 2001970:	01c07fc4 	movi	r7,511
 2001974:	20018800 	call	2001880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2001978:	01008034 	movhi	r4,512
 200197c:	210e3104 	addi	r4,r4,14532
 2001980:	e17ffe17 	ldw	r5,-8(fp)
 2001984:	000d883a 	mov	r6,zero
 2001988:	01c07fc4 	movi	r7,511
 200198c:	20018800 	call	2001880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2001990:	01008034 	movhi	r4,512
 2001994:	210e3704 	addi	r4,r4,14556
 2001998:	e17fff17 	ldw	r5,-4(fp)
 200199c:	01800044 	movi	r6,1
 20019a0:	01c07fc4 	movi	r7,511
 20019a4:	20018800 	call	2001880 <alt_open_fd>
}  
 20019a8:	e037883a 	mov	sp,fp
 20019ac:	dfc00117 	ldw	ra,4(sp)
 20019b0:	df000017 	ldw	fp,0(sp)
 20019b4:	dec00204 	addi	sp,sp,8
 20019b8:	f800283a 	ret

020019bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 20019bc:	defffc04 	addi	sp,sp,-16
 20019c0:	df000315 	stw	fp,12(sp)
 20019c4:	df000304 	addi	fp,sp,12
 20019c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 20019cc:	e0bffe17 	ldw	r2,-8(fp)
 20019d0:	10800217 	ldw	r2,8(r2)
 20019d4:	10d00034 	orhi	r3,r2,16384
 20019d8:	e0bffe17 	ldw	r2,-8(fp)
 20019dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20019e0:	e03ffd15 	stw	zero,-12(fp)
 20019e4:	00002006 	br	2001a68 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20019e8:	e0bffd17 	ldw	r2,-12(fp)
 20019ec:	00c08034 	movhi	r3,512
 20019f0:	18ce3104 	addi	r3,r3,14532
 20019f4:	10800324 	muli	r2,r2,12
 20019f8:	10c5883a 	add	r2,r2,r3
 20019fc:	10c00017 	ldw	r3,0(r2)
 2001a00:	e0bffe17 	ldw	r2,-8(fp)
 2001a04:	10800017 	ldw	r2,0(r2)
 2001a08:	1880141e 	bne	r3,r2,2001a5c <alt_file_locked+0xa0>
 2001a0c:	e0bffd17 	ldw	r2,-12(fp)
 2001a10:	00c08034 	movhi	r3,512
 2001a14:	18ce3104 	addi	r3,r3,14532
 2001a18:	10800324 	muli	r2,r2,12
 2001a1c:	10c5883a 	add	r2,r2,r3
 2001a20:	10800204 	addi	r2,r2,8
 2001a24:	10800017 	ldw	r2,0(r2)
 2001a28:	1004403a 	cmpge	r2,r2,zero
 2001a2c:	10000b1e 	bne	r2,zero,2001a5c <alt_file_locked+0xa0>
 2001a30:	e0bffd17 	ldw	r2,-12(fp)
 2001a34:	10800324 	muli	r2,r2,12
 2001a38:	1007883a 	mov	r3,r2
 2001a3c:	00808034 	movhi	r2,512
 2001a40:	108e3104 	addi	r2,r2,14532
 2001a44:	1887883a 	add	r3,r3,r2
 2001a48:	e0bffe17 	ldw	r2,-8(fp)
 2001a4c:	18800326 	beq	r3,r2,2001a5c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2001a50:	00bffcc4 	movi	r2,-13
 2001a54:	e0bfff15 	stw	r2,-4(fp)
 2001a58:	00000a06 	br	2001a84 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2001a5c:	e0bffd17 	ldw	r2,-12(fp)
 2001a60:	10800044 	addi	r2,r2,1
 2001a64:	e0bffd15 	stw	r2,-12(fp)
 2001a68:	00808034 	movhi	r2,512
 2001a6c:	108f9504 	addi	r2,r2,15956
 2001a70:	10800017 	ldw	r2,0(r2)
 2001a74:	1007883a 	mov	r3,r2
 2001a78:	e0bffd17 	ldw	r2,-12(fp)
 2001a7c:	18bfda2e 	bgeu	r3,r2,20019e8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2001a80:	e03fff15 	stw	zero,-4(fp)
 2001a84:	e0bfff17 	ldw	r2,-4(fp)
}
 2001a88:	e037883a 	mov	sp,fp
 2001a8c:	df000017 	ldw	fp,0(sp)
 2001a90:	dec00104 	addi	sp,sp,4
 2001a94:	f800283a 	ret

02001a98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2001a98:	defff404 	addi	sp,sp,-48
 2001a9c:	dfc00b15 	stw	ra,44(sp)
 2001aa0:	df000a15 	stw	fp,40(sp)
 2001aa4:	df000a04 	addi	fp,sp,40
 2001aa8:	e13ffb15 	stw	r4,-20(fp)
 2001aac:	e17ffc15 	stw	r5,-16(fp)
 2001ab0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2001ab4:	00bfffc4 	movi	r2,-1
 2001ab8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2001abc:	00bffb44 	movi	r2,-19
 2001ac0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2001ac4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2001ac8:	e13ffb17 	ldw	r4,-20(fp)
 2001acc:	01408034 	movhi	r5,512
 2001ad0:	294f9304 	addi	r5,r5,15948
 2001ad4:	2001ea40 	call	2001ea4 <alt_find_dev>
 2001ad8:	e0bffa15 	stw	r2,-24(fp)
 2001adc:	e0bffa17 	ldw	r2,-24(fp)
 2001ae0:	1004c03a 	cmpne	r2,r2,zero
 2001ae4:	1000051e 	bne	r2,zero,2001afc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2001ae8:	e13ffb17 	ldw	r4,-20(fp)
 2001aec:	2001f380 	call	2001f38 <alt_find_file>
 2001af0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2001af4:	00800044 	movi	r2,1
 2001af8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2001afc:	e0bffa17 	ldw	r2,-24(fp)
 2001b00:	1005003a 	cmpeq	r2,r2,zero
 2001b04:	1000301e 	bne	r2,zero,2001bc8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2001b08:	e13ffa17 	ldw	r4,-24(fp)
 2001b0c:	20020580 	call	2002058 <alt_get_fd>
 2001b10:	e0bff815 	stw	r2,-32(fp)
 2001b14:	e0bff817 	ldw	r2,-32(fp)
 2001b18:	1004403a 	cmpge	r2,r2,zero
 2001b1c:	1000031e 	bne	r2,zero,2001b2c <open+0x94>
    {
      status = index;
 2001b20:	e0bff817 	ldw	r2,-32(fp)
 2001b24:	e0bff715 	stw	r2,-36(fp)
 2001b28:	00002906 	br	2001bd0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 2001b2c:	e0bff817 	ldw	r2,-32(fp)
 2001b30:	10800324 	muli	r2,r2,12
 2001b34:	1007883a 	mov	r3,r2
 2001b38:	00808034 	movhi	r2,512
 2001b3c:	108e3104 	addi	r2,r2,14532
 2001b40:	1885883a 	add	r2,r3,r2
 2001b44:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2001b48:	e0fffc17 	ldw	r3,-16(fp)
 2001b4c:	00900034 	movhi	r2,16384
 2001b50:	10bfffc4 	addi	r2,r2,-1
 2001b54:	1886703a 	and	r3,r3,r2
 2001b58:	e0bff917 	ldw	r2,-28(fp)
 2001b5c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2001b60:	e0bff617 	ldw	r2,-40(fp)
 2001b64:	1004c03a 	cmpne	r2,r2,zero
 2001b68:	1000061e 	bne	r2,zero,2001b84 <open+0xec>
 2001b6c:	e13ff917 	ldw	r4,-28(fp)
 2001b70:	20019bc0 	call	20019bc <alt_file_locked>
 2001b74:	e0bff715 	stw	r2,-36(fp)
 2001b78:	e0bff717 	ldw	r2,-36(fp)
 2001b7c:	1004803a 	cmplt	r2,r2,zero
 2001b80:	1000131e 	bne	r2,zero,2001bd0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2001b84:	e0bffa17 	ldw	r2,-24(fp)
 2001b88:	10800317 	ldw	r2,12(r2)
 2001b8c:	1005003a 	cmpeq	r2,r2,zero
 2001b90:	1000091e 	bne	r2,zero,2001bb8 <open+0x120>
 2001b94:	e0bffa17 	ldw	r2,-24(fp)
 2001b98:	10800317 	ldw	r2,12(r2)
 2001b9c:	e13ff917 	ldw	r4,-28(fp)
 2001ba0:	e17ffb17 	ldw	r5,-20(fp)
 2001ba4:	e1bffc17 	ldw	r6,-16(fp)
 2001ba8:	e1fffd17 	ldw	r7,-12(fp)
 2001bac:	103ee83a 	callr	r2
 2001bb0:	e0bfff15 	stw	r2,-4(fp)
 2001bb4:	00000106 	br	2001bbc <open+0x124>
 2001bb8:	e03fff15 	stw	zero,-4(fp)
 2001bbc:	e0bfff17 	ldw	r2,-4(fp)
 2001bc0:	e0bff715 	stw	r2,-36(fp)
 2001bc4:	00000206 	br	2001bd0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2001bc8:	00bffb44 	movi	r2,-19
 2001bcc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2001bd0:	e0bff717 	ldw	r2,-36(fp)
 2001bd4:	1004403a 	cmpge	r2,r2,zero
 2001bd8:	1000091e 	bne	r2,zero,2001c00 <open+0x168>
  {
    alt_release_fd (index);  
 2001bdc:	e13ff817 	ldw	r4,-32(fp)
 2001be0:	2001c800 	call	2001c80 <alt_release_fd>
    ALT_ERRNO = -status;
 2001be4:	2001c200 	call	2001c20 <alt_get_errno>
 2001be8:	e0fff717 	ldw	r3,-36(fp)
 2001bec:	00c7c83a 	sub	r3,zero,r3
 2001bf0:	10c00015 	stw	r3,0(r2)
    return -1;
 2001bf4:	00bfffc4 	movi	r2,-1
 2001bf8:	e0bffe15 	stw	r2,-8(fp)
 2001bfc:	00000206 	br	2001c08 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 2001c00:	e0bff817 	ldw	r2,-32(fp)
 2001c04:	e0bffe15 	stw	r2,-8(fp)
 2001c08:	e0bffe17 	ldw	r2,-8(fp)
}
 2001c0c:	e037883a 	mov	sp,fp
 2001c10:	dfc00117 	ldw	ra,4(sp)
 2001c14:	df000017 	ldw	fp,0(sp)
 2001c18:	dec00204 	addi	sp,sp,8
 2001c1c:	f800283a 	ret

02001c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2001c20:	defffd04 	addi	sp,sp,-12
 2001c24:	dfc00215 	stw	ra,8(sp)
 2001c28:	df000115 	stw	fp,4(sp)
 2001c2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2001c30:	00808034 	movhi	r2,512
 2001c34:	108f9604 	addi	r2,r2,15960
 2001c38:	10800017 	ldw	r2,0(r2)
 2001c3c:	1005003a 	cmpeq	r2,r2,zero
 2001c40:	1000061e 	bne	r2,zero,2001c5c <alt_get_errno+0x3c>
 2001c44:	00808034 	movhi	r2,512
 2001c48:	108f9604 	addi	r2,r2,15960
 2001c4c:	10800017 	ldw	r2,0(r2)
 2001c50:	103ee83a 	callr	r2
 2001c54:	e0bfff15 	stw	r2,-4(fp)
 2001c58:	00000306 	br	2001c68 <alt_get_errno+0x48>
 2001c5c:	00808034 	movhi	r2,512
 2001c60:	10952f04 	addi	r2,r2,21692
 2001c64:	e0bfff15 	stw	r2,-4(fp)
 2001c68:	e0bfff17 	ldw	r2,-4(fp)
}
 2001c6c:	e037883a 	mov	sp,fp
 2001c70:	dfc00117 	ldw	ra,4(sp)
 2001c74:	df000017 	ldw	fp,0(sp)
 2001c78:	dec00204 	addi	sp,sp,8
 2001c7c:	f800283a 	ret

02001c80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2001c80:	defffe04 	addi	sp,sp,-8
 2001c84:	df000115 	stw	fp,4(sp)
 2001c88:	df000104 	addi	fp,sp,4
 2001c8c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2001c90:	e0bfff17 	ldw	r2,-4(fp)
 2001c94:	108000d0 	cmplti	r2,r2,3
 2001c98:	10000d1e 	bne	r2,zero,2001cd0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2001c9c:	e0bfff17 	ldw	r2,-4(fp)
 2001ca0:	00c08034 	movhi	r3,512
 2001ca4:	18ce3104 	addi	r3,r3,14532
 2001ca8:	10800324 	muli	r2,r2,12
 2001cac:	10c5883a 	add	r2,r2,r3
 2001cb0:	10800204 	addi	r2,r2,8
 2001cb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2001cb8:	e0bfff17 	ldw	r2,-4(fp)
 2001cbc:	00c08034 	movhi	r3,512
 2001cc0:	18ce3104 	addi	r3,r3,14532
 2001cc4:	10800324 	muli	r2,r2,12
 2001cc8:	10c5883a 	add	r2,r2,r3
 2001ccc:	10000015 	stw	zero,0(r2)
  }
}
 2001cd0:	e037883a 	mov	sp,fp
 2001cd4:	df000017 	ldw	fp,0(sp)
 2001cd8:	dec00104 	addi	sp,sp,4
 2001cdc:	f800283a 	ret

02001ce0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2001ce0:	defffa04 	addi	sp,sp,-24
 2001ce4:	df000515 	stw	fp,20(sp)
 2001ce8:	df000504 	addi	fp,sp,20
 2001cec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001cf0:	0005303a 	rdctl	r2,status
 2001cf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001cf8:	e0fffd17 	ldw	r3,-12(fp)
 2001cfc:	00bfff84 	movi	r2,-2
 2001d00:	1884703a 	and	r2,r3,r2
 2001d04:	1001703a 	wrctl	status,r2
  
  return context;
 2001d08:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2001d0c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2001d10:	e0bfff17 	ldw	r2,-4(fp)
 2001d14:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2001d18:	e0bffc17 	ldw	r2,-16(fp)
 2001d1c:	10c00017 	ldw	r3,0(r2)
 2001d20:	e0bffc17 	ldw	r2,-16(fp)
 2001d24:	10800117 	ldw	r2,4(r2)
 2001d28:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2001d2c:	e0bffc17 	ldw	r2,-16(fp)
 2001d30:	10c00117 	ldw	r3,4(r2)
 2001d34:	e0bffc17 	ldw	r2,-16(fp)
 2001d38:	10800017 	ldw	r2,0(r2)
 2001d3c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2001d40:	e0fffc17 	ldw	r3,-16(fp)
 2001d44:	e0bffc17 	ldw	r2,-16(fp)
 2001d48:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2001d4c:	e0fffc17 	ldw	r3,-16(fp)
 2001d50:	e0bffc17 	ldw	r2,-16(fp)
 2001d54:	18800015 	stw	r2,0(r3)
 2001d58:	e0bffe17 	ldw	r2,-8(fp)
 2001d5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001d60:	e0bffb17 	ldw	r2,-20(fp)
 2001d64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2001d68:	e037883a 	mov	sp,fp
 2001d6c:	df000017 	ldw	fp,0(sp)
 2001d70:	dec00104 	addi	sp,sp,4
 2001d74:	f800283a 	ret

02001d78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2001d78:	defffb04 	addi	sp,sp,-20
 2001d7c:	dfc00415 	stw	ra,16(sp)
 2001d80:	df000315 	stw	fp,12(sp)
 2001d84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2001d88:	d0a00717 	ldw	r2,-32740(gp)
 2001d8c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2001d90:	d0a59d17 	ldw	r2,-27020(gp)
 2001d94:	10800044 	addi	r2,r2,1
 2001d98:	d0a59d15 	stw	r2,-27020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2001d9c:	00003106 	br	2001e64 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2001da0:	e0bffe17 	ldw	r2,-8(fp)
 2001da4:	10800017 	ldw	r2,0(r2)
 2001da8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2001dac:	e0bffe17 	ldw	r2,-8(fp)
 2001db0:	10800403 	ldbu	r2,16(r2)
 2001db4:	10803fcc 	andi	r2,r2,255
 2001db8:	1005003a 	cmpeq	r2,r2,zero
 2001dbc:	1000051e 	bne	r2,zero,2001dd4 <alt_tick+0x5c>
 2001dc0:	d0a59d17 	ldw	r2,-27020(gp)
 2001dc4:	1004c03a 	cmpne	r2,r2,zero
 2001dc8:	1000021e 	bne	r2,zero,2001dd4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2001dcc:	e0bffe17 	ldw	r2,-8(fp)
 2001dd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2001dd4:	e0bffe17 	ldw	r2,-8(fp)
 2001dd8:	10c00217 	ldw	r3,8(r2)
 2001ddc:	d0a59d17 	ldw	r2,-27020(gp)
 2001de0:	10c01e36 	bltu	r2,r3,2001e5c <alt_tick+0xe4>
 2001de4:	e0bffe17 	ldw	r2,-8(fp)
 2001de8:	10800403 	ldbu	r2,16(r2)
 2001dec:	10803fcc 	andi	r2,r2,255
 2001df0:	1004c03a 	cmpne	r2,r2,zero
 2001df4:	1000191e 	bne	r2,zero,2001e5c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2001df8:	e0bffe17 	ldw	r2,-8(fp)
 2001dfc:	10c00317 	ldw	r3,12(r2)
 2001e00:	e0bffe17 	ldw	r2,-8(fp)
 2001e04:	11000517 	ldw	r4,20(r2)
 2001e08:	183ee83a 	callr	r3
 2001e0c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2001e10:	e0bffd17 	ldw	r2,-12(fp)
 2001e14:	1004c03a 	cmpne	r2,r2,zero
 2001e18:	1000031e 	bne	r2,zero,2001e28 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2001e1c:	e13ffe17 	ldw	r4,-8(fp)
 2001e20:	2001ce00 	call	2001ce0 <alt_alarm_stop>
 2001e24:	00000d06 	br	2001e5c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2001e28:	e0bffe17 	ldw	r2,-8(fp)
 2001e2c:	10c00217 	ldw	r3,8(r2)
 2001e30:	e0bffd17 	ldw	r2,-12(fp)
 2001e34:	1887883a 	add	r3,r3,r2
 2001e38:	e0bffe17 	ldw	r2,-8(fp)
 2001e3c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2001e40:	e0bffe17 	ldw	r2,-8(fp)
 2001e44:	10c00217 	ldw	r3,8(r2)
 2001e48:	d0a59d17 	ldw	r2,-27020(gp)
 2001e4c:	1880032e 	bgeu	r3,r2,2001e5c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2001e50:	e0fffe17 	ldw	r3,-8(fp)
 2001e54:	00800044 	movi	r2,1
 2001e58:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2001e5c:	e0bfff17 	ldw	r2,-4(fp)
 2001e60:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2001e64:	d0e00704 	addi	r3,gp,-32740
 2001e68:	e0bffe17 	ldw	r2,-8(fp)
 2001e6c:	10ffcc1e 	bne	r2,r3,2001da0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2001e70:	e037883a 	mov	sp,fp
 2001e74:	dfc00117 	ldw	ra,4(sp)
 2001e78:	df000017 	ldw	fp,0(sp)
 2001e7c:	dec00204 	addi	sp,sp,8
 2001e80:	f800283a 	ret

02001e84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2001e84:	deffff04 	addi	sp,sp,-4
 2001e88:	df000015 	stw	fp,0(sp)
 2001e8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2001e90:	000170fa 	wrctl	ienable,zero
}
 2001e94:	e037883a 	mov	sp,fp
 2001e98:	df000017 	ldw	fp,0(sp)
 2001e9c:	dec00104 	addi	sp,sp,4
 2001ea0:	f800283a 	ret

02001ea4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2001ea4:	defff904 	addi	sp,sp,-28
 2001ea8:	dfc00615 	stw	ra,24(sp)
 2001eac:	df000515 	stw	fp,20(sp)
 2001eb0:	df000504 	addi	fp,sp,20
 2001eb4:	e13ffd15 	stw	r4,-12(fp)
 2001eb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2001ebc:	e0bffe17 	ldw	r2,-8(fp)
 2001ec0:	10800017 	ldw	r2,0(r2)
 2001ec4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2001ec8:	e13ffd17 	ldw	r4,-12(fp)
 2001ecc:	20023000 	call	2002300 <strlen>
 2001ed0:	10800044 	addi	r2,r2,1
 2001ed4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2001ed8:	00000d06 	br	2001f10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2001edc:	e0bffc17 	ldw	r2,-16(fp)
 2001ee0:	11000217 	ldw	r4,8(r2)
 2001ee4:	e1bffb17 	ldw	r6,-20(fp)
 2001ee8:	e17ffd17 	ldw	r5,-12(fp)
 2001eec:	20021ec0 	call	20021ec <memcmp>
 2001ef0:	1004c03a 	cmpne	r2,r2,zero
 2001ef4:	1000031e 	bne	r2,zero,2001f04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2001ef8:	e0bffc17 	ldw	r2,-16(fp)
 2001efc:	e0bfff15 	stw	r2,-4(fp)
 2001f00:	00000706 	br	2001f20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2001f04:	e0bffc17 	ldw	r2,-16(fp)
 2001f08:	10800017 	ldw	r2,0(r2)
 2001f0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2001f10:	e0fffe17 	ldw	r3,-8(fp)
 2001f14:	e0bffc17 	ldw	r2,-16(fp)
 2001f18:	10fff01e 	bne	r2,r3,2001edc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2001f1c:	e03fff15 	stw	zero,-4(fp)
 2001f20:	e0bfff17 	ldw	r2,-4(fp)
}
 2001f24:	e037883a 	mov	sp,fp
 2001f28:	dfc00117 	ldw	ra,4(sp)
 2001f2c:	df000017 	ldw	fp,0(sp)
 2001f30:	dec00204 	addi	sp,sp,8
 2001f34:	f800283a 	ret

02001f38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2001f38:	defffa04 	addi	sp,sp,-24
 2001f3c:	dfc00515 	stw	ra,20(sp)
 2001f40:	df000415 	stw	fp,16(sp)
 2001f44:	df000404 	addi	fp,sp,16
 2001f48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2001f4c:	00808034 	movhi	r2,512
 2001f50:	108f9104 	addi	r2,r2,15940
 2001f54:	10800017 	ldw	r2,0(r2)
 2001f58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2001f5c:	00003306 	br	200202c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2001f60:	e0bffd17 	ldw	r2,-12(fp)
 2001f64:	11000217 	ldw	r4,8(r2)
 2001f68:	20023000 	call	2002300 <strlen>
 2001f6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2001f70:	e0bffd17 	ldw	r2,-12(fp)
 2001f74:	10c00217 	ldw	r3,8(r2)
 2001f78:	e0bffc17 	ldw	r2,-16(fp)
 2001f7c:	1885883a 	add	r2,r3,r2
 2001f80:	10bfffc4 	addi	r2,r2,-1
 2001f84:	10800003 	ldbu	r2,0(r2)
 2001f88:	10803fcc 	andi	r2,r2,255
 2001f8c:	1080201c 	xori	r2,r2,128
 2001f90:	10bfe004 	addi	r2,r2,-128
 2001f94:	10800bd8 	cmpnei	r2,r2,47
 2001f98:	1000031e 	bne	r2,zero,2001fa8 <alt_find_file+0x70>
    {
      len -= 1;
 2001f9c:	e0bffc17 	ldw	r2,-16(fp)
 2001fa0:	10bfffc4 	addi	r2,r2,-1
 2001fa4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2001fa8:	e0bffc17 	ldw	r2,-16(fp)
 2001fac:	1007883a 	mov	r3,r2
 2001fb0:	e0bffe17 	ldw	r2,-8(fp)
 2001fb4:	1885883a 	add	r2,r3,r2
 2001fb8:	10800003 	ldbu	r2,0(r2)
 2001fbc:	10803fcc 	andi	r2,r2,255
 2001fc0:	1080201c 	xori	r2,r2,128
 2001fc4:	10bfe004 	addi	r2,r2,-128
 2001fc8:	10800be0 	cmpeqi	r2,r2,47
 2001fcc:	10000a1e 	bne	r2,zero,2001ff8 <alt_find_file+0xc0>
 2001fd0:	e0bffc17 	ldw	r2,-16(fp)
 2001fd4:	1007883a 	mov	r3,r2
 2001fd8:	e0bffe17 	ldw	r2,-8(fp)
 2001fdc:	1885883a 	add	r2,r3,r2
 2001fe0:	10800003 	ldbu	r2,0(r2)
 2001fe4:	10803fcc 	andi	r2,r2,255
 2001fe8:	1080201c 	xori	r2,r2,128
 2001fec:	10bfe004 	addi	r2,r2,-128
 2001ff0:	1004c03a 	cmpne	r2,r2,zero
 2001ff4:	10000a1e 	bne	r2,zero,2002020 <alt_find_file+0xe8>
 2001ff8:	e0bffd17 	ldw	r2,-12(fp)
 2001ffc:	11000217 	ldw	r4,8(r2)
 2002000:	e1bffc17 	ldw	r6,-16(fp)
 2002004:	e17ffe17 	ldw	r5,-8(fp)
 2002008:	20021ec0 	call	20021ec <memcmp>
 200200c:	1004c03a 	cmpne	r2,r2,zero
 2002010:	1000031e 	bne	r2,zero,2002020 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2002014:	e0bffd17 	ldw	r2,-12(fp)
 2002018:	e0bfff15 	stw	r2,-4(fp)
 200201c:	00000806 	br	2002040 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2002020:	e0bffd17 	ldw	r2,-12(fp)
 2002024:	10800017 	ldw	r2,0(r2)
 2002028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200202c:	00c08034 	movhi	r3,512
 2002030:	18cf9104 	addi	r3,r3,15940
 2002034:	e0bffd17 	ldw	r2,-12(fp)
 2002038:	10ffc91e 	bne	r2,r3,2001f60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200203c:	e03fff15 	stw	zero,-4(fp)
 2002040:	e0bfff17 	ldw	r2,-4(fp)
}
 2002044:	e037883a 	mov	sp,fp
 2002048:	dfc00117 	ldw	ra,4(sp)
 200204c:	df000017 	ldw	fp,0(sp)
 2002050:	dec00204 	addi	sp,sp,8
 2002054:	f800283a 	ret

02002058 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2002058:	defffc04 	addi	sp,sp,-16
 200205c:	df000315 	stw	fp,12(sp)
 2002060:	df000304 	addi	fp,sp,12
 2002064:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2002068:	00bffa04 	movi	r2,-24
 200206c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2002070:	e03ffe15 	stw	zero,-8(fp)
 2002074:	00001e06 	br	20020f0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 2002078:	e0bffe17 	ldw	r2,-8(fp)
 200207c:	00c08034 	movhi	r3,512
 2002080:	18ce3104 	addi	r3,r3,14532
 2002084:	10800324 	muli	r2,r2,12
 2002088:	10c5883a 	add	r2,r2,r3
 200208c:	10800017 	ldw	r2,0(r2)
 2002090:	1004c03a 	cmpne	r2,r2,zero
 2002094:	1000131e 	bne	r2,zero,20020e4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 2002098:	e0bffe17 	ldw	r2,-8(fp)
 200209c:	00c08034 	movhi	r3,512
 20020a0:	18ce3104 	addi	r3,r3,14532
 20020a4:	10800324 	muli	r2,r2,12
 20020a8:	10c7883a 	add	r3,r2,r3
 20020ac:	e0bfff17 	ldw	r2,-4(fp)
 20020b0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 20020b4:	00808034 	movhi	r2,512
 20020b8:	108f9504 	addi	r2,r2,15956
 20020bc:	10c00017 	ldw	r3,0(r2)
 20020c0:	e0bffe17 	ldw	r2,-8(fp)
 20020c4:	1880040e 	bge	r3,r2,20020d8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 20020c8:	00c08034 	movhi	r3,512
 20020cc:	18cf9504 	addi	r3,r3,15956
 20020d0:	e0bffe17 	ldw	r2,-8(fp)
 20020d4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 20020d8:	e0bffe17 	ldw	r2,-8(fp)
 20020dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 20020e0:	00000606 	br	20020fc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20020e4:	e0bffe17 	ldw	r2,-8(fp)
 20020e8:	10800044 	addi	r2,r2,1
 20020ec:	e0bffe15 	stw	r2,-8(fp)
 20020f0:	e0bffe17 	ldw	r2,-8(fp)
 20020f4:	10800810 	cmplti	r2,r2,32
 20020f8:	103fdf1e 	bne	r2,zero,2002078 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20020fc:	e0bffd17 	ldw	r2,-12(fp)
}
 2002100:	e037883a 	mov	sp,fp
 2002104:	df000017 	ldw	fp,0(sp)
 2002108:	dec00104 	addi	sp,sp,4
 200210c:	f800283a 	ret

02002110 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2002110:	defffb04 	addi	sp,sp,-20
 2002114:	df000415 	stw	fp,16(sp)
 2002118:	df000404 	addi	fp,sp,16
 200211c:	e13ffe15 	stw	r4,-8(fp)
 2002120:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2002124:	e0bfff17 	ldw	r2,-4(fp)
 2002128:	10840070 	cmpltui	r2,r2,4097
 200212c:	1000021e 	bne	r2,zero,2002138 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2002130:	00840004 	movi	r2,4096
 2002134:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2002138:	e0fffe17 	ldw	r3,-8(fp)
 200213c:	e0bfff17 	ldw	r2,-4(fp)
 2002140:	1885883a 	add	r2,r3,r2
 2002144:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2002148:	e0bffe17 	ldw	r2,-8(fp)
 200214c:	e0bffd15 	stw	r2,-12(fp)
 2002150:	00000506 	br	2002168 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2002154:	e0bffd17 	ldw	r2,-12(fp)
 2002158:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 200215c:	e0bffd17 	ldw	r2,-12(fp)
 2002160:	10800804 	addi	r2,r2,32
 2002164:	e0bffd15 	stw	r2,-12(fp)
 2002168:	e0fffd17 	ldw	r3,-12(fp)
 200216c:	e0bffc17 	ldw	r2,-16(fp)
 2002170:	18bff836 	bltu	r3,r2,2002154 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2002174:	e0bffe17 	ldw	r2,-8(fp)
 2002178:	108007cc 	andi	r2,r2,31
 200217c:	1005003a 	cmpeq	r2,r2,zero
 2002180:	1000021e 	bne	r2,zero,200218c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 2002184:	e0bffd17 	ldw	r2,-12(fp)
 2002188:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 200218c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2002190:	e037883a 	mov	sp,fp
 2002194:	df000017 	ldw	fp,0(sp)
 2002198:	dec00104 	addi	sp,sp,4
 200219c:	f800283a 	ret

020021a0 <atexit>:
 20021a0:	200b883a 	mov	r5,r4
 20021a4:	000d883a 	mov	r6,zero
 20021a8:	0009883a 	mov	r4,zero
 20021ac:	000f883a 	mov	r7,zero
 20021b0:	20023741 	jmpi	2002374 <__register_exitproc>

020021b4 <exit>:
 20021b4:	defffe04 	addi	sp,sp,-8
 20021b8:	000b883a 	mov	r5,zero
 20021bc:	dc000015 	stw	r16,0(sp)
 20021c0:	dfc00115 	stw	ra,4(sp)
 20021c4:	2021883a 	mov	r16,r4
 20021c8:	20024ac0 	call	20024ac <__call_exitprocs>
 20021cc:	00808034 	movhi	r2,512
 20021d0:	108f9b04 	addi	r2,r2,15980
 20021d4:	11000017 	ldw	r4,0(r2)
 20021d8:	20800f17 	ldw	r2,60(r4)
 20021dc:	10000126 	beq	r2,zero,20021e4 <exit+0x30>
 20021e0:	103ee83a 	callr	r2
 20021e4:	8009883a 	mov	r4,r16
 20021e8:	20027e80 	call	20027e8 <_exit>

020021ec <memcmp>:
 20021ec:	00c000c4 	movi	r3,3
 20021f0:	1980032e 	bgeu	r3,r6,2002200 <memcmp+0x14>
 20021f4:	2144b03a 	or	r2,r4,r5
 20021f8:	10c4703a 	and	r2,r2,r3
 20021fc:	10000f26 	beq	r2,zero,200223c <memcmp+0x50>
 2002200:	31ffffc4 	addi	r7,r6,-1
 2002204:	3000061e 	bne	r6,zero,2002220 <memcmp+0x34>
 2002208:	00000a06 	br	2002234 <memcmp+0x48>
 200220c:	39ffffc4 	addi	r7,r7,-1
 2002210:	00bfffc4 	movi	r2,-1
 2002214:	21000044 	addi	r4,r4,1
 2002218:	29400044 	addi	r5,r5,1
 200221c:	38800526 	beq	r7,r2,2002234 <memcmp+0x48>
 2002220:	20c00003 	ldbu	r3,0(r4)
 2002224:	28800003 	ldbu	r2,0(r5)
 2002228:	18bff826 	beq	r3,r2,200220c <memcmp+0x20>
 200222c:	1885c83a 	sub	r2,r3,r2
 2002230:	f800283a 	ret
 2002234:	0005883a 	mov	r2,zero
 2002238:	f800283a 	ret
 200223c:	180f883a 	mov	r7,r3
 2002240:	20c00017 	ldw	r3,0(r4)
 2002244:	28800017 	ldw	r2,0(r5)
 2002248:	18bfed1e 	bne	r3,r2,2002200 <memcmp+0x14>
 200224c:	31bfff04 	addi	r6,r6,-4
 2002250:	21000104 	addi	r4,r4,4
 2002254:	29400104 	addi	r5,r5,4
 2002258:	39bff936 	bltu	r7,r6,2002240 <memcmp+0x54>
 200225c:	003fe806 	br	2002200 <memcmp+0x14>

02002260 <memcpy>:
 2002260:	01c003c4 	movi	r7,15
 2002264:	2007883a 	mov	r3,r4
 2002268:	3980032e 	bgeu	r7,r6,2002278 <memcpy+0x18>
 200226c:	2904b03a 	or	r2,r5,r4
 2002270:	108000cc 	andi	r2,r2,3
 2002274:	10000926 	beq	r2,zero,200229c <memcpy+0x3c>
 2002278:	30000626 	beq	r6,zero,2002294 <memcpy+0x34>
 200227c:	30cd883a 	add	r6,r6,r3
 2002280:	28800003 	ldbu	r2,0(r5)
 2002284:	29400044 	addi	r5,r5,1
 2002288:	18800005 	stb	r2,0(r3)
 200228c:	18c00044 	addi	r3,r3,1
 2002290:	30fffb1e 	bne	r6,r3,2002280 <memcpy+0x20>
 2002294:	2005883a 	mov	r2,r4
 2002298:	f800283a 	ret
 200229c:	3811883a 	mov	r8,r7
 20022a0:	200f883a 	mov	r7,r4
 20022a4:	28c00017 	ldw	r3,0(r5)
 20022a8:	31bffc04 	addi	r6,r6,-16
 20022ac:	38c00015 	stw	r3,0(r7)
 20022b0:	28800117 	ldw	r2,4(r5)
 20022b4:	38800115 	stw	r2,4(r7)
 20022b8:	28c00217 	ldw	r3,8(r5)
 20022bc:	38c00215 	stw	r3,8(r7)
 20022c0:	28800317 	ldw	r2,12(r5)
 20022c4:	29400404 	addi	r5,r5,16
 20022c8:	38800315 	stw	r2,12(r7)
 20022cc:	39c00404 	addi	r7,r7,16
 20022d0:	41bff436 	bltu	r8,r6,20022a4 <memcpy+0x44>
 20022d4:	008000c4 	movi	r2,3
 20022d8:	1180072e 	bgeu	r2,r6,20022f8 <memcpy+0x98>
 20022dc:	1007883a 	mov	r3,r2
 20022e0:	28800017 	ldw	r2,0(r5)
 20022e4:	31bfff04 	addi	r6,r6,-4
 20022e8:	29400104 	addi	r5,r5,4
 20022ec:	38800015 	stw	r2,0(r7)
 20022f0:	39c00104 	addi	r7,r7,4
 20022f4:	19bffa36 	bltu	r3,r6,20022e0 <memcpy+0x80>
 20022f8:	3807883a 	mov	r3,r7
 20022fc:	003fde06 	br	2002278 <memcpy+0x18>

02002300 <strlen>:
 2002300:	208000cc 	andi	r2,r4,3
 2002304:	2011883a 	mov	r8,r4
 2002308:	1000161e 	bne	r2,zero,2002364 <strlen+0x64>
 200230c:	20c00017 	ldw	r3,0(r4)
 2002310:	017fbff4 	movhi	r5,65279
 2002314:	297fbfc4 	addi	r5,r5,-257
 2002318:	01e02074 	movhi	r7,32897
 200231c:	39e02004 	addi	r7,r7,-32640
 2002320:	1945883a 	add	r2,r3,r5
 2002324:	11c4703a 	and	r2,r2,r7
 2002328:	00c6303a 	nor	r3,zero,r3
 200232c:	1886703a 	and	r3,r3,r2
 2002330:	18000c1e 	bne	r3,zero,2002364 <strlen+0x64>
 2002334:	280d883a 	mov	r6,r5
 2002338:	380b883a 	mov	r5,r7
 200233c:	21000104 	addi	r4,r4,4
 2002340:	20800017 	ldw	r2,0(r4)
 2002344:	1187883a 	add	r3,r2,r6
 2002348:	1946703a 	and	r3,r3,r5
 200234c:	0084303a 	nor	r2,zero,r2
 2002350:	10c4703a 	and	r2,r2,r3
 2002354:	103ff926 	beq	r2,zero,200233c <strlen+0x3c>
 2002358:	20800007 	ldb	r2,0(r4)
 200235c:	10000326 	beq	r2,zero,200236c <strlen+0x6c>
 2002360:	21000044 	addi	r4,r4,1
 2002364:	20800007 	ldb	r2,0(r4)
 2002368:	103ffd1e 	bne	r2,zero,2002360 <strlen+0x60>
 200236c:	2205c83a 	sub	r2,r4,r8
 2002370:	f800283a 	ret

02002374 <__register_exitproc>:
 2002374:	defffa04 	addi	sp,sp,-24
 2002378:	00808034 	movhi	r2,512
 200237c:	108f9b04 	addi	r2,r2,15980
 2002380:	dc000015 	stw	r16,0(sp)
 2002384:	14000017 	ldw	r16,0(r2)
 2002388:	dd000415 	stw	r20,16(sp)
 200238c:	2829883a 	mov	r20,r5
 2002390:	81405217 	ldw	r5,328(r16)
 2002394:	dcc00315 	stw	r19,12(sp)
 2002398:	dc800215 	stw	r18,8(sp)
 200239c:	dc400115 	stw	r17,4(sp)
 20023a0:	dfc00515 	stw	ra,20(sp)
 20023a4:	2023883a 	mov	r17,r4
 20023a8:	3027883a 	mov	r19,r6
 20023ac:	3825883a 	mov	r18,r7
 20023b0:	28002526 	beq	r5,zero,2002448 <__register_exitproc+0xd4>
 20023b4:	29000117 	ldw	r4,4(r5)
 20023b8:	008007c4 	movi	r2,31
 20023bc:	11002716 	blt	r2,r4,200245c <__register_exitproc+0xe8>
 20023c0:	8800101e 	bne	r17,zero,2002404 <__register_exitproc+0x90>
 20023c4:	2105883a 	add	r2,r4,r4
 20023c8:	1085883a 	add	r2,r2,r2
 20023cc:	20c00044 	addi	r3,r4,1
 20023d0:	1145883a 	add	r2,r2,r5
 20023d4:	0009883a 	mov	r4,zero
 20023d8:	15000215 	stw	r20,8(r2)
 20023dc:	28c00115 	stw	r3,4(r5)
 20023e0:	2005883a 	mov	r2,r4
 20023e4:	dfc00517 	ldw	ra,20(sp)
 20023e8:	dd000417 	ldw	r20,16(sp)
 20023ec:	dcc00317 	ldw	r19,12(sp)
 20023f0:	dc800217 	ldw	r18,8(sp)
 20023f4:	dc400117 	ldw	r17,4(sp)
 20023f8:	dc000017 	ldw	r16,0(sp)
 20023fc:	dec00604 	addi	sp,sp,24
 2002400:	f800283a 	ret
 2002404:	29802204 	addi	r6,r5,136
 2002408:	00800044 	movi	r2,1
 200240c:	110e983a 	sll	r7,r2,r4
 2002410:	30c04017 	ldw	r3,256(r6)
 2002414:	2105883a 	add	r2,r4,r4
 2002418:	1085883a 	add	r2,r2,r2
 200241c:	1185883a 	add	r2,r2,r6
 2002420:	19c6b03a 	or	r3,r3,r7
 2002424:	14802015 	stw	r18,128(r2)
 2002428:	14c00015 	stw	r19,0(r2)
 200242c:	00800084 	movi	r2,2
 2002430:	30c04015 	stw	r3,256(r6)
 2002434:	88bfe31e 	bne	r17,r2,20023c4 <__register_exitproc+0x50>
 2002438:	30804117 	ldw	r2,260(r6)
 200243c:	11c4b03a 	or	r2,r2,r7
 2002440:	30804115 	stw	r2,260(r6)
 2002444:	003fdf06 	br	20023c4 <__register_exitproc+0x50>
 2002448:	00808034 	movhi	r2,512
 200244c:	10957004 	addi	r2,r2,21952
 2002450:	100b883a 	mov	r5,r2
 2002454:	80805215 	stw	r2,328(r16)
 2002458:	003fd606 	br	20023b4 <__register_exitproc+0x40>
 200245c:	00800034 	movhi	r2,0
 2002460:	10800004 	addi	r2,r2,0
 2002464:	1000021e 	bne	r2,zero,2002470 <__register_exitproc+0xfc>
 2002468:	013fffc4 	movi	r4,-1
 200246c:	003fdc06 	br	20023e0 <__register_exitproc+0x6c>
 2002470:	01006404 	movi	r4,400
 2002474:	103ee83a 	callr	r2
 2002478:	1007883a 	mov	r3,r2
 200247c:	103ffa26 	beq	r2,zero,2002468 <__register_exitproc+0xf4>
 2002480:	80805217 	ldw	r2,328(r16)
 2002484:	180b883a 	mov	r5,r3
 2002488:	18000115 	stw	zero,4(r3)
 200248c:	18800015 	stw	r2,0(r3)
 2002490:	80c05215 	stw	r3,328(r16)
 2002494:	18006215 	stw	zero,392(r3)
 2002498:	18006315 	stw	zero,396(r3)
 200249c:	0009883a 	mov	r4,zero
 20024a0:	883fc826 	beq	r17,zero,20023c4 <__register_exitproc+0x50>
 20024a4:	003fd706 	br	2002404 <__register_exitproc+0x90>

020024a8 <register_fini>:
 20024a8:	f800283a 	ret

020024ac <__call_exitprocs>:
 20024ac:	00808034 	movhi	r2,512
 20024b0:	108f9b04 	addi	r2,r2,15980
 20024b4:	10800017 	ldw	r2,0(r2)
 20024b8:	defff304 	addi	sp,sp,-52
 20024bc:	df000b15 	stw	fp,44(sp)
 20024c0:	d8800115 	stw	r2,4(sp)
 20024c4:	00800034 	movhi	r2,0
 20024c8:	10800004 	addi	r2,r2,0
 20024cc:	1005003a 	cmpeq	r2,r2,zero
 20024d0:	d8800215 	stw	r2,8(sp)
 20024d4:	d8800117 	ldw	r2,4(sp)
 20024d8:	dd400815 	stw	r21,32(sp)
 20024dc:	dd000715 	stw	r20,28(sp)
 20024e0:	10805204 	addi	r2,r2,328
 20024e4:	dfc00c15 	stw	ra,48(sp)
 20024e8:	ddc00a15 	stw	r23,40(sp)
 20024ec:	dd800915 	stw	r22,36(sp)
 20024f0:	dcc00615 	stw	r19,24(sp)
 20024f4:	dc800515 	stw	r18,20(sp)
 20024f8:	dc400415 	stw	r17,16(sp)
 20024fc:	dc000315 	stw	r16,12(sp)
 2002500:	282b883a 	mov	r21,r5
 2002504:	2039883a 	mov	fp,r4
 2002508:	d8800015 	stw	r2,0(sp)
 200250c:	2829003a 	cmpeq	r20,r5,zero
 2002510:	d8800117 	ldw	r2,4(sp)
 2002514:	14405217 	ldw	r17,328(r2)
 2002518:	88001026 	beq	r17,zero,200255c <__call_exitprocs+0xb0>
 200251c:	ddc00017 	ldw	r23,0(sp)
 2002520:	88800117 	ldw	r2,4(r17)
 2002524:	8c802204 	addi	r18,r17,136
 2002528:	143fffc4 	addi	r16,r2,-1
 200252c:	80000916 	blt	r16,zero,2002554 <__call_exitprocs+0xa8>
 2002530:	05bfffc4 	movi	r22,-1
 2002534:	a000151e 	bne	r20,zero,200258c <__call_exitprocs+0xe0>
 2002538:	8409883a 	add	r4,r16,r16
 200253c:	2105883a 	add	r2,r4,r4
 2002540:	1485883a 	add	r2,r2,r18
 2002544:	10c02017 	ldw	r3,128(r2)
 2002548:	a8c01126 	beq	r21,r3,2002590 <__call_exitprocs+0xe4>
 200254c:	843fffc4 	addi	r16,r16,-1
 2002550:	85bff81e 	bne	r16,r22,2002534 <__call_exitprocs+0x88>
 2002554:	d8800217 	ldw	r2,8(sp)
 2002558:	10003126 	beq	r2,zero,2002620 <__call_exitprocs+0x174>
 200255c:	dfc00c17 	ldw	ra,48(sp)
 2002560:	df000b17 	ldw	fp,44(sp)
 2002564:	ddc00a17 	ldw	r23,40(sp)
 2002568:	dd800917 	ldw	r22,36(sp)
 200256c:	dd400817 	ldw	r21,32(sp)
 2002570:	dd000717 	ldw	r20,28(sp)
 2002574:	dcc00617 	ldw	r19,24(sp)
 2002578:	dc800517 	ldw	r18,20(sp)
 200257c:	dc400417 	ldw	r17,16(sp)
 2002580:	dc000317 	ldw	r16,12(sp)
 2002584:	dec00d04 	addi	sp,sp,52
 2002588:	f800283a 	ret
 200258c:	8409883a 	add	r4,r16,r16
 2002590:	88c00117 	ldw	r3,4(r17)
 2002594:	2105883a 	add	r2,r4,r4
 2002598:	1445883a 	add	r2,r2,r17
 200259c:	18ffffc4 	addi	r3,r3,-1
 20025a0:	11800217 	ldw	r6,8(r2)
 20025a4:	1c001526 	beq	r3,r16,20025fc <__call_exitprocs+0x150>
 20025a8:	10000215 	stw	zero,8(r2)
 20025ac:	303fe726 	beq	r6,zero,200254c <__call_exitprocs+0xa0>
 20025b0:	00c00044 	movi	r3,1
 20025b4:	1c06983a 	sll	r3,r3,r16
 20025b8:	90804017 	ldw	r2,256(r18)
 20025bc:	8cc00117 	ldw	r19,4(r17)
 20025c0:	1884703a 	and	r2,r3,r2
 20025c4:	10001426 	beq	r2,zero,2002618 <__call_exitprocs+0x16c>
 20025c8:	90804117 	ldw	r2,260(r18)
 20025cc:	1884703a 	and	r2,r3,r2
 20025d0:	10000c1e 	bne	r2,zero,2002604 <__call_exitprocs+0x158>
 20025d4:	2105883a 	add	r2,r4,r4
 20025d8:	1485883a 	add	r2,r2,r18
 20025dc:	11400017 	ldw	r5,0(r2)
 20025e0:	e009883a 	mov	r4,fp
 20025e4:	303ee83a 	callr	r6
 20025e8:	88800117 	ldw	r2,4(r17)
 20025ec:	98bfc81e 	bne	r19,r2,2002510 <__call_exitprocs+0x64>
 20025f0:	b8800017 	ldw	r2,0(r23)
 20025f4:	147fd526 	beq	r2,r17,200254c <__call_exitprocs+0xa0>
 20025f8:	003fc506 	br	2002510 <__call_exitprocs+0x64>
 20025fc:	8c000115 	stw	r16,4(r17)
 2002600:	003fea06 	br	20025ac <__call_exitprocs+0x100>
 2002604:	2105883a 	add	r2,r4,r4
 2002608:	1485883a 	add	r2,r2,r18
 200260c:	11000017 	ldw	r4,0(r2)
 2002610:	303ee83a 	callr	r6
 2002614:	003ff406 	br	20025e8 <__call_exitprocs+0x13c>
 2002618:	303ee83a 	callr	r6
 200261c:	003ff206 	br	20025e8 <__call_exitprocs+0x13c>
 2002620:	88800117 	ldw	r2,4(r17)
 2002624:	1000081e 	bne	r2,zero,2002648 <__call_exitprocs+0x19c>
 2002628:	89000017 	ldw	r4,0(r17)
 200262c:	20000726 	beq	r4,zero,200264c <__call_exitprocs+0x1a0>
 2002630:	b9000015 	stw	r4,0(r23)
 2002634:	8809883a 	mov	r4,r17
 2002638:	00000000 	call	0 <__reset-0x2000000>
 200263c:	bc400017 	ldw	r17,0(r23)
 2002640:	883fb71e 	bne	r17,zero,2002520 <__call_exitprocs+0x74>
 2002644:	003fc506 	br	200255c <__call_exitprocs+0xb0>
 2002648:	89000017 	ldw	r4,0(r17)
 200264c:	882f883a 	mov	r23,r17
 2002650:	2023883a 	mov	r17,r4
 2002654:	883fb21e 	bne	r17,zero,2002520 <__call_exitprocs+0x74>
 2002658:	003fc006 	br	200255c <__call_exitprocs+0xb0>

0200265c <udivmodsi4>:
 200265c:	29001b2e 	bgeu	r5,r4,20026cc <udivmodsi4+0x70>
 2002660:	28001a16 	blt	r5,zero,20026cc <udivmodsi4+0x70>
 2002664:	00800044 	movi	r2,1
 2002668:	0007883a 	mov	r3,zero
 200266c:	01c007c4 	movi	r7,31
 2002670:	00000306 	br	2002680 <udivmodsi4+0x24>
 2002674:	19c01326 	beq	r3,r7,20026c4 <udivmodsi4+0x68>
 2002678:	18c00044 	addi	r3,r3,1
 200267c:	28000416 	blt	r5,zero,2002690 <udivmodsi4+0x34>
 2002680:	294b883a 	add	r5,r5,r5
 2002684:	1085883a 	add	r2,r2,r2
 2002688:	293ffa36 	bltu	r5,r4,2002674 <udivmodsi4+0x18>
 200268c:	10000d26 	beq	r2,zero,20026c4 <udivmodsi4+0x68>
 2002690:	0007883a 	mov	r3,zero
 2002694:	21400236 	bltu	r4,r5,20026a0 <udivmodsi4+0x44>
 2002698:	2149c83a 	sub	r4,r4,r5
 200269c:	1886b03a 	or	r3,r3,r2
 20026a0:	1004d07a 	srli	r2,r2,1
 20026a4:	280ad07a 	srli	r5,r5,1
 20026a8:	103ffa1e 	bne	r2,zero,2002694 <udivmodsi4+0x38>
 20026ac:	30000226 	beq	r6,zero,20026b8 <udivmodsi4+0x5c>
 20026b0:	2005883a 	mov	r2,r4
 20026b4:	f800283a 	ret
 20026b8:	1809883a 	mov	r4,r3
 20026bc:	2005883a 	mov	r2,r4
 20026c0:	f800283a 	ret
 20026c4:	0007883a 	mov	r3,zero
 20026c8:	003ff806 	br	20026ac <udivmodsi4+0x50>
 20026cc:	00800044 	movi	r2,1
 20026d0:	0007883a 	mov	r3,zero
 20026d4:	003fef06 	br	2002694 <udivmodsi4+0x38>

020026d8 <__divsi3>:
 20026d8:	defffe04 	addi	sp,sp,-8
 20026dc:	dc000015 	stw	r16,0(sp)
 20026e0:	dfc00115 	stw	ra,4(sp)
 20026e4:	0021883a 	mov	r16,zero
 20026e8:	20000c16 	blt	r4,zero,200271c <__divsi3+0x44>
 20026ec:	000d883a 	mov	r6,zero
 20026f0:	28000e16 	blt	r5,zero,200272c <__divsi3+0x54>
 20026f4:	200265c0 	call	200265c <udivmodsi4>
 20026f8:	1007883a 	mov	r3,r2
 20026fc:	8005003a 	cmpeq	r2,r16,zero
 2002700:	1000011e 	bne	r2,zero,2002708 <__divsi3+0x30>
 2002704:	00c7c83a 	sub	r3,zero,r3
 2002708:	1805883a 	mov	r2,r3
 200270c:	dfc00117 	ldw	ra,4(sp)
 2002710:	dc000017 	ldw	r16,0(sp)
 2002714:	dec00204 	addi	sp,sp,8
 2002718:	f800283a 	ret
 200271c:	0109c83a 	sub	r4,zero,r4
 2002720:	04000044 	movi	r16,1
 2002724:	000d883a 	mov	r6,zero
 2002728:	283ff20e 	bge	r5,zero,20026f4 <__divsi3+0x1c>
 200272c:	014bc83a 	sub	r5,zero,r5
 2002730:	8021003a 	cmpeq	r16,r16,zero
 2002734:	003fef06 	br	20026f4 <__divsi3+0x1c>

02002738 <__modsi3>:
 2002738:	deffff04 	addi	sp,sp,-4
 200273c:	dfc00015 	stw	ra,0(sp)
 2002740:	01800044 	movi	r6,1
 2002744:	2807883a 	mov	r3,r5
 2002748:	20000416 	blt	r4,zero,200275c <__modsi3+0x24>
 200274c:	28000c16 	blt	r5,zero,2002780 <__modsi3+0x48>
 2002750:	dfc00017 	ldw	ra,0(sp)
 2002754:	dec00104 	addi	sp,sp,4
 2002758:	200265c1 	jmpi	200265c <udivmodsi4>
 200275c:	0109c83a 	sub	r4,zero,r4
 2002760:	28000b16 	blt	r5,zero,2002790 <__modsi3+0x58>
 2002764:	180b883a 	mov	r5,r3
 2002768:	01800044 	movi	r6,1
 200276c:	200265c0 	call	200265c <udivmodsi4>
 2002770:	0085c83a 	sub	r2,zero,r2
 2002774:	dfc00017 	ldw	ra,0(sp)
 2002778:	dec00104 	addi	sp,sp,4
 200277c:	f800283a 	ret
 2002780:	014bc83a 	sub	r5,zero,r5
 2002784:	dfc00017 	ldw	ra,0(sp)
 2002788:	dec00104 	addi	sp,sp,4
 200278c:	200265c1 	jmpi	200265c <udivmodsi4>
 2002790:	0147c83a 	sub	r3,zero,r5
 2002794:	003ff306 	br	2002764 <__modsi3+0x2c>

02002798 <__udivsi3>:
 2002798:	000d883a 	mov	r6,zero
 200279c:	200265c1 	jmpi	200265c <udivmodsi4>

020027a0 <__umodsi3>:
 20027a0:	01800044 	movi	r6,1
 20027a4:	200265c1 	jmpi	200265c <udivmodsi4>

020027a8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 20027a8:	defffd04 	addi	sp,sp,-12
 20027ac:	df000215 	stw	fp,8(sp)
 20027b0:	df000204 	addi	fp,sp,8
 20027b4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 20027b8:	e0bfff17 	ldw	r2,-4(fp)
 20027bc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20027c0:	e0bffe17 	ldw	r2,-8(fp)
 20027c4:	1005003a 	cmpeq	r2,r2,zero
 20027c8:	1000021e 	bne	r2,zero,20027d4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 20027cc:	002af070 	cmpltui	zero,zero,43969
 20027d0:	00000106 	br	20027d8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 20027d4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 20027d8:	e037883a 	mov	sp,fp
 20027dc:	df000017 	ldw	fp,0(sp)
 20027e0:	dec00104 	addi	sp,sp,4
 20027e4:	f800283a 	ret

020027e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20027e8:	defffd04 	addi	sp,sp,-12
 20027ec:	dfc00215 	stw	ra,8(sp)
 20027f0:	df000115 	stw	fp,4(sp)
 20027f4:	df000104 	addi	fp,sp,4
 20027f8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 20027fc:	e13fff17 	ldw	r4,-4(fp)
 2002800:	20027a80 	call	20027a8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2002804:	003fff06 	br	2002804 <_exit+0x1c>
 2002808:	020024a8 	cmpgeui	r8,zero,146
